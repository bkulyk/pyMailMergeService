<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><title>Extensions</title><link rel="stylesheet" type="text/css" href="./5 Extensions_files/Extensions.css" /><meta name="generator" content="StarOffice/OpenOffice XSLT (http://xml.openoffice.org/sx2ml)" /><meta name="author" content="Dietrich Schulten" /><meta name="created" content="2002-04-22T14:03:36" /><meta name="changedby" content="JÃ¼rgen Schmidt" /><meta name="changed" content="2007-07-04T16:24:25" /><base href="." />
</head><body dir="ltr"><div id="wm-ipp" style="position: relative; padding-top: 0px; padding-right: 5px; padding-bottom: 0px; padding-left: 5px; min-height: 70px; min-width: 800px; z-index: 9000; display: none; ">
<div id="wm-ipp-inside" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(http://static.waybackmachine.org/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="http://waybackmachine.org/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="./5 Extensions_files/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0" /></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="http://waybackmachine.org/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml" style="width:400px;font-size:11px;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20080924043146" /><input type="submit" value="Go" style="font-size:11px;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;margin-left:5px;" /><span id="wm_tb_options" style="display:block;" /></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:&apos;Helvetica&apos;,&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20080718035622/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="18 Jul 2008"><strong>JUL</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: rgb(0, 0, 0); font-size: 11px !important; font-weight: bold; text-transform: uppercase; width: 34px; height: 15px; padding-top: 1px; text-align: center; color: rgb(255, 255, 0); background-position: initial initial; background-repeat: initial initial; " title="You are here: 4:31:46 Sep 24, 2008">Sep</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Oct
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20080718035622/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml" title="3:56:22 Jul 18, 2008" style="background-color:transparent;border:none;"><img src="./5 Extensions_files/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: rgb(0, 0, 0); width: 34px; height: 24px; padding-top: 2px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; text-align: center; font-size: 24px; font-weight: bold; color: rgb(255, 255, 0); background-position: initial initial; background-repeat: initial initial; " title="You are here: 4:31:46 Sep 24, 2008">24</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="./5 Extensions_files/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0" />
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20070715203953/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="15 Jul 2007"><strong>2007</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: rgb(0, 0, 0); font-size: 11px !important; font-weight: bold; padding-top: 1px; width: 34px; height: 13px; text-align: center; color: rgb(255, 255, 0); background-position: initial initial; background-repeat: initial initial; " title="You are here: 4:31:46 Sep 24, 2008">2008</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="http://waybackmachine.org/20080924043146*/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>17 captures</strong></a>
           <div style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">5 May 07 - 24 Sep 08</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:400px;height:27px;" href="http://replay.waybackmachine.org/20000801000000/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml" id="wm-graph-anchor">
       <div id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:400px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;" onmouseover="showTrackers(&apos;inline&apos;);" onmouseout="showTrackers(&apos;none&apos;);" onmousemove="trackMouseMove(event,this)" alt="sparklines" width="400" height="27" border="0" src="./5 Extensions_files/graph.jsp" />
			<img id="wbMouseTrackYearImg" style="position: absolute; z-index: 9010; left: 100px; display: none; " width="25" height="27" border="0" src="./5 Extensions_files/transp-yellow-pixel.png" />
			<img id="wbMouseTrackMonthImg" style="position: absolute; z-index: 9011; left: 115px; display: none; " width="2" height="27" border="0" src="./5 Extensions_files/transp-red-pixel.png" />
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById(&apos;wm-ipp&apos;).style.display=&apos;none&apos;;" style="display:block;padding-right:18px;background:url(http://static.waybackmachine.org/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.waybackmachine.org/" style="display:block;padding-right:18px;background:url(http://static.waybackmachine.org/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<!-- BEGIN WAYBACK TOOLBAR INSERT -->

<script type="text/javascript" src="./5 Extensions_files/disclaim-element.js" />
<script type="text/javascript" src="./5 Extensions_files/graph-calc.js" />
<script type="text/javascript" src="./5 Extensions_files/jquery.min.js" />
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1325375999999;
var wbPrefix = "http://replay.waybackmachine.org/";
var wbCurrentUrl = "http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml";

var curYear = -1;
var curMonth = -1;
var yearCount = 16;
var firstYear = 1996;
var imgWidth=400;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "24";
var displayMonth = "Sep";
var displayYear = "2008";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>

<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->
<p style="text-align:center;"><small>[ <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml" title="Link to previous document">Previous document</a> | <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/DevelopersGuide.xhtml" title="Link to the Content Table">Content Table</a> | <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml" title="Link to next document">Next document</a> ]</small></p>
  
  
  
  <h1 style="margin-left:2.54cm;" class="Head1"><a name="1_Extensions" />5Â Â Extensions</h1>
  <p class="Under_Head1">Â </p>
  <p class="P3">An extension is a file intended for the distribution of code and / or data which is to be used by OOo. The file has the file extension âoxtâ(formerly .uno.pkg and .zip), and it acts as a container for various items, such as libraries, JARs, configuration data, type libraries, Basic libraries, Basic dialogs, etc. Â Before OOo can use any content of the extension, it needs to be installed by the Extension Manager.</p>
  <h2 class="Head2"><a name="1_1_Extension_Manager" />5.1Â Â Extension Manager</h2>
  <p class="P3">The Extension Manager is a tool for managing extensions and other deployable items, such as separate libraries, JARs, configuration data files. This includes adding, removing, enabling and disabling of these items.Â </p>
  <p class="P3">The Extension Manager can be started from within the office Â by pressing the menu item Tools | Extension Manager or by running the unopkg executable, which is contained in the program directory of the office installation.</p>
  <p class="P3">When an extension is installed, then a copy is created which is kept either in the user installation or the shared installation (&lt;office-directory&gt;/share). Â The original extension can therefore be (re) moved after installation.</p>
  <h3 class="Head3"><a name="1_1_1_Deployment_Items" />5.1.1Â Â Deployment Items</h3>
  <p class="Paragraph">The Extension Manager can be used to deploy various types of files. It is primarily used for extensions. The latest incarnation of an extensions is the .oxt file, which has superseded â.uno.pkgâ and â.zipâ.Â </p>
  <p class="Paragraph">Apart from extensions the Extension Manager can also manage these types:Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P4" style="margin-left:2.5cm;"><p class="P4" style="margin-left:0cm;">Configuration data (.xcu, .xcs)Â </p></li>
   <li class="P4" style="margin-left:2.5cm;"><p class="P4" style="margin-left:0cm;">UNO Libraries (.dll /.so). Â </p></li>
   <li class="P4" style="margin-left:2.5cm;"><p class="P4" style="margin-left:0cm;">JARs (.jar)Â </p></li>
   <li class="P4" style="margin-left:2.5cm;"><p class="P4" style="margin-left:0cm;">Type libraries (.rdb)Â </p></li>
  </ul>
  <h3 class="Head3"><a name="1_1_2_Installing_Extensions_for_All_or_a_Single_User" />5.1.2Â Â Installing Extensions for All or a Single User</h3>
  <p class="Paragraph">When installing an extension one has to decide if all possible users can use it or only oneself. In the first case, Â users cannot enable, disable or remove the extension. This can only be done by the administrator. That also means, that in case the extension changes the appearance (toolbars, menu bar, etc.), all users are affected. They may, however, configure their office so that particular menu or toolbar items are not shown. There is currently no way to centrally install an extension for particular user groups.</p>
  <p class="Paragraph">If an extension is to be installed for all users or only for the single user is determined during installation. The person, who is going to install the extension, must select in the Extension Manager dialog either âMy Extensionsâ or âOpenOffice.org Extensionsâ before pressing the âAdd...â button. Â In the first case, the extension will only be installed for the current user, whereas in the latter case it Â will be installed for all users. </p>
  <p class="Paragraph">When running unopkg in a windowless mode then the option â--sharedâ determines if an extension can be used by all users. For example:Â </p>
  <p class="P5">[&lt;OfficePath&gt;/program] $ unopkg add --shared my_extension.oxtÂ </p>
  <p class="Paragraph">would install my_extensions, so that it can be used by all users.Â </p>
  <p class="Paragraph">Extensions which are installed for all users are also called shared extensions, and those installed only for the user (who installed it) are called user extensions. Â </p>
  <h3 class="Head3"><a name="1_1_3_Extension_Manager_in_OpenOffice.org" />5.1.3Â Â Extension Manager in OpenOffice.org</h3>
  <p class="Paragraph">Within a running office the Extension Manager is started through the menu item âTools | Extension Manager ...â. Â When started in this way, Â extensions can only be installed as user extensions. Â All items deployed under âOpenOffice.org Extensions cannot be modified. But it is possible to export them.</p>
  <h3 class="Head3"><a name="1_1_4_unopkg" />5.1.4Â Â unopkg</h3>
  <p class="Paragraph">The unopkg executable offers another way to start the Extension Manager. Â It supersedes the pkgchk executable which was used in OpenOffice.org 1.1.0 and older versions and which no longer works.</p>
  <p class="Paragraph">In contrast to the Extension Manager in OpenOffice.org unopkg can also Â manage Â shared extensions. For example:</p>
  <p class="P5">[&lt;OfficePath&gt;/program] $ unopkg add --shared my_extension.oxtÂ </p>
  <p class="Paragraph">installs my_extension.oxt for all users.Â </p>
  <p class="Paragraph">unopkg offers a windowless mode in which all interactions occurs through the console. This is the default. If unopkg is started with the subcommand âguiâ then the Extension Manager dialog appears which is exactly the same as the one in OpenOffice.org.Â </p>
  <p class="P5">[&lt;OfficePath&gt;/program] $ unopkg guiÂ </p>
  <p class="P6">The difference is that in the dialog all items deployed under âOpenOffice.org Extensionsâ can be modified and new items can be added there as well. All actions, that is, adding, removing, etc. can be done in the dialog. Therefore âunopkg guiâ does not require any more parameters.Â </p>
  <p class="P6">It follows a short overview what can be done with unopkg. Since there are many more commands, have a look at the help text that can be obtained by calling â<span class="UserEntry">unopkg -hâ</span>.</p>
  <p class="P6">First of all open a console and change into the program directory of the office installation.Â </p>
  <p class="P6">Adding an extension for a single user:Â </p>
  <p class="P7">[&lt;OfficePath&gt;/program] $ unopkg add my_extension.oxtÂ </p>
  <p class="Paragraph">Adding an extension for all users:Â </p>
  <p class="P5">[&lt;OfficePath&gt;/program] $ unopkg add --shared my_extension.oxtÂ </p>
  <p class="P6">Removing a user extension is done via the identifier of the extension (see <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#1_3_Extension_Identifiers" title="see chapter 5.3 Extensions - Extension Identifiers">5.3 Extensions - Extension Identifiers</a>):Â </p>
  <p class="P7">[&lt;OfficePath&gt;/program] $ unopkg remove my.domain.my_extension-idÂ </p>
  <p class="Paragraph">Remove a shared extension:Â </p>
  <p class="P5">[&lt;OfficePath&gt;/program] $ unopkg remove --shared my.domain.my_extension-idÂ </p>
  <p class="P6">Before you install an extension or other item for all users, make <span class="Emphasis">absolutely</span> sure there are no running instances of OpenOffice.org. <span class="wwwftpemail">unopkg</span> cannot recognize if there are running instances of Â OpenOffice.org from different users. Installing into a running office installation might cause inconsistencies and destroy your installation!</p>
  <p class="Paragraph">When a user starts OpenOffice.org and then starts unopkg, then the Extension Manager from the office is used and unopkg terminates. Then, however, no shared extensions and other shared items can be modified.Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table4"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table4A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./5 Extensions_files/important.gif" class="fr2" /></div>
     </td><td style="text-align:left;width:15.529cm; " class="Table4B1">
      <p class="P8">Although it is now possible to deploy âliveâ into a running OpenOffice.org process, there are some limitations you should be aware of: Removing a type library from a running process is not possible, because this may lead to crashes when the type is needed. Thus if you, for example, Â uninstall a package that comes with a UNO type library, these types will vanish upon next process startup, but not before.</p>
      <p class="P8">There may also be problems with cached configuration data, because parts of the running process do not listen for configuration updates (<span class="T2">for example,</span> menu bars). Most often, those parts read the configuration just once upon startup.</p>
     </td></tr></table></div>
  <h3 class="Head3"><a name="1_1_5_Location_of_installed_Extensions" />5.1.5Â Â Location of installed Extensions</h3>
  <p class="Paragraph">Sometimes an extension developer needs to know the path to the root of his installed extension e.g. to load some additional data. You can use the singleton PackageInformationProvider to get an URL for an installed extension with a given Extension Identifier. For more information about Extension Identifiers see <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#1_3_Extension_Identifiers" title="see chapter 5.3 Extensions - Extension Identifiers">5.3 Extensions - Extension Identifiers</a></span>. For more information see <span class="Codeintext"><a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/common/ref/com/sun/star/deployement/PackageInformationProvider.html" title="see type com.sun.star.deployement.PackageInformationProvider">com.sun.star.deployement.PackageInformationProvider</a></span> and have a look at <span class="Codeintext"><a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/common/ref/com/sun/star/deployment/XPackageInformationProvider.html" title="see type com.sun.star.deployment.XPackageInformationProvider">com.sun.star.deployment.XPackageInformationProvider</a></span>.</p>
  <p class="Code">...Â </p>
  <p class="Code">namespace css = com::sun::star;Â </p>
  <p class="Code">css::uno::Reference&lt; css::uno::XComponentContext &gt; mxContext;Â </p>
  <p class="Code">...Â </p>
  <p class="Code">css::uno::Reference&lt; css::deployment::XPackageInformationProvider &gt;Â </p>
  <p class="Code">Â  Â  xInfoProvider( css::deployment::PackageInformationProvider::get( mxContext ) );</p>
  <p class="Code">Â </p>
  <p class="Code">// "MY_PACKAGE_ID" is the identifier of the package where we want to get location fromÂ </p>
  <p class="Code">rtl::OUString sLocation = xInfoProvider-&gt;getPackageLocation( Â </p>
  <p class="Code">Â  Â  Â  Â  rtl::OUString::createFromAscii( "MY_PACKAGE_ID" ) );</p>
  <p class="Code">...Â </p>
  <h2 class="Head2"><a name="1_2_File_Format" />5.2Â Â File Format</h2>
  <p class="P6">An extension is a zip file having a name that ends on â<span class="CODE">.oxt</span>â (formerly â<span class="Codeintext">.uno.pkg</span>â or â.zipâ). Â The file extension .oxt is associated with the MIME / media type vnd.openofficeorg.extension. Â An extension can contain UNO components, type libraries, configuration files, dialog or basic libraries, etc. </p>
  <p class="P6">An extension should also contain a description.xml (see <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#1_5_description.xml" title="see chapter 5.5 Extensions - description.xml">5.5 Extensions - description.xml</a>) and must contain a directory META-INF (all uppercase). The META-INF directory contains a manifest.xml which lists all items and their media-type.Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table5"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.452cm; " class="Table5A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./5 Extensions_files/interesting.gif" class="fr2" /></div>
     </td><td style="text-align:left;width:15.528cm; " class="Table5B1">
      <p class="TipInTable">For backward compatibility, legacy bundles (extension uno.pkg, .zip) that have been formerly deployed using <span class="wwwftpemail">pkgchk</span> are deployable, too. Migrate legacy bundles to the current <span class="Codeintext">.oxt</span> format. This can easily be done using the GUI, exporting a legacy bundle as .an <span class="Codeintext">.oxt</span> file. When a legacy bundle is exported, a <span class="Codeintext">manifest.xml</span> file is generated, enumerating the detected items of the bundle.</p>
     </td></tr></table></div>
  <p class="P6">Depending on the media-type the respective file needs to be treated particularly. For example a UNO component needs to be registered before it can be used. All media types which does not require a particular handling of the file are ignored currently (and actually need not be contained in the manifest.xml).Â </p>
  <p class="P6">It follows a description of possible extension items and their media-types:Â </p>
  <p class="TitledListHead">Shared Library UNO Components</p>
  <p class="TitledListBody">The media-type for a shared library UNO component is âapplication/vnd.sun.star.uno-component;type=nativeâ, <span class="T3">for example,</span></p>
  <p class="Code">&lt;manifest:file-entry manifest:media-type="application/vnd.sun.star.uno-component;type=native"<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  manifest:full-path="myComponent.uno.so"/&gt;</p>
  <p class="Code"><br /></p>
  <p class="TitledListHead">Shared Library UNO Components for particular PlatformsÂ </p>
  <p class="TitledListBody">When you implement a UNO native component, <span class="T3">for example,</span> a <span class="Codeintext">.dll</span> or <span class="Codeintext">.so</span> file, then this file is only deployable on that specific platform. It is often convenient to package a bundle for different platforms. For instance, you compile your component for x86 Linux, Solaris SPARC and Windows. You have to tell the Extension Manager which version of your component file corresponds to which platform via a platform attribute supplied with the media-type, <span class="T3">for example,</span></p>
  <p class="Code">&lt;manifest:file-entry manifest:media-type=<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "application/vnd.sun.star.uno-component;type=native;platform=Windows"</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â manifest:full-path="windows/mycomp.uno.dll"/&gt;</p>
  <p class="Code">&lt;manifest:file-entry manifest:media-type=<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "application/vnd.sun.star.uno-component;type=native;platform=Linux_x86"</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â manifest:full-path="linux/myComp.uno.so"/&gt;</p>
  <p class="Code">&lt;manifest:file-entry manifest:media-type=<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "application/vnd.sun.star.uno-component;type=native;platform=Solaris_SPARC"</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â manifest:full-path="solsparc/myComp.uno.so"/&gt;<br /></p>
  <p class="TitledListHead">RDB Type LibraryÂ </p>
  <p class="TitledListBody">The media-type for a UNO RDB type library is âapplication/vnd.sun.star.uno-typelibrary;type=RDBâ, <span class="T3">for example,</span></p>
  <p class="Code">&lt;manifest:file-entry manifest:media-type="application/vnd.sun.star.uno-typelibrary;type=RDB"<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  manifest:full-path="myTypes.uno.rdb"/&gt;</p>
  <p class="TitledListHead">Jar Type LibraryÂ </p>
  <p class="TitledListBody">The media-type for a UNO Jar typelibrary is âapplication/vnd.sun.star.uno-typelibrary;type=Javaâ, <span class="T3">for example,</span></p>
  <p class="Code">&lt;manifest:file-entry manifest:media-type="application/vnd.sun.star.uno-typelibrary;type=Java"<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  manifest:full-path="myTypes.uno.jar"/&gt;</p>
  <p class="Code">Â </p>
  <p class="TitledListBody">Keep in mind that the RDB variant of that type library must be deployed also. This is currently necessary, because your Java UNO types may be referenced from native UNO code.Â </p>
  <p class="TitledListHead">Uno Jar Components</p>
  <p class="TitledListBody">The media-type for a UNO Jar component is âapplication/vnd.sun.star.uno-component;type=Javaâ, <span class="T3">for example,</span></p>
  <p class="Code">&lt;manifest:file-entry manifest:media-type="application/vnd.sun.star.uno-component;type=Java"<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  manifest:full-path="myComponent.uno.jar"/&gt;</p>
  <p class="Code">Â </p>
  <p class="TitledListHead">UNO Python Components</p>
  <p class="TitledListBody"><span class="wwwftpemail">unopkg</span> now supports registration of Python components (<span class="wwwftpemail">.py</span> files). Those files are registered using the <span class="Codeintext">com.sun.star.loader.Python</span> loader. For details concerning Python-UNO, please refer to <a href="http://replay.waybackmachine.org/20080924043146/http://udk.openoffice.org/python/python-bridge.html"><span class="wwwftpemail">http://udk.openoffice.org/python/python-bridge.html</span></a><span class="wwwftpemail">.<br /></span><span class="T4">The media-type for a UNO Python component is âapplication/vnd.sun.star.uno-component;type=Pythonâ, </span><span class="T5">for example,</span></p>
  <p class="Code">&lt;manifest:file-entry manifest:media-type="application/vnd.sun.star.uno-component;type=Python"<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  manifest:full-path="myComponent.uno.py"/&gt;</p>
  <p class="TitledListBody"><span class="wwwftpemail" /></p>
  <p class="TitledListHead">OpenOffice.org Basic Libraries</p>
  <p class="TitledListBody">OpenOffice.org Basic libraries are linked to the basic library container files. Refer to <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/BasicAndDialogs/BasicAndDialogs.xhtml#1_OpenOffice.org_Basic_and_Dialogs" title="see chapter 12 OpenOffice.org Basic and Dialogs">12 OpenOffice.org Basic and Dialogs</a></span> for additional information.<br />The media-type for a OpenOffice.org Basic Library is âapplication/vnd.sun.star.basic-libraryâ, <span class="T3">for example,</span></p>
  <p class="Code">&lt;manifest:file-entry manifest:media-type="application/vnd.sun.star.basic-library"<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  manifest:full-path="myBasicLib/"/&gt;</p>
  <p class="TitledListHead">Dialog Libraries</p>
  <p class="TitledListBody">Dialog libraries are linked to the basic dialog library container files. Refer to <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/BasicAndDialogs/BasicAndDialogs.xhtml#1_OpenOffice.org_Basic_and_Dialogs" title="see chapter 12 OpenOffice.org Basic and Dialogs">12 OpenOffice.org Basic and Dialogs</a></span> for additional information.<br />The media-type for a dialog library is âapplication/vnd.sun.star.dialog-libraryâ, <span class="T3">for example,</span></p>
  <p class="Code">&lt;manifest:file-entry manifest:media-type="application/vnd.sun.star.dialog-library"<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  manifest:full-path="myDialog/"/&gt;</p>
  <p class="TitledListHead">Configuration Data Files</p>
  <p class="TitledListBody">The media-type for a configuration data file is âapplication/vnd.sun.star.configuration-dataâ, <span class="T3">for example,</span></p>
  <p class="Code">&lt;manifest:file-entry manifest:media-type="application/vnd.sun.star.configuration-data"<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  manifest:full-path="myData.xcu"/&gt;</p>
  <p class="TitledListHead">Configuration Schema Files</p>
  <p class="TitledListBody">The media-type for a configuration schema file is âapplication/vnd.sun.star.configuration-schemaâ, <span class="T3">for example,</span></p>
  <p class="Code">&lt;manifest:file-entry manifest:media-type="application/vnd.sun.star.configuration-schema"<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  manifest:full-path="mySchema.xcs"/&gt;</p>
  <p class="TitledListBody">Be careful not to install schemata (.xcs files) which contain the same elements Â (<span class="Codeintext">oor:package</span>, <span class="Codeintext">oor:name</span>) but have different definitions.</p>
  <p class="TitledListHead">Extension Tooltip DescriptionÂ </p>
  <p class="TitledListBody">If you want to add a Â tooltip description (which shows up in the balloon help of a bundle node in the Extension Manager dialog), then you can do so by specifying localized UTF-8 files, <span class="T3">for example,</span><br /></p>
  <p class="Code">&lt;manifest:file-entry manifest:media-type="application/vnd.sun.star.package-bundle-description;locale=en"<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  manifest:full-path="readme.en" /&gt;<br />&lt;manifest:file-entry manifest:media-type="application/vnd.sun.star.package-bundle-description;locale=de"<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  manifest:full-path="readme.de" /&gt;<br />manifest:media-type="application/vnd.sun.star.package-bundle-description"<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  manifest:full-path="readme.txt" /&gt;</p>
  <p class="TitledListBody"><br />The best matching locale (against the current installation's locale) is taken. The locale is of the form "locale=language-country-variant".</p>
  <p class="Paragraph">All other contents of the extension are simply copied into the Extension Manager cache. You can, for instance, deploy an image for add-on menus within a package, or any other file needed by your component. The OpenOffice.org configuration is used to find out in which path this file is located in a particular installation.<br />When you define a package containing additional files, include an <span class="wwwftpemail">.xcu</span> configuration data file, which points to your files. Use a variable <span class="Codeintext">%origin%</span> as a placeholder for the exact path where the file will be copied by the Extension Manager. When <span class="wwwftpemail">unopkg</span> installs the data, it replaces the path with anURL containg a macro an writes into the configuration. This URL has to be expanded before it is a valid file URL. This can be done using the <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/common/ref/com/sun/star/util/MacroExpander.html" title="see type com.sun.star.util.MacroExpander">com.sun.star.util.MacroExpander</a> service. The <span class="Codeintext">%origin%</span> variable is, for instance, used by the <span class="Codeintext">ImageIdentifier</span> property of add-on menus and toolbar items, which is described in the <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_7_3_3_Configuration" title="see chapter 4.7.3 Writing UNO Components - Integrating Components into OpenOffice.org - User Interface Add-Ons - Configuration">4.7.3 Writing UNO Components - Integrating Components into OpenOffice.org - User Interface Add-Ons - Configuration</a></span> section.</p>
  <h2 class="Head2"><a name="1_3_Extension_Identifiers" />5.3Â Â Extension Identifiers</h2>
  <p class="Paragraph">Extensions now have unique identifiers. This removes the previous restriction that no two extensions with identical file names can be deployed.Â </p>
  <p class="Paragraph">Technically, an extension identifier is a finite sequence of Unicode scalar values. Identifier identity is element-by-element identity of the sequences (no case folding, no normalization, etc.). It is assumed that extension writers cooperate to keep extension identifiers unique. By convention, use lowercase reversed-domain-name syntax (e.g., â<span class="Codeintext">org.openoffice.</span>â) prefixes to generate unique (but still humanly comprehensible) identifiers. When you write an extension, use the reversed domain name of a site you controll (and <span class="Emphasis">not</span> â<span class="Codeintext">org.openoffice.</span>â) as prefix. Identifiers starting with the prefix â<span class="Codeintext">org.openoffice.legacy.</span>â are reserved for legacy extensions (see next).</p>
  <p class="Paragraph">The extension identifier is obtained from the description.xml contained in the extension. If the extension does not specify such an explicit identifier, then an implict identifier is generated by prepending â<span class="Codeintext">org.openoffice.legacy.</span>â to the (obvious sequence of Unicode scalar values representing the) file name of the extension. (Uniqueness of identifiers is then guaranteed by the assumption underlying legacy extension management that no two legacy extensions have the same file name.)</p>
  <h2 class="Head2"><a name="1_4_Extension_Versions" />5.4Â Â Extension Versions</h2>
  <p class="Paragraph">Extensions are often improved over time. That is, publishers want to ship new versions of the same extension with added functionality and/or bug fixes. Adding extension versions allows publishers to ship new versions, and allows [PRODCUTNAME] to detect and handle the case that an extension installed by the user is an update of an existing extension.Â </p>
  <p class="Paragraph">Technically, an extension versionÂ <span class="Variable">v</span> is defined as an infinite sequence of non-negative integers <span class="Variable">v</span> = â¹<span class="Variable">v</span><span class="T6">0</span>, <span class="Variable">v</span><span class="T6">1</span>, ...âº where all but a finite number of elements have the value zero. A total order is defined on versions via lexicographical comparison. A textual representation of a version <span class="Variable">v</span> = â¹<span class="Variable">v</span><span class="T6">0</span>, <span class="Variable">v</span><span class="T6">1</span>, ...âº is a finite string built from the BNF</p>
  <p class="Code"><span class="Variable">version</span> ::= [<span class="Variable">element</span> (â.â <span class="Variable">element</span>)*]</p>
  <p class="Code"><span class="Variable">element</span> ::= (â0â | â1â | â2â | â3â | â4â | â5â | â6â | â7â | â8â | â9â)+</p>
  <p class="Paragraph">of <span class="Variable">n</span> â¥ 0 elements where each element is a decimal representation of <span class="Variable">v</span><span class="T7">i</span> for 0 â¤ <span class="Variable">i</span> &lt;Â <span class="Variable">n</span>, and each <span class="Variable">v</span><span class="T7">i</span> = 0 for <span class="Variable">i</span> â¥Â <span class="Variable">n</span>.</p>
  <p class="Paragraph">The extension version is obtained from the description.xml contained in the extension. If the extension does not specify such an explicit version, then an implict textual version representation of the empty string (representing a version of all zeroes) is assumed.Â </p>
  <p class="Paragraph">No general semantics are prescribed to versions, other than the total order which determines whether one version is less than, equal to, or greater than another version, respectively. However, extension publishers are encouraged to use the widely accepted three-level scheme of major (incompatible changes), minor (compatible changes), micro (bug fixes) where applicable.Â </p>
  <h2 class="Head2"><a name="1_5_description.xml" />5.5Â Â <a name="desc.xml" />description.xml</h2>
  <p class="Paragraph">The description.xml is a means to provide additional useful information, such as dependencies, license and update information. It will be extended to support new features in the future. The file must be located in the root of the extension and the name is case sensitive.Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table15"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table15A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./5 Extensions_files/important.gif" class="fr2" /></div>
     </td><td style="text-align:left;width:15.529cm; " class="Table15B1">
      <p class="P8">The description.xml is searched case sensitive in an <span class="T8">oxt</span> package. This is important to know when you package your extensions content into a new <span class="T8">oxt</span> package. </p>
     </td></tr></table></div>
  <h3 class="Head3"><a name="1_5_1_Description_of_XML_Elements" />5.5.1Â Â Description of XML Elements</h3>
  <p class="DescriptionElement"><a name="description" />Element &lt;description&gt;</p>
  <p class="Paragraph">XPath: /descriptionÂ </p>
  <p class="Paragraph">Parent element: Â document root</p>
  <p class="Paragraph">Child elements:Â </p>
  <p class="Paragraph">&lt;registration&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#description_registration">8</a>)</p>
  <p class="Paragraph">&lt;dependencies&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#description_dependencies">9</a>)</p>
  <p class="Paragraph">&lt;update-information&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#des_update_information">9</a>)</p>
  <p class="Paragraph">&lt;description&gt; is the root element of the description.xml.Â </p>
  <p class="P9">Â </p>
  <p class="P9">Table <a name="refTable0">1</a> Attributes of &lt;description&gt;</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table3"><colgroup><col width="115" /><col width="590" /></colgroup><tr><td style="text-align:left;width:2.521cm; " class="Table3A1">
      <p class="TableHead">AttributeÂ </p>
     </td><td style="text-align:left;width:12.913cm; " class="Table3B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:2.521cm; " class="Table3A2">
     <p class="TextInTable">xmlnsÂ </p>
    </td><td style="text-align:left;width:12.913cm; " class="Table3B2">
     <p class="TextInTable">The default namespace of element description and all children must be defined asÂ </p>
     <p class="TextInTable">"<a href="http://replay.waybackmachine.org/20080924043146/http://openoffice.org/extensions/description/2006">http://openoffice.org/extensions/description/2006</a>"</p>
    </td></tr><tr><td style="text-align:left;width:2.521cm; " class="Table3A2">
     <p class="TextInTable">xmlns:depÂ </p>
    </td><td style="text-align:left;width:12.913cm; " class="Table3B2">
     <p class="TextInTable">The namespace for dependency information must also be defined asÂ </p>
     <p class="TextInTable">"<a href="http://replay.waybackmachine.org/20080924043146/http://openoffice.org/extensions/description/2006">http://openoffice.org/extensions/description/2006</a>"</p>
    </td></tr><tr><td style="text-align:left;width:2.521cm; " class="Table3A2">
     <p class="TextInTable">xmlns:xlink</p>
     <p class="TextInTable">Â </p>
    </td><td style="text-align:left;width:12.913cm; " class="Table3B2">
     <p class="P10">The xlink namespace must be defined as </p>
     <p class="TextInTable">"http://www.w3.org/1999/xlink"Â </p>
    </td></tr><tr><td style="text-align:left;width:2.521cm; " class="Table3A2">
     <p class="TextInTable">other namespace definitionsÂ </p>
    </td><td style="text-align:left;width:12.913cm; " class="Table3B2">
     <p class="TextInTable">Other namespaces can be added as necessaryÂ </p>
    </td></tr></table></div>
  <p class="DescriptionElement">Element &lt;identifier&gt;Â </p>
  <p class="Paragraph">XPath: /description/identiferÂ </p>
  <p class="Paragraph">Parent: &lt;description&gt; (pageÂ <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#description">7</a>)</p>
  <p class="Paragraph">Child elements: noneÂ </p>
  <p class="Paragraph">Â </p>
  <p class="P9">Table <a name="refTable1">2</a> Attributes of &lt;identifier&gt;</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table9"><colgroup><col width="158" /><col width="548" /></colgroup><tr><td style="text-align:left;width:3.466cm; " class="Table9A1">
      <p class="TableHead">AttributeÂ </p>
     </td><td style="text-align:left;width:12.003cm; " class="Table9B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:3.466cm; " class="Table9A2">
     <p class="TextInTable">valueÂ </p>
    </td><td style="text-align:left;width:12.003cm; " class="Table9B2">
     <p class="TextInTable">Required. The extension identifier.Â </p>
    </td></tr></table></div>
  <p class="DescriptionElement">Element &lt;version&gt;Â </p>
  <p class="Paragraph">XPath: /description/versionÂ </p>
  <p class="Paragraph">Parent: &lt;description&gt; (pageÂ <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#description">7</a>)</p>
  <p class="Paragraph">Child elements: noneÂ </p>
  <p class="Paragraph">Â </p>
  <p class="P9">Table <a name="refTable2">3</a> Attributes of &lt;version&gt;</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table14"><colgroup><col width="158" /><col width="548" /></colgroup><tr><td style="text-align:left;width:3.466cm; " class="Table14A1">
      <p class="TableHead">AttributeÂ </p>
     </td><td style="text-align:left;width:12.003cm; " class="Table14B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:3.466cm; " class="Table14A2">
     <p class="TextInTable">valueÂ </p>
    </td><td style="text-align:left;width:12.003cm; " class="Table14B2">
     <p class="TextInTable">Required. A textual representation of the extension version.Â </p>
    </td></tr></table></div>
  <p class="DescriptionElement"><a name="description_registration" />Element &lt;registration&gt; </p>
  <p class="Paragraph">XPath: /description/registration Â </p>
  <p class="Paragraph">Parent: &lt;description&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#description">7</a>)</p>
  <p class="Paragraph">Child elements:Â </p>
  <p class="Paragraph">&lt;simple-license&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#reg_simple-license">9</a>)</p>
  <p class="Paragraph">Â </p>
  <p class="Paragraph">The registration element currently only contains the Â &lt;simple-license&gt; element. If the &lt;registration&gt; element exists, then it must have a child element. For more information about using licenses see chapter Â <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#Simple_License">5.6</a>.</p>
  <p class="DescriptionElement"><a name="description_dependencies" />Element &lt;dependencies&gt;</p>
  <p class="Paragraph">XPath: /description/dependenciesÂ </p>
  <p class="Paragraph">Parent: &lt;description&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#description">7</a>)</p>
  <p class="Paragraph">Child elements:Â </p>
  <p class="Paragraph">&lt;OpenOffice.org-minimal-version&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#dep_dependency">10</a>)</p>
  <p class="Paragraph">othersÂ </p>
  <p class="DescriptionElement"><a name="des_update_information" />Element &lt;update-information&gt;</p>
  <p class="Paragraph">XPath: /description/update-informationÂ </p>
  <p class="Paragraph">Parent: &lt;description&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#description">7</a>)</p>
  <p class="Paragraph">Child elements:Â </p>
  <p class="Paragraph">&lt;src&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#upd_src">10</a>)</p>
  <p class="Paragraph">Â </p>
  <p class="Paragraph">&lt;update-information&gt; must have one or more &lt;src&gt; Â children. The second, third, etc. element are regarded as fallback, that is, the elements provide URLs to mirrors. Â The Extension Manager will try to get <span class="Emphasis">update information</span> by using a URL and only use a different URL if an error occurred. That is, if for example the first URL references an atom feed that does not contain any references at all, but is a valid feed, then the Extension Manager assumes that there are no update information available. Then URLs from other &lt;src&gt; elements are not examined. Therefore the <span class="Emphasis">update information</span> referenced by every URL must be identical. Â For more information about online updates of extensions see chapter <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#online_update_of_extensions">5.9</a>.</p>
  <p class="Paragraph">Â </p>
  <p class="DescriptionElement"><a name="reg_simple-license" />Element &lt;simple-license&gt;</p>
  <p class="Paragraph">XPath: /description/registration/simple-licenseÂ </p>
  <p class="Paragraph">Parent: &lt;registration&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#description_registration">8</a>)</p>
  <p class="Paragraph">Child elements:Â </p>
  <p class="Paragraph">&lt;license-text&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#sim_license-text">11</a>)</p>
  <p class="Paragraph">Â </p>
  <p class="Paragraph">The element contains the &lt;license-text&gt; elements, determines if all user must agree to the license, or just the person who installs it, and determines a default &lt;license-text&gt; element .Â </p>
  <p class="Paragraph">If the <span class="Codeintext">&lt;simple-license&gt;</span> element exists, then it must have at least one child element.</p>
  <p class="Paragraph">Â </p>
  <p class="P9">Table <a name="refTable3">4</a> Attributes of &lt;simple-license&gt;</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table1"><colgroup><col width="158" /><col width="548" /></colgroup><tr><td style="text-align:left;width:3.466cm; " class="Table1A1">
      <p class="TableHead">AttributeÂ </p>
     </td><td style="text-align:left;width:12.003cm; " class="Table1B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:3.466cm; " class="Table1A2">
     <p class="TextInTable">accept-byÂ </p>
    </td><td style="text-align:left;width:12.003cm; " class="Table1B2">
     <p class="TextInTable">Required.Value is either â<span class="Codeintext">user</span>â or â<span class="Codeintext">admin</span>â. â<span class="Codeintext">user</span>â means that every user has to agree to the license. That is, the extension can only be installed as <span class="Emphasis">user</span> <span class="Emphasis">extension</span> but not as <span class="Emphasis">shared</span> <span class="Emphasis">extension</span>. If it has the value â<span class="Codeintext">admin</span>â then it can be deployed as <span class="Emphasis">shared</span> <span class="Emphasis">extension</span> as well. In that case only the person who installs it has to agree to the license. Individual users will not be asked to accept the license. They can use the extension right away. In case the value is â<span class="Codeintext">user</span>â and the extension is being installed as user extension then the user must always agree to the license.</p>
    </td></tr><tr><td style="text-align:left;width:3.466cm; " class="Table1A3">
     <p class="TextInTable">default-license-idÂ </p>
    </td><td style="text-align:left;width:12.003cm; " class="Table1B2">
     <p class="TextInTable">Required. Determines what <span class="Codeintext">&lt;license-text&gt;</span> is used if no <span class="Codeintext">&lt;license-text&gt;</span> element has a <span class="Codeintext">lang</span> attribute whoose value matches the locals of OOo. There must always be exactly one <span class="Codeintext">&lt;license-text&gt;</span> element whith a <span class="Codeintext">license-id</span> attribute whoose value matches that of the <span class="Codeintext">default-license-id</span>. The type is xsd:IDREF</p>
    </td></tr><tr><td style="text-align:left;width:3.466cm; " class="Table1A3">
     <p class="TextInTable">suppress-on-updateÂ </p>
    </td><td style="text-align:left;width:12.003cm; " class="Table1B2">
     <p class="TextInTable">Optional. Â When the attribute is not provided then the value âfalseâ is assumed. The value true indicates that the license for this extension will not be displayed during installation when the same extension (same id but probably different version) is already installed. This applies for the automatic update as well as for manually installing an extension. The version of the already installed extension does not matter. Â Suppressing the license can be useful during the online update, because otherwise the update operation could be interrupted by many license dialogs.</p>
    </td></tr></table></div>
  <p class="DescriptionElement"><a name="dep_dependency" />Element &lt;OpenOffice.org-minimal-version&gt;</p>
  <p class="Paragraph">XPath: /description/dependencies/OpenOffice.org-minimal-versionÂ </p>
  <p class="Paragraph">Parent: &lt;dependencies&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#description_dependencies">9</a>)</p>
  <p class="Paragraph">Child elements: noneÂ </p>
  <p class="Paragraph">Â </p>
  <p class="P9">Table <a name="refTable4">5</a> Attributes of &lt;OpenOffice.org-minimal-version&gt;</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table6"><colgroup><col width="252" /><col width="454" /></colgroup><tr><td style="text-align:left;width:5.523cm; " class="Table6A1">
      <p class="TableHead">AttributeÂ </p>
     </td><td style="text-align:left;width:9.947cm; " class="Table6B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:5.523cm; " class="Table6A2">
     <p class="TextInTable">xmlns:depÂ </p>
    </td><td style="text-align:left;width:9.947cm; " class="Table6B2">
     <p class="TextInTable">The namespace for dependency information (inherited from &lt;description&gt;, see page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#description">7</a>) must be defined as</p>
     <p class="TextInTable">"<a href="http://replay.waybackmachine.org/20080924043146/http://openoffice.org/extensions/description/2006">http://openoffice.org/extensions/description/2006</a>"</p>
    </td></tr><tr><td style="text-align:left;width:5.523cm; " class="Table6A2">
     <p class="TextInTable">dep:nameÂ </p>
    </td><td style="text-align:left;width:9.947cm; " class="Table6B2">
     <p class="TextInTable">Required. The string â<span class="Codeintext">OpenOffice.org </span><span class="Codeintext"><span class="Variable">value</span></span>â (where <span class="Variable">value</span> is the value of the attribute <span class="Codeintext">value</span>).</p>
    </td></tr><tr><td style="text-align:left;width:5.523cm; " class="Table6A2">
     <p class="TextInTable">dep:OpenOffice.org-minimal-versionÂ </p>
    </td><td style="text-align:left;width:9.947cm; " class="Table6B2">
     <p class="TextInTable">Optional. This attribute should never be used with this element.Â </p>
    </td></tr><tr><td style="text-align:left;width:5.523cm; " class="Table6A2">
     <p class="TextInTable">valueÂ </p>
    </td><td style="text-align:left;width:9.947cm; " class="Table6B2">
     <p class="TextInTable">Required. The required underlying OpenOffice.org version (â<span class="Codeintext">2.1</span>â, â<span class="Codeintext">2.2</span>â, etc.), starting with OpenOffice.orgÂ 2.1.</p>
    </td></tr></table></div>
  <p class="DescriptionElement"><a name="upd_src" />Element &lt;src&gt;</p>
  <p class="Paragraph">XPath: /description/update-information/srcÂ </p>
  <p class="Paragraph">Parent: &lt;update-information&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#des_update_information">9</a>)</p>
  <p class="Paragraph">Child elements: noneÂ </p>
  <p class="P9">Table <a name="refTable5">6</a> Attributes of &lt;src&gt;</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table7"><colgroup><col width="115" /><col width="590" /></colgroup><tr><td style="text-align:left;width:2.521cm; " class="Table7A1">
      <p class="TableHead">AttributeÂ </p>
     </td><td style="text-align:left;width:12.913cm; " class="Table7B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:2.521cm; " class="Table7A2">
     <p class="TextInTable">xlink:hrefÂ </p>
    </td><td style="text-align:left;width:12.913cm; " class="Table7B2">
     <p class="TextInTable">Required. The value is a URL which provides the update information directly or an atom feed which in turn references the update information. Â The URL can point directly to a file or it may invoke code, such as a servlet, cgi, etc, that returns the atom feed or the update information. </p>
    </td></tr></table></div>
  <p class="Paragraph">Â </p>
  <p class="DescriptionElement"><a name="sim_license-text" />Element &lt;license-text&gt;</p>
  <p class="Paragraph">XPath: /description/registration/simple-license/license-textÂ </p>
  <p class="Paragraph">Parent: &lt;simple-license&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#reg_simple-license">9</a>)</p>
  <p class="Paragraph">Child elements: noneÂ </p>
  <p class="Paragraph">Â </p>
  <p class="Paragraph">The element contains information about where to find the file containing the license text, which language it uses, and if this element is the âdefaultâ <span class="Codeintext">&lt;license-text&gt;</span></p>
  <p class="Paragraph">Â </p>
  <p class="P9">Table <a name="refTable6">7</a> Attributes of &lt;license-text&gt;</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table2"><colgroup><col width="115" /><col width="590" /></colgroup><tr><td style="text-align:left;width:2.521cm; " class="Table2A1">
      <p class="TableHead">AttributeÂ </p>
     </td><td style="text-align:left;width:12.913cm; " class="Table2B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:2.521cm; " class="Table2A2">
     <p class="TextInTable">xlink:hrefÂ </p>
    </td><td style="text-align:left;width:12.913cm; " class="Table2B2">
     <p class="TextInTable">Required. The value is a relative URL to the file which contains the license text. The base URL is the URL of the root directory of the extension. That is, if the extension has been unzipped, then the resulting directory is the root directory.Â </p>
    </td></tr><tr><td style="text-align:left;width:2.521cm; " class="Table2A2">
     <p class="TextInTable">langÂ </p>
    </td><td style="text-align:left;width:12.913cm; " class="Table2B2">
     <p class="TextInTable">Required. A language identifier according to RFC 3066.<span class="T9"> Values can be for example: en, en-US, en-US-variant, etc. Currently OOo does not make use of variants.</span></p>
    </td></tr><tr><td style="text-align:left;width:2.521cm; " class="Table2A2">
     <p class="TextInTable">license-idÂ </p>
    </td><td style="text-align:left;width:12.913cm; " class="Table2B2">
     <p class="TextInTable">Optional. However one license-text element must have this attribute and the value must match the value of the <span class="SourceText">default-license-id</span> attribute of the &lt;<span class="SourceText">simple-license&gt;</span> element. The type is xsd:ID.</p>
    </td></tr></table></div>
  <h3 class="Head3"><a name="1_5_2_Example" />5.5.2Â Â Example</h3>
  <p class="Code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</p>
  <p class="Code">&lt;description xmlns="http://openoffice.org/extensions/description/2006" xmlns:d="http://openoffice.org/extensions/description/2006"Â </p>
  <p class="Code">Â  Â  xmlns:xlink="http://www.w3.org/1999/xlink"&gt;</p>
  <p class="Code">Â  Â  &lt;version value="1.0" /&gt; Â  Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  &lt;dependencies&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â &lt;OpenOffice.org-minimal-version value="2.2" d:name="OpenOffice.org 2.2"/&gt;</p>
  <p class="Code">Â  Â  &lt;/dependencies&gt;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  &lt;update-information&gt;</p>
  <p class="Code">Â  Â  Â  &lt;src xlink:href="http://extensions.openoffice.org/testarea/desktop/license/update/lic3.update.xml" /&gt;</p>
  <p class="Code">Â  Â  &lt;/update-information&gt;</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  &lt;registration&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;simple-license Â accept-by="admin" default-license-id="en-NZ" suppress-on-update="true" &gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;license-text xlink:href="registration/license_de-DE.txt" lang="de-DE" /&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;license-text xlink:href="registration/license_en-GB.txt" lang="en-GB" /&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;license-text xlink:href="registration/license_en-NZ.txt" lang="en-NZ" license-id="en-NZ" /&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;license-text xlink:href="registration/license_en-US.txt" lang="en-US" /&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/simple-license&gt;</p>
  <p class="Code">Â  Â  &lt;/registration&gt;</p>
  <p class="Code">&lt;/description&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â </p>
  <p class="Paragraph">This description.xml contains these information:Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P11" style="margin-left:2.5cm;"><p class="P11" style="margin-left:0cm;">The version is 1.0.Â </p></li>
   <li class="P11" style="margin-left:2.5cm;"><p class="P11" style="margin-left:0cm;">It only works with OpenOffice.org 2.2 and better.Â </p></li>
   <li class="P11" style="margin-left:2.5cm;"><p class="P11" style="margin-left:0cm;">It supports the update feature and <span class="Emphasis">update information</span> can be obtained at the specified address.</p></li>
   <li class="P11" style="margin-left:2.5cm;"><p class="P11" style="margin-left:0cm;">When this extension is installed as shared extension then a license text is being displayed. Different localizations of the license text are available.Â </p></li>
  </ul>
  <h2 class="Head2"><a name="1_6_Simple_License" />5.6Â Â <a name="Simple_License" />Simple License</h2>
  <p class="Paragraph">This feature is about displaying a license text to the user during installation. The user can agree or decline the license, where in the latter case the installation will be aborted. Â It is called âSimple Licenseâ because there is no tamper resistant mechanism that prevents the installation in case the user does not agree to the license. It also does not do anything more than just displaying a license text. However it provides a way to use localized licenses. More on that later. </p>
  <p class="Paragraph">The license text is displayed either in a dialog or in the console dependent on the way the package manager was started. When it was started by the tools-&gt;Package Manager menu item or by invoking unopkg gui in the console then a dialog is used. By using <span class="Codeintext">unopkg add</span> the license text will be displayed in the console and user input has to be done through the same.</p>
  <p class="Paragraph">The license dialog or the license text in the console is displayed when the extension is being installed. Currently there are two modes to install extensions, <span class="Emphasis">user mode</span> and <span class="Emphasis">shared mode</span>. An extension that was installed in <span class="Emphasis">user mode</span> (let's call it a <span class="Emphasis">user extension</span>) can only be used by just that person who installed it. If the extension was installed in <span class="Emphasis">shared mode</span> (let's call it a <span class="Emphasis">shared extension</span>), then it can be used by all users. Â Since the license text is only displayed during installation, all users who are using a <span class="Emphasis">shared extension </span>will not see any license text (except the user who installed this shared extension). However, the publisher of the extension may think it necessary that everyone who wants to use it has to agree to the license first. For this purpose, he can mark the extension accordingly. This extension can then only be installed in <span class="Emphasis">user mode</span> and <span class="Emphasis">not</span> in <span class="Emphasis">shared mode</span>. Likewise the extension can be marked indicating that only the person who installs it needs to agree to the license. Such an extension can be installed in both modes. Â But when installing in <span class="Emphasis">user mode</span> then every user has to agree to the license nonetheless.</p>
  <p class="Paragraph">Here is an example of the description.xml:Â </p>
  <p class="Code"><span class="T10">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></p>
  <p class="Code"><span class="T10">&lt;description xmlns="http://openoffice.org/extensions/description/2006"</span></p>
  <p class="Code"><span class="T10">Â  Â  xmlns:xlink="http://www.w3.org/1999/xlink"&gt;</span></p>
  <p class="Code"><span class="T10">Â  Â  &lt;registration&gt;</span></p>
  <p class="Code"><span class="T10">Â  Â  Â  Â  &lt;simple-license Â accept-by="user" default-license-id="de"&gt;</span></p>
  <p class="Code"><span class="T10">Â  Â  Â  Â  Â  Â  &lt;license-text xlink:href="registration/license_de.txt" lang="de" license-id="de" /&gt;</span></p>
  <p class="Code"><span class="T10">Â  Â  Â  Â  Â  Â  &lt;license-text xlink:href="registration/license_en_US.txt" lang="en-US" /&gt;</span></p>
  <p class="Code"><span class="T10">Â  Â  Â  Â  &lt;/simple-license&gt;</span></p>
  <p class="Code"><span class="T10">Â  Â  &lt;/registration&gt;</span></p>
  <p class="Code"><span class="T10">&lt;/description&gt;</span></p>
  <p class="Code">Â </p>
  <p class="Paragraph">Â </p>
  <p class="Paragraph">In this example, the license would have to be agreed to by all users (that means no <span class="Codeintext">shared mode</span> installation). This is indicated by the value â<span class="Codeintext">user</span>â of the attribute accept-by in the &lt;simple-license&gt; element. The attribute could also have the value â<span class="Codeintext">admin</span>â, which would indicate that the license needs only be agreed to by the person who installs it.</p>
  <p class="Paragraph">The <span class="Codeintext">&lt;license-text&gt;</span> elements contain information about the files which contain the text that is displayed. The content of these files must be UTF-8 encoded. It is displayed exactly as it is in the file. That is, no formatting occurs. There can be one to many <span class="Codeintext">&lt;license-text&gt;</span> elements, where each element provides information about a different language of the license text. The attribute <span class="Codeintext">xlink:href</span> contains a relative URL (relative to the root directory of the extension) which points to a file which countains the license text in exacty one language. Which language is indicated by <span class="Codeintext">lang</span> attribute.</p>
  <p class="Paragraph">If the package manager does not find a <span class="Codeintext">&lt;license-text&gt;</span> element which matches the locale of OOo then it will pick the <span class="Codeintext">&lt;license-text&gt;</span> that is marked as the default language. This mark is expressed by the <span class="Codeintext">license-id</span> attribute of <span class="Codeintext">&lt;license-text&gt;</span> and the <span class="Codeintext">default-license-id</span> attribute of the <span class="Codeintext">&lt;simple-license&gt;</span> element. There must always be exactly one <span class="Codeintext">&lt;license-text&gt;</span> whose attribute value is the same as that from <span class="Codeintext">&lt;simple-license&gt;</span>. This <span class="Codeintext">&lt;license-text&gt;</span> element is then used as the default.</p>
  <h3 class="Head3"><a name="1_6_1_Determining_the_Locale_of_the_License" />5.6.1Â Â Determining the Locale of the License</h3>
  <p class="Paragraph">The locale used by OOo and the license text files is expressed by a language string according to RFC 3066. This string contains the language and can optionally contain a country and further information. Â Let's assume that the office uses britisch english (en-GB) end the extension has two license text files, one in german (de), which is also the default, and the other in english from New Zealand (en-NZ). Obviously there is no perfekt match, since en-GB is not en-NZ. But we would not want to use the default yet, because en-NZ is most probably closer to en-GB as german. Therefore we use an algorithm that tries to find a âclose matchâ of the local before it resorts to the default. Here is the algorithm:</p>
  <p class="Paragraph">In order to find the appropriate <span class="Codeintext">&lt;license-text&gt;</span> element, the values of <span class="Codeintext">lang</span> attribute are compared with the office's Locale. Both are represented as strings according to RFC3066. The comparison is done case sensitive.</p>
  <p class="Paragraph">Input to the algorithm:Â </p>
  <ul style="margin-left:1.25cm;">
   <li class="P12" style="margin-left:2.5cm;"><p class="P12" style="margin-left:0.25cm;">All <span class="SourceText">l</span><span class="SourceText"><span class="SourceText">i</span></span><span class="SourceText">cense-text</span> elements.</p></li>
   <li class="P12" style="margin-left:2.5cm;"><p class="P12" style="margin-left:0.25cm;">The locale of the officeÂ </p></li>
  </ul>
  <p class="Paragraph">Output of the algoritm:Â </p>
  <ul style="margin-left:1.25cm;">
   <li class="P13" style="margin-left:2.5cm;"><p class="P13" style="margin-left:0.25cm;">A l<span class="SourceText">icense-text</span> element</p></li>
  </ul>
  <p class="Paragraph">Algorithm:Â </p>
  <ol style="margin-left:1.25cm;list-style-type:decimal; ">
   <li class="P14" style="margin-left:2.5cm;"><p class="P14" style="margin-left:0.25cm;">The language, country and variant part of the <span class="T9">office's</span> locale are used to find a matching <span class="SourceText">license-text</span>. Â If there is an exact match then the respective <span class="SourceText">license-text </span>is selected as output and we are done. Only the first match is used.</p></li>
   <li class="P14" style="margin-left:2.5cm;"><p class="P14" style="margin-left:0.25cm;">The language and country part of the office's locale are used to find a matching <span class="SourceText">license-text</span>. If there is an exact match then the respective <span class="SourceText">license-text</span> is selected as output and we are done.</p></li>
   <li class="P14" style="margin-left:2.5cm;"><p class="P14" style="margin-left:0.25cm;">The language and country part of the office's locale are used to find a matching <span class="SourceText">license-text</span>. This time, we try to match only the language and country parts. For example, the office locale strings âen-USâ, âen-US-eastâ match the lang attribute with the values âen-US-northâ, âen-US-southâ,etc. The first l<span class="SourceText">icense-text</span> with a matching <span class="SourceText">lang</span> attribute is selected as output. If there is a match then we are done.</p></li>
   <li class="P14" style="margin-left:2.5cm;"><p class="P14" style="margin-left:0.25cm;">Only the language part of the office's locale is used to find a matching <span class="SourceText">license-text</span>. If there is an exact match then the respective <span class="SourceText">license-text</span> is selected as output and we are done. Only the first match is used.</p></li>
   <li class="P14" style="margin-left:2.5cm;"><p class="P14" style="margin-left:0.25cm;">Only the language part of the office's locale is used to find a matching <span class="SourceText">license-text</span>. This time, we try to match only the language part. For example, the office locale strings âenâ, âen-USâ, âen-US-eastâ match the lang attribute with the values âen-GBâ,âen-GB-northâ, etc. The first <span class="SourceText">license-text</span> with a matching <span class="SourceText">lang</span> attributed is selected as output. If there is a match then we are done.</p></li>
   <li class="P14" style="margin-left:2.5cm;"><p class="P14" style="margin-left:0.25cm;">The <span class="SourceText">license-text</span> element which is marked as âdefaultâ will be selected. That is, the value of the attribute <span class="SourceText">license-id</span> must match the <span class="SourceText">default-license-id</span> of the <span class="SourceText">simple-license</span> element.</p></li>
  </ol>
  <p class="Paragraph">The following example show what values would match.Â </p>
  <p class="P15">Example 1: Locale of OOo is <span class="T11">en-US</span> and the relevant part of the description.xml is:</p>
  <p class="Code">&lt;simple-license accept-by="user" default-license-id="en-US" &gt;Â </p>
  <p class="Code">Â  &lt;license-text xlink:href="lic_en-GB" lang="en-GB" Â /&gt;</p>
  <p class="Code">Â  &lt;license-text xlink:href="lic_en-US" lang=<span class="T11">"en-US"</span> license-id="en-US" /&gt;</p>
  <p class="Code">&lt;/simple-license&gt;Â </p>
  <p class="Paragraph">The &lt;license-text&gt; with lang=âen-USâ will be selected.Â </p>
  <p class="Paragraph">Example 2: Locale of OOo is <span class="T11">en-US</span> and the relevant part of the description.xml is:</p>
  <p class="Code">&lt;simple-license accept-by="user" default-license-id="en-NZ" &gt;Â </p>
  <p class="Code">Â  &lt;license-text xlink:href="lic_en-GB" lang=<span class="T11">"en-GB"</span> Â /&gt;</p>
  <p class="Code">Â  &lt;license-text xlink:href="lic_en-NZ" lang=<span class="T9">"en-NZ" </span>license-id="en-NZ" /&gt;</p>
  <p class="Code">&lt;/simple-license&gt;Â </p>
  <p class="Paragraph">The &lt;license-text&gt; with lang=âen-GBâ will be selected.Â </p>
  <p class="Paragraph">Example 3: Locale of OOo is <span class="T11">en-US</span> and the relevant part of the description.xml is:</p>
  <p class="Code">&lt;simple-license accept-by="user" default-license-id="en-NZ" &gt;Â </p>
  <p class="Code">Â  &lt;license-text xlink:href="lic_en" lang<span class="T9">=</span><span class="T11">"en"</span><span class="T9"> /</span>&gt;</p>
  <p class="Code">Â  &lt;license-text xlink:href="lic_en-GB" lang<span class="T9">="en-GB" Â /&gt;</span></p>
  <p class="Code"><span class="T9">Â  &lt;license-text xlink:href="lic_en-NZ" lang="en-NZ" l</span>icense-id="en-NZ" /&gt;</p>
  <p class="Code">&lt;/simple-license&gt;Â </p>
  <p class="Paragraph">The &lt;license-text&gt; with lang=âenâ will be selected.Â </p>
  <p class="Paragraph">Example 4: Locale of OOo is <span class="T11">de-DE</span> and the relevant part of the description.xml is:</p>
  <p class="Code">&lt;simple-license accept-by="user" default-license-id=<span class="T11">"en-NZ"</span> &gt;</p>
  <p class="Code">Â  &lt;license-text xlink:href="lic_en" lang<span class="T9">="en" /</span>&gt;</p>
  <p class="Code">Â  &lt;license-text xlink:href="lic_en-GB" lang<span class="T9">="en-GB" Â /&gt;</span></p>
  <p class="Code"><span class="T9">Â  &lt;license-text xlink:href="lic_en-NZ" lang=</span><span class="T11">"en-NZ"</span><span class="T9"> l</span>icense-id="en-NZ" /&gt;</p>
  <p class="Code">&lt;/simple-license&gt;Â </p>
  <p class="Paragraph">The &lt;license-text&gt; with lang=âen-NZâ will be selected.Â </p>
  <h2 class="Head2"><a name="1_7_Dependencies" />5.7Â Â Dependencies</h2>
  <p class="Paragraph">One can imagine a large variety of dependencies an extension can have on its environment: availability of certain UNO types and services, availability of features only present since some specific version of OOo, availability of other installed extensions, availability of third-party libraries, etc.Â </p>
  <p class="Paragraph">To support this, a mechanism is introduced so that extensions can bring along a specification of their dependencies. When a user wants to install an extension, the application first checks whether all dependencies are met. Â If not, an error dialog is displayed informing the user that the extension could not be installed.</p>
  <p class="Paragraph">The only actual dependency currently defined is &lt;OpenOffice.org-minimal-version value=â<span class="Variable">X</span>â&gt;, whereÂ <span class="Variable">X</span> is the required underlying OpenOffice.org version (â<span class="Codeintext">2.1</span>â, â<span class="Codeintext">2.2</span>â, etc.), starting with OpenOffice.orgÂ 2.1. (Even if an extension is installed in a derived product like StarOffice, this dependency is on the underlying OpenOffice.org version.)</p>
  <p class="Paragraph">OOoÂ 2.0.3 and earlier are not prepared to correctly handle extensions with dependencies. In OOoÂ 2.0.3 and earlier, if a <span class="CODE">.uno.pkg</span> (or <span class="CODE">.zip</span>) extension specifies any dependencies, they are effectively ignored and the extension is installed nonetheless. An <span class="CODE">.oxt</span> extension cannot be installed at all in OOoÂ 2.0.3 and earlier. So, if an extension shall run in any OOo version, it should be named <span class="CODE">.uno.pkg</span> and should not specify any dependencies; if an extension shall only run in OOoÂ 2.0.4 and later, it should be named <span class="CODE">.oxt</span> and should not specify any dependencies; and if an extension shall only run in a future OOo version, it should be named <span class="CODE">.oxt</span> and should specify the appropriate dependencies (which will be defined by the time the given OOo version is available).</p>
  <p class="Paragraph">There is a certain dilemma: On the one hand, nothing is yet known about the kinds of dependencies that will be defined in the future. On the other hand, at least some information about the unsatisfied dependencies of a future extension must be displayed in OOoÂ 2.0.4. Therefore, each dependency specified by an extension must contain a human-readable (non-localized, English) <span class="Emphasis">name</span> that can be displayed to the user, conveying at least rudimentary information about the nature of the unsatisfied dependency. Future versions of OOo that already know a certain kind of dependency are expected to display more detailed information.</p>
  <p class="Paragraph">Likewise, when new dependencies are defined over time, old versions of OOo will not know about them. Those old OOo will thus reject extensions making use of those dependencies, even if the old OOo version would actually satisfy the dependencies. Therefore, each dependency specified by an extension may optionally contain an <span class="CODE">OpenOffice.org-minimal-version</span> attribute that specifies the minimal version of OOo that would satisfy the dependency. Old versions of OOo that do not know the given dependency will then check for the optional attribute and, if present, nevertheless accept the dependency if the given version is large enough. This feature is only supported since OOo 2.3.</p>
  <p class="Paragraph">Within the description.xml, dependencies are recorded as follows: An XML element whose name consists of the namespace name <span class="CODE">http://openoffice.org/extensions/description/2006</span> and the local part <span class="CODE">dependencies</span> may appear at most once as a child of the root element. This element has as its element content an arbitrary number of child elements that are not further constrained expect for the following: Each such child element should have an attribute whose name consists of the namespace Â name <span class="CODE">http://openoffice.org/extensions/description/2006</span> and the local part <span class="CODE">name</span>, and it may optionally have an attribute whose name consists of the namespace <span class="CODE">http://openoffice.org/extensions/description/2006</span> and the local part <span class="CODE">OpenOffice.org-minimal-version</span>. Each such child element represents one dependency, and the value of its <span class="CODE">name</span> attribute shall contain the human-readable dependency name (and the value, after normalization, should not be empty).</p>
  <p class="Paragraph">If an extensions is either not of type <span class="CODE">.oxt</span>, <span class="CODE">.uno.pkg</span>, or <span class="CODE">.zip</span>, or does not contain a description.xml, or the description.xml does not contain a <span class="CODE">dependencies</span> element, or the <span class="CODE">dependencies</span> element does not contain any child elements, then the extension does not specify any dependencies.</p>
  <h2 class="Head2"><a name="1_8_System_Integration" />5.8Â Â System Integration</h2>
  <p class="Paragraph">When installing OpenOffice.org, the installation routine Â is adding information to the system which can be used by other software products to install extensions. Â For example, double-clicking on an extension in a file browser should start the Extension Manager and install the extension. Also mail clients and web browser should offer a way of installing the extension, when it comes as an attachment of an e-mail or is the target of a link.</p>
  <p class="Paragraph">Extension which are installed by way of using the system integration are always installed as <span class="Emphasis">user extensions</span>.</p>
  <p class="Paragraph">The system integration is available since OOo 2.2. Â </p>
  <h2 class="Head2"><a name="1_9_Online_Update_of_Extensions" />5.9Â Â <a name="online_update_of_extensions" />Online Update of Extensions</h2>
  <p class="Paragraph">Extensions are often improved over a period of time. That is, publishers ship new versions of the same extension with added functionality and/or bug fixes. Currently users must update their extensions manually, that is, find out where to get updates, obtain the updates, remove the old extensions, install the new extension. This feature will make updating easier. Users can run the update mechanism from the Extension Manager. A dialog will show available updates and the user will be able to choose which to install. Â </p>
  <p class="Paragraph">More particular information for this feature can be found in the specification at:Â </p>
  <p class="Paragraph"><a href="http://replay.waybackmachine.org/20080924043146/http://specs.openoffice.org/appwide/packagemanager/online_update_for_extensions.odt">http://specs.openoffice.org/appwide/packagemanager/online_update_for_extensions.odt</a></p>
  <p class="Paragraph">Currently the update mechanism completely replaces an installed extension. That is, the update is actually a complete new extension which could also be installed separately without replacing an earlier version of this extension.Â </p>
  <h3 class="Head3"><a name="1_9_1_Running_Online_-_Update" />5.9.1Â Â Running Online - Update</h3>
  <p class="Paragraph">The update procedure needs to be started by the user in the Extension Manager. One can update all installed extensions by pressing the âUpdatesâ button or select particular extensions, press the right mouse button and select âUpdateâ in the context menu. The extension manager will then try to obtain <span class="Emphasis">update information</span> for the affected extension. If it finds that a new version of an extension is available then it will be displayed in the update window. </p>
  <p class="Paragraph">In some cases an update cannot be installed, for example because the Â installed extension is shared by all users and the current user does not have permission to manage shared extensions. In this case a message to this regard is displayed in the window. Â To update shared extensions one needs to close OpenOffice.org and run unopkg gui. Then the user has access to all extensions.</p>
  <p class="Paragraph">An extension may also not be installable, because it has unfulfilled dependencies. For example, Â the extensions requires a particular version of OpenOffice.org. </p>
  <p class="Paragraph">The user can determine which of the updates he wants to install by checking them. When the âDownload and Installationâ button is pressed then, as the name suggests, the extensions are being downloaded and installed.Â </p>
  <h3 class="Head3"><a name="1_9_2_Concept" />5.9.2Â Â Concept</h3>
  <p class="Paragraph">The actual download location of an update is contained in the <span class="Emphasis">update information</span> which is typically a xml file which is hosted on a server. Â Every <span class="Emphasis">update information</span> contains only information for exactly one extension. Â The most important information are the location of the update and the version of this extension.</p>
  <p class="Paragraph">The Extension Manager needs to get hold of the <span class="Emphasis">update information</span> in order to decide if the respective extension is a valid update. For example, it only makes sense to take a version into account that is greater than the version of the already installed extension. Â The information where the <span class="Emphasis">update information</span> is located is contained in the description.xml of each extension. In particular the children of the &lt;update-information&gt; Â element (see page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#des_update_information">9</a>), contain URLs which reference the <span class="Emphasis">update information</span>. The Extension Manager uses these URL to download the <span class="Emphasis">update information</span> and later uses the information in the <span class="Emphasis">update information</span> to download the respective extension.</p>
  <p class="Paragraph">In case that an extension does not contain a description.xml or the description.xml does not contain the &lt;update-information&gt; element, the Extension Manager uses a default location to get <span class="Emphasis">update information</span>. This location is build-in, and is therefore determined by the Â publisher Â of OpenOffice.org. Currently this information is contained in the version.(ini|rc) of the the office installation.</p>
  <p class="Paragraph">Now the attentive reader may be wondering, because it was mentioned before that the <span class="Emphasis">update information</span> only contain information for just one extension. How come that just one build-in URL can be used to get information for multiple extensions? The answer is that there is a way to bundle several <span class="Emphasis">update information</span> in one piece of data. This is done by using an XML atom feed which can reference Â multiple <span class="Emphasis">update information. </span>For example a feed could reference multiple <span class="Emphasis">update information</span>, which refer all to an extension with the same Id but have different versions. It could also contain references to <span class="Emphasis">update information</span> of distinct extensions (different Id). Then the Extensions Manager will pick out the information it needs. </p>
  <p class="P16">Not only the build-in URL can reference an atom feed but also every extension.Â </p>
  <h3 class="Head3"><a name="1_9_3_Example_Scenario_for_Providing_Updates" />5.9.3Â Â Example Scenario for Providing Updates</h3>
  <h4 class="Head4"><a name="1_9_3_1_Using_an_Atom_Feed" />Using an Atom Feed</h4>
  <p class="Paragraph">By using Â an atom feed one has greater flexibility in terms of where the actual updates are hosted. For example, a company which has published many extensions, may utilize just one atom feed which are referenced by all extensions. The location of this atom feed must be well chosen, because changing it may break the automatic update. Then the Extension Manager cannot obtain <span class="Emphasis">update information</span> for these extensions anymore. Â For this reason, the company could set up a dedicated server which is guaranteed to be available Â in the foreseeable future. The actual extensions can then be hosted on different servers. The atom feed file needs only be edited if an <span class="Emphasis">update information</span> file is moved to a different Â place, or when <span class="Emphasis">update information</span> for new extensions become available. </p>
  <p class="Paragraph">If no actual update is available, Â for example, there is just version 1.0, then the update information could still refer to this extension. Â This does not do any harm because the Extension Manager compares the version number of the installed extension and the version which is contained in the update information, in order to display only real updates. </p>
  <p class="Paragraph">The location of the extension used as update could be the same as the location where customers download the extension for the first time. For example, there could be a web site which contains links to extensions. Â Let's assume one link is:</p>
  <p class="Paragraph">http://mycomp/extension.oxtÂ </p>
  <p class="Paragraph">The extension references a feed at:Â </p>
  <p class="Paragraph">http://openoffice.org/extensions/updatefeed.xmlÂ </p>
  <p class="Paragraph">The feed contains the reference to the <span class="Emphasis">update information</span>:</p>
  <p class="Paragraph">http://mycomp/updates/extension.update.xmlÂ </p>
  <p class="Paragraph">and this file refers to the update which is again:Â </p>
  <p class="Paragraph">http://mycomp/extension.oxtÂ </p>
  <p class="Paragraph">If now version 2.0 of the extension becomes available, then the publisher could simply replace the extension at http://mycomp/extension.oxt and change the <span class="Emphasis">update information</span> so that it reflects the new version. This way, users download always the latest version from the website and the Extension Manager can use this extension as update for an older version which is already installed.</p>
  <h3 class="Head3"><a name="1_9_4_Migration_of_Update_Information" />5.9.4Â Â Migration of Update Information</h3>
  <p class="Paragraph">I could become necessary to change the server which hosts the update feed or <span class="Emphasis">update information</span>. Â If this results in a different URL for these files, then the automatic update will not work. Â Therefore the following procedure is recommended.</p>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P17" style="margin-left:2.5cm;"><p class="P17" style="margin-left:0cm;">Plan for a transition period, that is long enough for most users to get a new update.Â </p></li>
   <li class="P17" style="margin-left:2.5cm;"><p class="P17" style="margin-left:0cm;">Set up the new server, or the locations for hosting the <span class="Emphasis">update information</span>, and run both servers in parallel. That is, the same <span class="Emphasis">update information</span> and updates should be available from both servers.</p></li>
   <li class="P17" style="margin-left:2.5cm;"><p class="P17" style="margin-left:0cm;">Â Prepare new versions for extensions that contain Â an URL to the new server. </p></li>
   <li class="P17" style="margin-left:2.5cm;"><p class="P17" style="margin-left:0cm;">Switch of the old server after the transition period. Users, which have obtained the update, will be able to use the update mechanism as before. All other users will not be able to get an update anymore.Â </p></li>
  </ol>
  <h3 class="Head3"><a name="1_9_5_Description_of_the_Update_Information" />5.9.5Â Â Description of Â the Update Information</h3>
  <p class="Paragraph">If the update information can be contained in a file which can be directly accessed through a URL or are generated on demand (HTTP get request). If it is a file then it could be named according to this pattern:Â </p>
  <p class="Paragraph">&lt;extension_file_name&gt;.update.xmlÂ </p>
  <p class="Paragraph">For example, the update information file for the extension myextension.oxt is myextension.update.xml. The .oxt file extension is not used.Â </p>
  <p class="Paragraph">It follows the description of the XML structure of the <span class="Emphasis">update information</span> data:</p>
  <p class="DescriptionElement"><a name="upd_description" />Element &lt;description&gt;</p>
  <p class="Paragraph">XPath: /descriptionÂ </p>
  <p class="Paragraph">Parent element: Â document root</p>
  <p class="Paragraph">Child elements:Â </p>
  <p class="Paragraph">&lt;identifier&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#upd_desc_identifier">19</a>)</p>
  <p class="Paragraph">&lt;version&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#upd_desc_version">20</a>)</p>
  <p class="Paragraph">&lt;update-download&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#upd_desc_update-download">20</a>)</p>
  <p class="Paragraph">&lt;dependencies&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#upd_desc_dependencies">20</a>)</p>
  <p class="Paragraph">&lt;description&gt; is the root element of the Â update information XML document.</p>
  <p class="Paragraph">Â </p>
  <p class="P9">Table <a name="refTable7">8</a>Attribute &lt;description&gt;</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table13"><colgroup><col width="172" /><col width="533" /></colgroup><tr><td style="text-align:left;width:3.762cm; " class="Table13A1">
      <p class="TableHead">AttributeÂ </p>
     </td><td style="text-align:left;width:11.672cm; " class="Table13B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:3.762cm; " class="Table13A2">
     <p class="TextInTable">xmlnsÂ </p>
    </td><td style="text-align:left;width:11.672cm; " class="Table13B2">
     <p class="TextInTable">The default namespace of element description and all children must be defined asÂ </p>
     <p class="TextInTable">"<a href="http://replay.waybackmachine.org/20080924043146/http://openoffice.org/extensions/update/2006">http://openoffice.org/extensions/update/2006</a>"</p>
    </td></tr><tr><td style="text-align:left;width:3.762cm; " class="Table13A2">
     <p class="TextInTable">xmlns:depÂ </p>
    </td><td style="text-align:left;width:11.672cm; " class="Table13B2">
     <p class="TextInTable">The namespace for dependency information must be defined asÂ </p>
     <p class="TextInTable">"<a href="http://replay.waybackmachine.org/20080924043146/http://openoffice.org/extensions/description/2006">http://openoffice.org/extensions/description/2006</a>"</p>
    </td></tr><tr><td style="text-align:left;width:3.762cm; " class="Table13A2">
     <p class="TextInTable">xmlns:xlinkÂ </p>
    </td><td style="text-align:left;width:11.672cm; " class="Table13B2">
     <p class="P10">The xlink namespace must be defined as Â </p>
     <p class="TextInTable">"http://www.w3.org/1999/xlink"Â </p>
    </td></tr><tr><td style="text-align:left;width:3.762cm; " class="Table13A2">
     <p class="TextInTable">other namespace definitionsÂ </p>
    </td><td style="text-align:left;width:11.672cm; " class="Table13B2">
     <p class="P10">Other namespaces can be added as necessary.Â </p>
    </td></tr></table></div>
  <p class="DescriptionElement"><a name="upd_desc_identifier" />Element &lt;identifier&gt; </p>
  <p class="Paragraph">XPath: /description/identifierÂ </p>
  <p class="Paragraph">Parent element: Â &lt;description&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#upd_description">19</a>)</p>
  <p class="Paragraph">Child elements: noneÂ </p>
  <p class="Paragraph">Â </p>
  <p class="P18">Table <a name="refTable8">9</a> Attributes of &lt;identifier&gt;</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table8"><colgroup><col width="113" /><col width="592" /></colgroup><tr><td style="text-align:left;width:2.48cm; " class="Table8A1">
      <p class="TableHead">AttributeÂ </p>
     </td><td style="text-align:left;width:12.954cm; " class="Table8B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:2.48cm; " class="Table8A2">
     <p class="TextInTable">valueÂ </p>
    </td><td style="text-align:left;width:12.954cm; " class="Table8B2">
     <p class="TextInTable">Required. The extension identifier.Â </p>
    </td></tr></table></div>
  <p class="DescriptionElement"><a name="upd_desc_version" />Element &lt;version&gt;</p>
  <p class="Paragraph">XPath: /description/versionÂ </p>
  <p class="Paragraph">Parent element: Â &lt;description&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#upd_description">19</a>)</p>
  <p class="Paragraph">Child elements: noneÂ </p>
  <p class="Paragraph">Â </p>
  <p class="P18">Table <a name="refTable9">10</a> Attributes of &lt;version&gt;</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table11"><colgroup><col width="113" /><col width="592" /></colgroup><tr><td style="text-align:left;width:2.48cm; " class="Table11A1">
      <p class="TableHead">AttributeÂ </p>
     </td><td style="text-align:left;width:12.954cm; " class="Table11B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:2.48cm; " class="Table11A2">
     <p class="TextInTable">valueÂ </p>
    </td><td style="text-align:left;width:12.954cm; " class="Table11B2">
     <p class="TextInTable">Required. A textual representation of the extension version.Â </p>
    </td></tr></table></div>
  <p class="DescriptionElement"><a name="upd_desc_update-download" />Element &lt;update-download&gt;</p>
  <p class="Paragraph">XPath: /description/update-downloadÂ </p>
  <p class="Paragraph">Parent element: Â &lt;description&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#upd_description">19</a>)</p>
  <p class="Paragraph">Child elements: Â </p>
  <p class="Paragraph">&lt;src&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#upd_dow_src">20</a>)</p>
  <p class="Paragraph">&lt;update-download&gt; must have one or more &lt;src&gt; Â children. The second, third, etc. &lt;src&gt; element are regarded as fallback, that is, the elements provide URLs to mirrors. Â The Extension Manager will try to download the extension by using the first URL and only uses the next URL if an error occurred, for example because the the connection was interrupted.</p>
  <p class="DescriptionElement"><a name="upd_desc_dependencies" />Element &lt;dependencies&gt;</p>
  <p class="Paragraph">XPath: /description/dependenciesÂ </p>
  <p class="Paragraph">Parent element: Â &lt;description&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#upd_description">19</a>)</p>
  <p class="Paragraph">Child elements: Â </p>
  <p class="Paragraph">&lt;dep:OpenOffice.org-minimal-version&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#upd_desc_dependency">21</a>)</p>
  <p class="Paragraph">othersÂ </p>
  <p class="DescriptionElement"><a name="upd_dow_src" />Element &lt;src&gt;</p>
  <p class="Paragraph">XPath: /description/update-download/srcÂ </p>
  <p class="Paragraph">Parent element: Â &lt;update-download&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#upd_desc_update-download">20</a>)</p>
  <p class="Paragraph">Child elements: noneÂ </p>
  <p class="P9">Table <a name="refTable10">11</a> Attributes of &lt;src&gt;</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table10"><colgroup><col width="115" /><col width="590" /></colgroup><tr><td style="text-align:left;width:2.521cm; " class="Table10A1">
      <p class="TableHead">AttributeÂ </p>
     </td><td style="text-align:left;width:12.913cm; " class="Table10B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:2.521cm; " class="Table10A2">
     <p class="TextInTable">xlink:hrefÂ </p>
    </td><td style="text-align:left;width:12.913cm; " class="Table10B2">
     <p class="TextInTable">Required. The value is a URL which refers to the extensionÂ </p>
    </td></tr></table></div>
  <p class="DescriptionElement"><a name="upd_desc_dependency" />Element &lt;dep:OpenOffice.org-minimal-version&gt;</p>
  <p class="Paragraph">XPath: /description/dependencies/dep:OpenOffice.org-minimal-versionÂ </p>
  <p class="Paragraph">Parent element: Â &lt;dependencies&gt; (page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#upd_desc_dependencies">20</a>)</p>
  <p class="Paragraph">Child elements: noneÂ </p>
  <p class="Paragraph">Â </p>
  <p class="P9">Table <a name="refTable11">12</a> Attributes of &lt;dep:OpenOffice.org-minimal-version&gt;</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table12"><colgroup><col width="158" /><col width="548" /></colgroup><tr><td style="text-align:left;width:3.466cm; " class="Table12A1">
      <p class="TableHead">AttributeÂ </p>
     </td><td style="text-align:left;width:12.003cm; " class="Table12B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:3.466cm; " class="Table12A2">
     <p class="TextInTable">xmlns:depÂ </p>
    </td><td style="text-align:left;width:12.003cm; " class="Table12B2">
     <p class="TextInTable">The namespace for dependency information (inherited from &lt;description&gt;, see page <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#upd_description">19</a>) must be defined as</p>
     <p class="TextInTable">"<a href="http://replay.waybackmachine.org/20080924043146/http://openoffice.org/extensions/description/2006">http://openoffice.org/extensions/description/2006</a>"</p>
    </td></tr><tr><td style="text-align:left;width:3.466cm; " class="Table12A2">
     <p class="TextInTable">dep:nameÂ </p>
    </td><td style="text-align:left;width:12.003cm; " class="Table12B2">
     <p class="TextInTable">Required. The string â<span class="Codeintext">OpenOffice.org </span><span class="Codeintext"><span class="Variable">value</span></span>â (where <span class="Variable">value</span> is the value of the attribute <span class="Codeintext">value</span>).</p>
    </td></tr><tr><td style="text-align:left;width:3.466cm; " class="Table12A2">
     <p class="TextInTable">valueÂ </p>
    </td><td style="text-align:left;width:12.003cm; " class="Table12B2">
     <p class="TextInTable">Required. The required underlying OpenOffice.org version (â<span class="Codeintext">2.1</span>â, â<span class="Codeintext">2.2</span>â, etc.), starting with OpenOffice.orgÂ 2.1.</p>
    </td></tr></table></div>
  <h3 class="Head3"><a name="1_9_6_Description_of_Atom_Feed" />5.9.6Â Â Description of Atom Feed</h3>
  <p class="Paragraph">The description of the atom feed is available at:Â </p>
  <p class="Paragraph"><a href="http://replay.waybackmachine.org/20080924043146/http://wiki.services.openoffice.org/wiki/Update_Notification_Protocol"><span class="T12">http://wiki.services.openoffice.org/wiki/Update_Notification_Protocol</span></a></p>
  <h3 class="Head3"><a name="1_9_7_Examples" />5.9.7Â Â Examples</h3>
  <h4 class="Head4"><a name="1_9_7_1_description.xml_Containing_Direct_Reference_to_the_Update_Information" />description.xml Containing Direct Reference to the Update Information</h4>
  <p class="Paragraph">The following content of a description.xml directly references update information:Â </p>
  <p class="Code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</p>
  <p class="Code">&lt;description xmlns="http://openoffice.org/extensions/description/2006"Â </p>
  <p class="Code">Â  Â  xmlns:xlink="http://www.w3.org/1999/xlink"&gt;</p>
  <p class="Code">Â  Â  &lt;version value="1.0" /&gt; Â  Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  &lt;update-information&gt;</p>
  <p class="Code">Â  Â  Â  &lt;src xlink:href="http://extensions.openoffice.org/testarea/desktop/simple/update/plain1.update.xml" /&gt;</p>
  <p class="Code">Â  Â  Â  &lt;src xlink:href="http://extensions.mirror.openoffice.org./testarea/desktop/simple/update/plain1.update.xml" /&gt;</p>
  <p class="Code">Â  Â  &lt;/update-information&gt;</p>
  <p class="Code">&lt;/description&gt;Â </p>
  <p class="Paragraph">The second src element contains a URL to a mirror which will be used by the Extension Manager if the location referenced by the URL in the first src element cannot be reached.Â </p>
  <p class="Paragraph">This is the Â content of plain1.update.xml:</p>
  <p class="Code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</p>
  <p class="Code">&lt;description xmlns="http://openoffice.org/extensions/update/2006"Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â xmlns:xlink="http://www.w3.org/1999/xlink"&gt;</p>
  <p class="Code">Â  Â  &lt;identifier value="org.openoffice.legacy.plain1.oxt"/&gt;</p>
  <p class="Code">Â  Â  &lt;version value="2.0" /&gt; Â  Â </p>
  <p class="Code">Â  Â  &lt;update-download&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;src xlink:href="http://extensions.openoffice.org/testarea/desktop/simple/update/plain1.oxt" /&gt;</p>
  <p class="Code">Â  Â  &lt;/update-download&gt;</p>
  <p class="Code">&lt;/description&gt;Â </p>
  <p class="Paragraph">The src element contains a URL to version 2.0 of plain1.oxt. Plain1.oxt has the identifier org.openoffice.legacy.plain1.oxt because it does not define an identifier in its description.xml. Otherwise the identifier would be the same as the one in the description.xml.Â </p>
  <h4 class="Head4"><a name="1_9_7_2_Using_the_Atom_Feed" />Using the Atom Feed</h4>
  <p class="Paragraph">This is the content of the description.xml of feed1.oxt which references an atom feed:Â </p>
  <p class="Code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</p>
  <p class="Code">&lt;description xmlns="http://openoffice.org/extensions/description/2006"Â </p>
  <p class="Code">Â  Â  xmlns:xlink="http://www.w3.org/1999/xlink"&gt;</p>
  <p class="Code">Â  Â  &lt;version value="1.0" /&gt; Â  Â </p>
  <p class="Code">Â  Â  &lt;update-information&gt;</p>
  <p class="Code">Â  Â  Â  &lt;src xlink:href="http://extensions.openoffice.org/testarea/desktop/updatefeed/update/feed1.xml" /&gt;</p>
  <p class="Code">Â  Â  &lt;/update-information&gt;</p>
  <p class="Code">&lt;/description&gt;Â </p>
  <p class="Paragraph">The feed:Â </p>
  <p class="Code">&lt;?xml version="1.0" encoding="utf-8"?&gt;</p>
  <p class="Code">&lt;feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â  &lt;title&gt;Extensions Update Feed&lt;/title&gt;</p>
  <p class="Code">Â  &lt;link rel="alternate" type="text/html" href="http://update.services.openoffice.org/ooo/snapshot.html"/&gt;</p>
  <p class="Code">Â  &lt;updated&gt;2006-11-06T18:30:02Z&lt;/updated&gt;</p>
  <p class="Code">Â  &lt;author&gt;</p>
  <p class="Code">Â  Â  &lt;name&gt;The OpenOffice.org Project&lt;/name&gt;</p>
  <p class="Code">Â  Â  &lt;uri&gt;http://openoffice.org&lt;/uri&gt;</p>
  <p class="Code">Â  Â  &lt;email&gt;updatefeed@openoffice.org&lt;/email&gt;</p>
  <p class="Code">Â  &lt;/author&gt;</p>
  <p class="Code">Â  &lt;id&gt;urn:uuid:a4ccd383-1dd1-11b2-a95c-0003ba566e9d&lt;/id&gt;</p>
  <p class="Code">Â  &lt;entry&gt;</p>
  <p class="Code">Â  Â  &lt;title&gt;feed1.oxt version 2.0 available&lt;/title&gt;</p>
  <p class="Code">Â  Â  &lt;link rel="alternate" type="text/html"</p>
  <p class="Code">Â  Â  Â  Â  href="http://extensions.openoffice.org"/&gt;</p>
  <p class="Code">Â  Â  &lt;id&gt;urn:uuid:a4ccd383-1dd1-11b2-a95c-0003ba566e9f&lt;/id&gt;</p>
  <p class="Code">Â  Â  &lt;category term="org.openoffice.legacy.feed1.oxt" label="feed1.oxt" /&gt;</p>
  <p class="Code">Â  Â  &lt;updated&gt;2006-11-06T18:30:02Z&lt;/updated&gt;</p>
  <p class="Code">Â  Â  &lt;summary&gt;Click here to go to the download page.&lt;/summary&gt;</p>
  <p class="Code">Â  Â  &lt;content type="application/xml" src="http://extensions.openoffice.org/testarea/desktop/updatefeed/update/feed1.update.xml" /&gt;</p>
  <p class="Code">Â  &lt;/entry&gt;</p>
  <p class="Code">Â  &lt;entry&gt;</p>
  <p class="Code">Â  Â  &lt;title&gt;feed2.oxt version 2.0 available&lt;/title&gt;</p>
  <p class="Code">Â  Â  &lt;link rel="alternate" type="text/html"</p>
  <p class="Code">Â  Â  Â  Â  href="http://extensions.openoffice.org"/&gt;</p>
  <p class="Code">Â  Â  &lt;id&gt;urn:uuid:a4ccd383-1dd1-11b2-a95c-0003ba566eaf&lt;/id&gt;</p>
  <p class="Code">Â  Â  &lt;category term="org.openoffice.legacy.feed2.oxt" label="feed2.oxt" /&gt;</p>
  <p class="Code">Â  Â  &lt;updated&gt;2006-11-06T18:30:02Z&lt;/updated&gt;</p>
  <p class="Code">Â  Â  &lt;summary&gt;Click here to go to the download page.&lt;/summary&gt;</p>
  <p class="Code">Â  Â  &lt;content type="application/xml" src="http://extensions.openoffice.org/testarea/desktop/updatefeed/update/feed2.update.xml" /&gt;</p>
  <p class="Code">Â  &lt;/entry&gt;</p>
  <p class="Code">&lt;/feed&gt;</p>
  <p class="Code">Â </p>
  <p class="Paragraph">The feed contains two entry elements and each references the <span class="Emphasis">update information</span> for a different extensions. It could, however, also reference the <span class="Emphasis">update information</span> for two different versions of the same extension.</p>
  <p class="Paragraph">The <span class="Emphasis">update information</span> for the version of feed1.oxt:</p>
  <p class="Code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</p>
  <p class="Code">&lt;description xmlns="http://openoffice.org/extensions/update/2006"Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â xmlns:xlink="http://www.w3.org/1999/xlink"&gt;</p>
  <p class="Code">Â  Â  &lt;identifier value="org.openoffice.legacy.feed1.oxt"/&gt;</p>
  <p class="Code">Â  Â  &lt;version value="2.0" /&gt; Â  Â </p>
  <p class="Code">Â  Â  &lt;update-download&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;src xlink:href="http://extensions.openoffice.org/testarea/desktop/updatefeed/update/feed1.oxt" /&gt;</p>
  <p class="Code">Â  Â  &lt;/update-download&gt;</p>
  <p class="Code">&lt;/description&gt;Â </p>
  <h2 class="Head2"><a name="1_10_Options_Dialog" />5.10Â Â Options Dialog</h2>
  <p class="Paragraph">Extensions can add options pages to OOo's options dialog. It is also possible to start an options dialog from within the Extension Manager on behalf of a particular extensions. Â An options page represents a child window that is displayed within the options dialog. An extension can provide multiple options pages. It can determine that they can be added to already existing nodes, such as âOpenOffice.org Writerâ or Â âInternet Settingsâ. Â It is also possible to create completely new nodes.</p>
  <p class="Paragraph">The specification for this feature can be found at:Â </p>
  <p class="Paragraph"><a href="http://replay.waybackmachine.org/20080924043146/http://specs.openoffice.org/appwide/packagemanager/options_dialog_for_extensions.odt">http://specs.openoffice.org/appwide/packagemanager/options_dialog_for_extensions.odt</a></p>
  <p class="Paragraph">In the following paragraphs we will show what has to be done in order to add options pages to an extension. Along the way we will go into some details where necessary. Â It is assumed that the reader has already knowledge about extension programming and that he or she knows how the OOo's registry (including xcs and xcu files) works.</p>
  <p class="Paragraph">A note about writing some terms. When we refer to elements from the configuration schema of OOo then we use the respective uppercase names, for example Node, Module. The plural will expressed by adding a pipe symbol an the respective postfix, for example Node|s, Module|s.Â </p>
  <h2 class="Head2"><a name="1_11_Creating_the_GUI_of_the_Options_Page" />5.11Â Â Creating the GUI of the Options Page</h2>
  <p class="Paragraph">The GUI of an options page needs to be created by the dialog editor of OOo. Â  Exporting the dialog will result in saving a .xdl file and perhaps Â multiple .properties files. The xdl file contains the description of the dialog in XML whereas the properties files contain localized strings. For example, if the dialog is named Dialog1 and it contains strings which are localized for German and US â English, then you will obtain these files:</p>
  <p class="Paragraph">Dialog1.xdlÂ </p>
  <p class="Paragraph">Dialog1_de_DE.propertiesÂ </p>
  <p class="Paragraph">Dialog1_en-US.propertiesÂ </p>
  <p class="Paragraph">Please make sure that you have set the property âWith title barâ to ânoâ for the whole dialog.Â </p>
  <p class="Paragraph">The exported files can be anywhere in the extensions, except in META-INF. They must also be in the same directory.Â </p>
  <p class="Paragraph">The options dialog will use the service <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/ContainerWindowProvider.html" title="see type com.sun.star.awt.ContainerWindowProvider">com.sun.star.awt.ContainerWindowProvider</a> to create the options pages. The service constructors takes an URL to the xdl file and an an event handler component. The latter will be used to process events which have been defined in the dialog editor for particular controls. It is also used for saving and loading the data of the controls which are on the options pages.Â </p>
  <h2 class="Head2"><a name="1_12_Saving_and_Reading_Data_for_the_Options_Page" />5.12Â Â Saving and Reading Data for the Options Page</h2>
  <p class="Paragraph">An options page typically allows the user to enter some data, which of course must be saved when the user presses the OK button. When the options page is displayed it should show the data which the user entered previously. In case nothing has ever been entered, the options page could show some âdefaultâ data or nothing at all.Â </p>
  <p class="Paragraph">How the data is saved and where it is stored is not covered by the specification. It only defines the events âokâ, âinitializeâ, and âbackâ which the extension needs to process in order to save the entered data, initialize the controls with data, or restore the state of the controls with the previously saved data. Â The âokâ and âbackâ events are triggered by the âOKâ and âBackâ button of the options dialog. âinitializeâ is called before the options page is being displayed. In most cases âinitializeâ and âbackâ have the same meaning.</p>
  <p class="Paragraph">In order to receive these events one has to provide a service that implements the interface <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/XContainerWindowEventHandler.html" title="see type com.sun.star.awt.XContainerWindowEventHandler">com.sun.star.awt.XContainerWindowEventHandler</a>. The component is then installed like any other component. That is, one provides for example a jar file or a dll and adds the proper entries to the manifest.xml.Â </p>
  <p class="Paragraph">The action events are processed in the <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/XContainerWindowEventHandler/callHandlerMethod.html" title="see type com.sun.star.awt.XContainerWindowEventHandler.callHandlerMethod">com.sun.star.awt.XContainerWindowEventHandler.callHandlerMethod</a>. This method takes three parameter. The first is a Â <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/XWindow.html" title="see type com.sun.star.awt.XWindow">com.sun.star.awt.XWindow</a> which represents the dialog for which the event is called. The second is an com.sun.star.uno.Any, which describes the actual event. Therefore the IDL calls it the âEventObjectâ. The last parameter is a string which contains a âmethod nameâ. This method may not exists, but the name identifies an action which should be invoked. </p>
  <p class="Paragraph">In case of our previously mentioned events the method is called with the respective XWindow interface, a method name of âexternal_eventâ, and an any containing either Â âokâ, âbackâ, or âinitializeâ. For example, the java code could look like this:</p>
  <p class="Code">Â  Â  Â  Â  public boolean callHandlerMethod(com.sun.star.awt.XWindow aWindow,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Object aEventObject, String sMethod)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  throws WrappedTargetException {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (sMethod.equals("external_event") ){</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return handleExternalEvent(aWindow, aEventObject);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  } catch (com.sun.star.uno.RuntimeException re) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw re;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  } catch (com.sun.star.uno.Exception e) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw new WrappedTargetException(sMethod, this, e);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  } else if (sMethod.equals("another_method_name") ){</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  ...</p>
  <p class="Code">Â  Â  Â  Â   Â  Â }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  return true;</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â private boolean handleExternalEvent(com.sun.star.awt.XWindow aWindow, Object aEventObject)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  throws com.sun.star.uno.Exception {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  String sMethod = AnyConverter.toString(aEventObject);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  if (sMethod.equals("ok")) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  saveData(aWindow);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  } else if (sMethod.equals("back") || sMethod.equals("initialize")) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  loadData(aWindow);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  } catch (com.sun.star.lang.IllegalArgumentException e) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  throw new com.sun.star.lang.IllegalArgumentException(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Method external_event requires a string in the event object argument.", this,</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â  Â  Â (short) -1);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  }</p>
  <p class="Paragraph">The method saveData and loadData need to be implemented according to where the data actually is stored. In most cases the OOo's registry is a suitable place. Then, of course, one needs to provide a configuration schema (requires an appropriate entry in the manifest.xml as well). Â </p>
  <p class="Paragraph">For example:Â </p>
  <p class="Code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;Â </p>
  <p class="Code">&lt;oor:component-schema xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" oor:name="ExtensionData" oor:package="org.openoffice.desktop.deployment.options" xml:lang="en-US"&gt;Â </p>
  <p class="Code">Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  &lt;author&gt;&lt;/author&gt;</p>
  <p class="Code">Â  Â  &lt;desc&gt;Contains the options data used for the test extensions.&lt;/desc&gt;</p>
  <p class="Code">Â  &lt;/info&gt;</p>
  <p class="Code">Â  &lt;templates&gt;</p>
  <p class="Code">Â  Â  &lt;group oor:name="Leaf"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;desc&gt;The data for one leaf.&lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="String0" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;value&gt;&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="String1" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;value&gt;&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="String2" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;value&gt;&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="String3" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;value&gt;&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="String4" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;value&gt;&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  &lt;/templates&gt;</p>
  <p class="Code">Â  &lt;component&gt;</p>
  <p class="Code">Â  Â  &lt;group oor:name="Leaves"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node-ref oor:name="Writer1" oor:node-type="Leaf" /&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node-ref oor:name="Writer2" oor:node-type="Leaf" /&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;!-- .... --&gt;</p>
  <p class="Code">Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  &lt;/component&gt;</p>
  <p class="Code">&lt;/oor:component-schema&gt;Â </p>
  <p class="Paragraph">Please make sure that the package (oor:package) together with the name (oor:name) for this schema are unique. Â For example, it should Â start with YOUR reversed domain name (do not use org.openoffice in your code), followed by the product name and other values which together uniquely identify this registry node. </p>
  <p class="Paragraph">Â In the example I have defined a group âLeavesâ, which contains several entries and which are all of the same type. Each entry holds the data for one options page. In this case, each options page may provide five different strings.</p>
  <p class="Paragraph">If a new version of the extension uses the same schema, then data, which have been entered by a user for the previous version, will be automatically applied for the new version. If this is not wanted then one need to provide a new schema. In our case we could just change the attribute Â oor:component-schema@ oor:name to a value, for example, ExtensionData2.</p>
  <p class="Paragraph">Now the question is, how one can access the controls on the options page in order to set the data or read from them. The following code example shows the whole service as Java implementation. Please have look at the <span class="Codeintext">loadData</span> and <span class="Codeintext">saveData</span> method. Please be aware that is is only an example and may need to be adapted to personal needs.</p>
  <p class="Paragraph">Â </p>
  <p class="Code">package com.sun.star.comp.extensionoptions;Â </p>
  <p class="Code">Â </p>
  <p class="Code">import com.sun.star.lib.uno.helper.Factory;Â </p>
  <p class="Code">import com.sun.star.lib.uno.helper.WeakBase;Â </p>
  <p class="Code">import com.sun.star.lang.XMultiComponentFactory;Â </p>
  <p class="Code">import com.sun.star.lang.XSingleComponentFactory;Â </p>
  <p class="Code">import com.sun.star.lang.XMultiServiceFactory;Â </p>
  <p class="Code">import com.sun.star.lang.WrappedTargetException;Â </p>
  <p class="Code">import com.sun.star.lang.IllegalArgumentException;Â </p>
  <p class="Code">import com.sun.star.lang.XInitialization;Â </p>
  <p class="Code">import com.sun.star.lang.XTypeProvider;Â </p>
  <p class="Code">import com.sun.star.lang.XServiceInfo;Â </p>
  <p class="Code">import com.sun.star.lang.WrappedTargetException;Â </p>
  <p class="Code">import com.sun.star.uno.UnoRuntime;Â </p>
  <p class="Code">import com.sun.star.uno.Any;Â </p>
  <p class="Code">import com.sun.star.uno.AnyConverter;Â </p>
  <p class="Code">import com.sun.star.uno.XComponentContext;Â </p>
  <p class="Code">import com.sun.star.uno.Exception;Â </p>
  <p class="Code">import com.sun.star.registry.XRegistryKey;Â </p>
  <p class="Code">import com.sun.star.awt.XContainerWindowEventHandler;Â </p>
  <p class="Code">import com.sun.star.awt.XControl;Â </p>
  <p class="Code">import com.sun.star.awt.XControlModel;Â </p>
  <p class="Code">import com.sun.star.awt.XControlContainer;Â </p>
  <p class="Code">import com.sun.star.container.XNameAccess;Â </p>
  <p class="Code">import com.sun.star.container.NoSuchElementException;Â </p>
  <p class="Code">import com.sun.star.beans.PropertyValue;Â </p>
  <p class="Code">import com.sun.star.beans.PropertyState;Â </p>
  <p class="Code">import com.sun.star.beans.XPropertySet;Â </p>
  <p class="Code">import com.sun.star.beans.UnknownPropertyException;Â </p>
  <p class="Code">import com.sun.star.beans.PropertyVetoException;Â </p>
  <p class="Code">import com.sun.star.util.XChangesBatch;Â </p>
  <p class="Code">Â </p>
  <p class="Code">/** A handler which supports multiple options pages which allÂ </p>
  <p class="Code">Â * Â have the same controls.</p>
  <p class="Code">Â */</p>
  <p class="Code">public class OptionsEventHandler {Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  public static class _OptionsEventHandler extends WeakBase</p>
  <p class="Code">Â  Â  Â  Â  implements XServiceInfo, XContainerWindowEventHandler {</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  static private final String __serviceName =</p>
  <p class="Code">Â  Â  Â  Â  "com.sun.star.comp.extensionoptions.OptionsEventHandler";</p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  private XComponentContext m_cmpCtx;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  private XMultiComponentFactory m_xMCF;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  private XNameAccess m_xAccessLeaves;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  /**Names of supported options pages. </p>
  <p class="Code">Â  Â  Â  Â  Â */</p>
  <p class="Code">Â  Â  Â  Â  private String[] m_arWindowNames = {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  "Writer1", "Writer2", "Writer3", "Calc1", "Calc2", "Calc3",</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  "Draw1", "Draw2", "Draw3", "Node1_1", "Node1_2", "Node1_3",</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  "Node2_1", "Node2_2", "Node2_3", "Node3_1", "Node3_2", "Node3_3"};</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  /**Names of the controls which are supported by this handler. All these</p>
  <p class="Code">Â  Â  Â  Â  Â *controls must have a "Text" property.</p>
  <p class="Code">Â  Â  Â  Â  Â */</p>
  <p class="Code">Â  Â  Â  Â  private String[] m_arStringControls = {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  "String0", "String1", "String2", "String3", "String4"};</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  public _OptionsEventHandler(XComponentContext xCompContext) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  m_cmpCtx = xCompContext;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  m_xMCF = m_cmpCtx.getServiceManager(); Â  Â  Â  Â  Â  Â  Â  Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //Create the com.sun.star.configuration.ConfigurationUpdateAccess</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //for the registry node which contains the data for our option</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //pages.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XMultiServiceFactory xConfig;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xConfig = (XMultiServiceFactory) UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XMultiServiceFactory.class,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  m_cmpCtx.getServiceManager().createInstanceWithContext(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.configuration.ConfigurationProvider", m_cmpCtx));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  } catch (com.sun.star.uno.Exception e) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  e.printStackTrace();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  return;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //One argument for creating the ConfigurationUpdateAccess is the "nodepath".</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //Our nodepath point to the node of which the direct subnodes represent the</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //different options pages.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object[] args = new Object[1];</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  args[0] = new PropertyValue(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  "nodepath", 0, "/org.openoffice.desktop.deployment.options.ExtensionData/Leaves",</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  PropertyState.DIRECT_VALUE);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //We get the com.sun.star.container.XNameAccess from the instance of</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //ConfigurationUpdateAccess and save it for later use.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  m_xAccessLeaves = (XNameAccess) UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XNameAccess.class, xConfig.createInstanceWithArguments(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.configuration.ConfigurationUpdateAccess", args));</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  } catch (com.sun.star.uno.Exception e) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  e.printStackTrace();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  return;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  /** This method returns an array of all supported service names.</p>
  <p class="Code">Â  Â  Â  Â  Â * @return Array of supported service names.</p>
  <p class="Code">Â  Â  Â  Â  Â */</p>
  <p class="Code">Â  Â  Â  Â  public String[] getSupportedServiceNames() {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  return getServiceNames();</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  /** This method is a simple helper function to used in the</p>
  <p class="Code">Â  Â  Â  Â  Â * static component initialisation functions as well as in</p>
  <p class="Code">Â  Â  Â  Â  Â * getSupportedServiceNames.</p>
  <p class="Code">Â  Â  Â  Â  Â */</p>
  <p class="Code">Â  Â  Â  Â  public static String[] getServiceNames() {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  String[] sSupportedServiceNames = { __serviceName };</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  return sSupportedServiceNames;</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  /** This method returns true, if the given service will be</p>
  <p class="Code">Â  Â  Â  Â  Â * supported by the component.</p>
  <p class="Code">Â  Â  Â  Â  Â * @param sServiceName Service name.</p>
  <p class="Code">Â  Â  Â  Â  Â * @return True, if the given service name will be supported.</p>
  <p class="Code">Â  Â  Â  Â  Â */</p>
  <p class="Code">Â  Â  Â  Â  public boolean supportsService( String sServiceName ) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  return sServiceName.equals( __serviceName );</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  /** Return the class name of the component.</p>
  <p class="Code">Â  Â  Â  Â  Â * @return Class name of the component.</p>
  <p class="Code">Â  Â  Â  Â  Â */</p>
  <p class="Code">Â  Â  Â  Â  public String getImplementationName() {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  return Â _OptionsEventHandler.class.getName();</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  //XContainerWindowEventHandler</p>
  <p class="Code">Â  Â  Â  Â  public boolean callHandlerMethod(com.sun.star.awt.XWindow aWindow,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Object aEventObject, String sMethod)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  throws WrappedTargetException {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (sMethod.equals("external_event") ){</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return handleExternalEvent(aWindow, aEventObject);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  } catch (com.sun.star.uno.RuntimeException re) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw re;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  } catch (com.sun.star.uno.Exception e) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw new WrappedTargetException(sMethod, this, e);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  return true;</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  //XContainerWindowEventHandler</p>
  <p class="Code">Â  Â  Â  Â  public String[] getSupportedMethodNames() {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  return new String[] {"external_event"};</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  private boolean handleExternalEvent(com.sun.star.awt.XWindow aWindow, Object aEventObject)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  throws com.sun.star.uno.Exception {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  String sMethod = AnyConverter.toString(aEventObject);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  if (sMethod.equals("ok")) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  saveData(aWindow);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  } else if (sMethod.equals("back") || sMethod.equals("initialize")) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  loadData(aWindow);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  } catch (com.sun.star.lang.IllegalArgumentException e) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  throw new com.sun.star.lang.IllegalArgumentException(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Method external_event requires a string in the event object argument.",</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  this, (short) -1);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  return true;</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  private void saveData(com.sun.star.awt.XWindow aWindow)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  throws com.sun.star.lang.IllegalArgumentException,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  com.sun.star.uno.Exception { </p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //Determine the name of the options page. This serves two purposes. First, if this</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //options page is supported by this handler and second we use the name two locate</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //the corresponding data in the registry.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  String sWindowName = getWindowName(aWindow);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (sWindowName == null)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  throw new com.sun.star.lang.IllegalArgumentException(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "This window is not supported by this handler", this, (short) -1);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //To access the separate controls of the window we need to obtain the</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //XControlContainer from the window implementation</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XControlContainer xContainer = (XControlContainer) UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XControlContainer.class, aWindow);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (xContainer == null)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  throw new com.sun.star.uno.Exception(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Could not get XControlContainer from window.", this);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //This is an implementation which will be used for several options pages</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //which all have the same controls. m_arStringControls is an array which</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //contains the names. </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  for (int i = 0; i &lt; m_arStringControls.length; i++) {</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //To obtain the data from the controls we need to get their model.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //First get the respective control from the XControlContainer.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XControl xControl = xContainer.getControl(m_arStringControls[i]);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //This generic handler and the corresponding registry schema support</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //up to five text controls. However, if a options page does not use all</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //five controls then we will not complain here.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  if (xControl == null)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  continue;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //From the control we get the model, which in turn supports the</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //XPropertySet interface, which we finally use to get the data from</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //the control. Â  Â  Â  Â  Â  Â  Â  Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet xProp = (XPropertySet) UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet.class, xControl.getModel());</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  if (xProp == null)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw new com.sun.star.uno.Exception(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Could not get XPropertySet from control.", this);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //Get the "Text" property.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Object aText = xProp.getPropertyValue("Text");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  String sValue = null;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //The value is still contained in a com.sun.star.uno.Any - so convert it.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sValue = AnyConverter.toString(aText);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  } catch (com.sun.star.lang.IllegalArgumentException e) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw new com.sun.star.lang.IllegalArgumentException(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Wrong property type.", this, (short) -1);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //Now we have the actual string value of the control. What we need now is</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //the XPropertySet of the respective property in the registry, so that we</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //can store the value.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //To access the registry we have previously created a service instance</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //of com.sun.star.configuration.ConfigurationUpdateAccess which supports</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //com.sun.star.container.XNameAccess. The XNameAccess is used to get the</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //particular registry node which represents this options page.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //Fortunately the name of the window is the same as the registry node.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet xLeaf = (XPropertySet) UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet.class, m_xAccessLeaves.getByName(sWindowName));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  if (xLeaf == null)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw new Â com.sun.star.uno.Exception(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "XPropertySet not supported.", this);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //Finally we can set the value</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xLeaf.setPropertyValue(m_arStringControls[i], sValue);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //Committing the changes will cause or changes to be written to the registry.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XChangesBatch xUpdateCommit = </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  (XChangesBatch) UnoRuntime.queryInterface(XChangesBatch.class, m_xAccessLeaves);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xUpdateCommit.commitChanges();</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  private void loadData(com.sun.star.awt.XWindow aWindow)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  throws com.sun.star.uno.Exception {</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //Determine the name of the window. This serves two purposes. First, if this</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //window is supported by this handler and second we use the name two locate</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //the corresponding data in the registry.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  String sWindowName = getWindowName(aWindow);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (sWindowName == null)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  throw new com.sun.star.lang.IllegalArgumentException(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "The window is not supported by this handler", this, (short) -1);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //To acces the separate controls of the window we need to obtain the</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //XControlContainer from window implementation</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XControlContainer xContainer = (XControlContainer) UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XControlContainer.class, aWindow);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (xContainer == null)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  throw new com.sun.star.uno.Exception(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Could not get XControlContainer from window.", this);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //This is an implementation which will be used for several options pages</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //which all have the same controls. m_arStringControls is an array which</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //contains the names.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  for (int i = 0; i &lt; m_arStringControls.length; i++) {</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //load the values from the registry</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //To access the registry we have previously created a service instance</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //of com.sun.star.configuration.ConfigurationUpdateAccess which supports</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //com.sun.star.container.XNameAccess. We obtain now the section</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //of the registry which is assigned to this options page.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet xLeaf = (XPropertySet) UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet.class, m_xAccessLeaves.getByName(sWindowName));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  if (xLeaf == null)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw new Â com.sun.star.uno.Exception(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "XPropertySet not supported.", this);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //The properties in the registry have the same name as the respective</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //controls. We use the names now to obtain the property values.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Object aValue = xLeaf.getPropertyValue(m_arStringControls[i]);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //Now that we have the value we need to set it at the corresponding</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //control in the window. The XControlContainer, which we obtained earlier</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //is the means to get hold of all the controls.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XControl xControl = xContainer.getControl(m_arStringControls[i]);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //This generic handler and the corresponding registry schema support</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //up to five text controls. However, if a options page does not use all</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //five controls then we will not complain here.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  if (xControl == null)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  continue;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //From the control we get the model, which in turn supports the</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //XPropertySet interface, which we finally use to set the data at the</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //control</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet xProp = (XPropertySet) UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet.class, xControl.getModel());</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  if (xProp == null)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw new com.sun.star.uno.Exception(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Could not get XPropertySet from control.", this);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //This handler supports only text controls, which are named "Pattern Field"</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  //in the dialog editor. We set the "Text" property.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xProp.setPropertyValue("Text", aValue);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  //Checks if the name property of the window is one of the supported names and returns</p>
  <p class="Code">Â  Â  Â  Â  //always a valid string or null</p>
  <p class="Code">Â  Â  Â  Â  private String getWindowName(com.sun.star.awt.XWindow aWindow)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  throws com.sun.star.uno.Exception {</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (aWindow == null)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  new com.sun.star.lang.IllegalArgumentException(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Method external_event requires that a window is passed as argument",</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  this, (short) -1);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //We need to get the control model of the window. Therefore the first step is</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //to query for it.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XControl xControlDlg = (XControl) UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XControl.class, aWindow);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (xControlDlg == null)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  throw new com.sun.star.uno.Exception(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Cannot obtain XControl from XWindow in method external_event.");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //Now get model</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XControlModel xModelDlg = xControlDlg.getModel();</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (xModelDlg == null)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  throw new com.sun.star.uno.Exception(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Cannot obtain XControlModel from XWindow in method external_event.", this);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //The model itself does not provide any information except that its</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //implementation supports XPropertySet which is used to access the data.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XPropertySet xPropDlg = (XPropertySet) UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet.class, xModelDlg);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (xPropDlg == null)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  throw new com.sun.star.uno.Exception(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Cannot obtain XPropertySet from window in method external_event.", this);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //Get the "Name" property of the window</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object aWindowName = xPropDlg.getPropertyValue("Name");</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //Get the string from the returned com.sun.star.uno.Any</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  String sName = null;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  sName = AnyConverter.toString(aWindowName);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  } catch (com.sun.star.lang.IllegalArgumentException e) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  throw new com.sun.star.uno.Exception(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "Name - property of window is not a string.", this);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //Eventually we can check if we this handler can "handle" this options page.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //The class has a member m_arWindowNames which contains all names of windows</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //for which it is intended</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  for (int i = 0; i &lt; m_arWindowNames.length; i++) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  if (m_arWindowNames[i].equals(sName)) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return sName;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  return null;</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  </p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  /**</p>
  <p class="Code">Â  Â  Â * Gives a factory for creating the service.</p>
  <p class="Code">Â  Â  Â * This method is called by the &lt;code&gt;JavaLoader&lt;/code&gt;</p>
  <p class="Code">Â  Â  Â * &lt;p&gt;</p>
  <p class="Code">Â  Â  Â * @return Â returns a &lt;code&gt;XSingleComponentFactory&lt;/code&gt; for creating</p>
  <p class="Code">Â  Â  Â * Â  Â  Â  Â  Â the component</p>
  <p class="Code">Â  Â  Â * @param Â  sImplName the name of the implementation for which a</p>
  <p class="Code">Â  Â  Â * Â  Â  Â  Â  Â service is desired</p>
  <p class="Code">Â  Â  Â * @see Â  Â  com.sun.star.comp.loader.JavaLoader</p>
  <p class="Code">Â  Â  Â */</p>
  <p class="Code">Â  Â  public static XSingleComponentFactory __getComponentFactory(String sImplName)</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  XSingleComponentFactory xFactory = null;</p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  if ( sImplName.equals( _OptionsEventHandler.class.getName() ) )</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xFactory = Factory.createComponentFactory(_OptionsEventHandler.class,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â _OptionsEventHandler.getServiceNames());</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  return xFactory;</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  /**</p>
  <p class="Code">Â  Â  Â * Writes the service information into the given registry key.</p>
  <p class="Code">Â  Â  Â * This method is called by the &lt;code&gt;JavaLoader&lt;/code&gt;</p>
  <p class="Code">Â  Â  Â * &lt;p&gt;</p>
  <p class="Code">Â  Â  Â * @return Â returns true if the operation succeeded</p>
  <p class="Code">Â  Â  Â * @param Â  regKey the registryKey</p>
  <p class="Code">Â  Â  Â * @see Â  Â  com.sun.star.comp.loader.JavaLoader</p>
  <p class="Code">Â  Â  Â */</p>
  <p class="Code">Â  Â  public static boolean __writeRegistryServiceInfo(XRegistryKey regKey) {</p>
  <p class="Code">Â  Â  Â  Â  return Factory.writeRegistryServiceInfo(_OptionsEventHandler.class.getName(),</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  _OptionsEventHandler.getServiceNames(),</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  regKey);</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  /** This method is a member of the interface for initializing an object</p>
  <p class="Code">Â  Â  Â * directly after its creation.</p>
  <p class="Code">Â  Â  Â * @param object This array of arbitrary objects will be passed to the</p>
  <p class="Code">Â  Â  Â * component after its creation.</p>
  <p class="Code">Â  Â  Â * @throws Exception Every exception will not be handled, but will be</p>
  <p class="Code">Â  Â  Â * passed to the caller.</p>
  <p class="Code">Â  Â  Â */</p>
  <p class="Code">Â  Â  public void initialize( Object[] object )</p>
  <p class="Code">Â  Â  Â  Â  throws com.sun.star.uno.Exception {</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  Â  </p>
  <p class="Code">}Â </p>
  <h2 class="Head2"><a name="1_13_Defining_the_Usage_of_Options_Pages" />5.13Â Â Defining the Usage of Options Pages</h2>
  <p class="Paragraph">It needs to be defined somewhere how the options dialog shall display the options pages for particular extensions. This information needs to be provided by the extensions in form of a xcu file which contains the appropriate registry entries. The schema is already provided in the office installation. The file is:Â </p>
  <p class="Paragraph">&lt;office&gt;/share/registry/schema/org/openoffice/Office/OptionsDialog.xcs. Here are the relevant parts for the options pages:Â </p>
  <p class="Code">&lt;oor:component-schema xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" oor:name="OptionsDialog" oor:package="org.openoffice.Office" xml:lang="en-US"&gt; Â </p>
  <p class="Code">Â  &lt;templates&gt;</p>
  <p class="Code">Â  Â  &lt;group oor:name="Module"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;desc&gt;Defines a Module. The options dialog displays entries in its tree</p>
  <p class="Code">Â  Â  Â  Â   Â view only if they are defined to belong to the Module for which the </p>
  <p class="Code">Â  Â  Â  Â   Â options dialog is being displayed. The exception is the options dialog </p>
  <p class="Code">Â  Â  Â  Â   Â which is invoked from the Extension Manager, where the Module is </p>
  <p class="Code">Â  Â  Â  Â   Â irrelevant.&lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  &lt;set oor:name="Nodes" oor:node-type="OrderedNode"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;desc&gt;A set member countains a Node (see type Node) which has been </p>
  <p class="Code">Â  Â  Â  Â   Â  Â assigned to this Module. Also entities which do not own the Module </p>
  <p class="Code">Â  Â  Â  Â   Â  Â may add members to the set. Please look at the specification for </p>
  <p class="Code">Â  Â  Â  Â   Â  Â applying restrictions</p>
  <p class="Code">Â  Â  Â  Â   Â  Â (http://specs.openoffice.org/appwide/packagemanager/options_dialog_for_extensions.odt)</p>
  <p class="Code">Â  Â  Â  Â   Â  Â The actual Node|s are kept in a separate set (OptionsDialog/Nodes),</p>
  <p class="Code">Â  Â  Â  Â   Â  Â to prevent redundancy, because a Node can be assigned to several </p>
  <p class="Code">Â  Â  Â  Â   Â  Â Module|s. The position of a node (the tree view element) within the </p>
  <p class="Code">Â  Â  Â  Â   Â  Â tree view of the options dialog is determined by the property Index </p>
  <p class="Code">Â  Â  Â  Â   Â  Â of each set member. The position can be different dependent on the </p>
  <p class="Code">Â  Â  Â  Â   Â  Â Module. Therefore the order is determined per Module. Only the owner </p>
  <p class="Code">Â  Â  Â  Â   Â  Â of the Module should set the position (property Index).</p>
  <p class="Code">Â  Â  Â  Â   Â  Â The order is undefined if two or more members have the same value for </p>
  <p class="Code">Â  Â  Â  Â   Â  Â the Index property.</p>
  <p class="Code">Â  Â  Â  Â   Â  Â See also the description for OrderedNode.</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/set&gt;</p>
  <p class="Code">Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  &lt;group oor:name="Node"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;desc&gt;Defines a node (the tree view element) which can be displayed in </p>
  <p class="Code">Â  Â  Â  Â   Â the tree view of the options dialog.&lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="Label" oor:type="xs:string" oor:localized="true" </p>
  <p class="Code">Â  Â  Â  Â   Â  Â oor:nillable="false"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;desc&gt;The localized name which is displayed next to the node in the </p>
  <p class="Code">Â  Â  Â  Â   Â  Â options dialog. If two different nodes (the tree view element) happen </p>
  <p class="Code">Â  Â  Â  Â   Â  Â to have the same localized name then both are displayed.&lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="OptionsPage" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;desc&gt;URL which references the dialog editor resource. This options </p>
  <p class="Code">Â  Â  Â  Â   Â page should only contain information for the user and should not </p>
  <p class="Code">Â  Â  Â  Â   Â accept input.&lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="AllModules" oor:type="xs:boolean"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;desc&gt;If true then this Node shall be displayed independent of the </p>
  <p class="Code">Â  Â  Â  Â   Â  Â Module for which the options dialog is displayed - Â that is, always. </p>
  <p class="Code">Â  Â  Â  Â   Â  Â In this case it must not be assigned directly to one ore more </p>
  <p class="Code">Â  Â  Â  Â   Â  Â Module|s. That is, it must not exist as member in Module/Nodes of no</p>
  <p class="Code">Â  Â  Â  Â   Â  Â existing Module. </p>
  <p class="Code">Â  Â  Â  Â   Â  Â This is an optimization so that an extension need not provide </p>
  <p class="Code">Â  Â  Â  Â   Â  Â entries for all Module|s. </p>
  <p class="Code">Â  Â  Â  Â   Â  Â The default value is false.</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;value&gt;false&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="GroupId" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;desc&gt;Identifies a group of Node|s. All nodes (the tree view elements) </p>
  <p class="Code">Â  Â  Â  Â   Â  Â which refer to the same group are displayed next to each other. If </p>
  <p class="Code">Â  Â  Â  Â   Â  Â this property is set then GroupIndex must also have a value. The </p>
  <p class="Code">Â  Â  Â  Â   Â  Â group will be used by Node|s which have been added to existing </p>
  <p class="Code">Â  Â  Â  Â   Â  Â Module|s. If one defines a Module AND Node|s which are used in this </p>
  <p class="Code">Â  Â  Â  Â   Â  Â Module, then GroupId must not be set. In this case one uses </p>
  <p class="Code">Â  Â  Â  Â   Â  Â Module/Nodes/Index to determine the position of the nodes (the tree </p>
  <p class="Code">Â  Â  Â  Â   Â  Â view element).</p>
  <p class="Code">Â  Â  Â  Â   Â  Â The empty string is no valid identifier and represents nil.</p>
  <p class="Code">Â  Â  Â  Â   Â  Â See also GroupIndex.</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;value&gt;&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="GroupIndex" oor:type="xs:int"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;desc&gt;The index of the Node within the group. The index starts with </p>
  <p class="Code">Â  Â  Â  Â   Â  Â null. If this property is set then property GroupId must also have </p>
  <p class="Code">Â  Â  Â  Â   Â  Â a value. If a Node of this group is displayed depends on the </p>
  <p class="Code">Â  Â  Â  Â   Â  Â respective Module to which it is assigned. For example, if there are </p>
  <p class="Code">Â  Â  Â  Â   Â  Â the Nodes A(index 0), B (index 1), and C (index 2) in a group, </p>
  <p class="Code">Â  Â  Â  Â   Â  Â and B is assigned to a different Module, then only A and </p>
  <p class="Code">Â  Â  Â  Â   Â  Â B are displayed together although there indices are 0 and 2 (B has 1).</p>
  <p class="Code">Â  Â  Â  Â   Â  Â The value -1 is regarded as nil.</p>
  <p class="Code">Â  Â  Â  Â   Â  Â Actually one could have allowed to define a group per Module, so that </p>
  <p class="Code">Â  Â  Â  Â   Â  Â the order could be different depending on the Module. But this would </p>
  <p class="Code">Â  Â  Â  Â   Â  Â have added more complexity to the data structures.</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;value&gt;-1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;set oor:name="Leaves" oor:node-type="Leaf"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;desc&gt;Leaves which are assigned to this node. Extensions can add to this </p>
  <p class="Code">Â  Â  Â  Â   Â  Â set new Leaf|s.&lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/set&gt;</p>
  <p class="Code">Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  &lt;group oor:name="Leaf"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;desc&gt;Defines a leaf (the tree view element). A Leaf must be assigned to </p>
  <p class="Code">Â  Â  Â  Â   Â exactly one Node. &lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="Id" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;desc&gt;The unique identifier of the Leaf. This must be the extension </p>
  <p class="Code">Â  Â  Â  Â   Â  Â identifier if this Leaf was defined by an extension.&lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="Label" oor:type="xs:string" oor:localized="true" </p>
  <p class="Code">Â  Â  Â  Â   Â  Â oor:nillable="false"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;desc&gt;The localized name that is displayed for the leaf in the options </p>
  <p class="Code">Â  Â  Â  Â   Â  Â dialog.&lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="OptionsPage" oor:type="xs:string" oor:nillable="false"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;desc&gt;A URL which references the window resource.&lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="EventHandlerService" oor:type="xs:string" oor:nillable="false"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;desc&gt;Name of the event handler service which is used as argument in </p>
  <p class="Code">Â  Â  Â  Â   Â  Â com.sun.star.awt.XContainerWindowProvider.createContainerWindow. This </p>
  <p class="Code">Â  Â  Â  Â   Â  Â handler does not even process events from the dialog but also </p>
  <p class="Code">Â  Â  Â  Â   Â  Â provides for saving and reading the respective values.&lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="GroupId" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;desc&gt;Identifies a group of Leaf|s. All Leaf|s which have the same </p>
  <p class="Code">Â  Â  Â  Â   Â  Â GroupId form a group and the corresponding entries in the tree view</p>
  <p class="Code">Â  Â  Â  Â   Â  Â are displayed next to each other.</p>
  <p class="Code">Â  Â  Â  Â   Â  Â If this property is set then the property GroupIndex must</p>
  <p class="Code">Â  Â  Â  Â   Â  Â also be set.</p>
  <p class="Code">Â  Â  Â  Â   Â  Â The GroupIndex represents the position within the group. If one </p>
  <p class="Code">Â  Â  Â  Â   Â  Â owns the Node (e.g. defined it oneself) then one can set the GroupId </p>
  <p class="Code">Â  Â  Â  Â   Â  Â to the name of the Node to which this Leaf is assigned. The Leaf|s of </p>
  <p class="Code">Â  Â  Â  Â   Â  Â this particular group are displayed first under the node (the tree </p>
  <p class="Code">Â  Â  Â  Â   Â  Â view element) before any other groups.</p>
  <p class="Code">Â  Â  Â  Â   Â  Â If one does not own the Node then one should not use the Node name as </p>
  <p class="Code">Â  Â  Â  Â   Â  Â group id.</p>
  <p class="Code">Â  Â  Â  Â   Â  Â The empty string is regarded as nil.</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;value&gt;&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="GroupIndex" oor:type="xs:int"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;desc&gt;The index of the Leaf within the group. The index starts with </p>
  <p class="Code">Â  Â  Â  Â   Â  Â null. If this property is set then GroupId must also have </p>
  <p class="Code">Â  Â  Â  Â   Â  Â a value. If there are two Leaf|s with the same index in the same </p>
  <p class="Code">Â  Â  Â  Â   Â  Â group then then their order is undefined.</p>
  <p class="Code">Â  Â  Â  Â   Â  Â The value -1 is regarded as nil.&lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;value&gt;-1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  &lt;group oor:name="OrderedNode"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;desc&gt;Represents a reference to a Node and an optional index. </p>
  <p class="Code">Â  Â  Â  Â   Â Instances of this type are used in a set (see Module). The name of the </p>
  <p class="Code">Â  Â  Â  Â   Â set member must be the same as the one of the respective Node. The </p>
  <p class="Code">Â  Â  Â  Â   Â index determines the position of the node (the tree view element) in </p>
  <p class="Code">Â  Â  Â  Â   Â the options dialog for a particular Module.&lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="Index" oor:type="xs:int"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;desc&gt;Determines the position of the node in the options dialog. </p>
  <p class="Code">Â  Â  Â  Â   Â  Â The index starts with null. That is, the corresponding node </p>
  <p class="Code">Â  Â  Â  Â   Â  Â appears at the first position in the tree view of the options dialog.</p>
  <p class="Code">Â  Â  Â  Â   Â  Â If the value is -1 then the index is undefined. If one adds</p>
  <p class="Code">Â  Â  Â  Â   Â  Â Node|s to a Module which one does not define oneself (e.g. the Module</p>
  <p class="Code">Â  Â  Â  Â   Â  Â is owned by someone else), then one must not set the Index. This </p>
  <p class="Code">Â  Â  Â  Â   Â  Â applies, for example, to extensions which add their Node|s to existing </p>
  <p class="Code">Â  Â  Â  Â   Â  Â Module|s.</p>
  <p class="Code">Â  Â  Â  Â   Â  Â The value -1 is regarded as nil.</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;value&gt;-1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  &lt;/templates&gt;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  &lt;component&gt;</p>
  <p class="Code">Â  Â  &lt;set oor:name="Modules" oor:node-type="Module"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;desc&gt;List of availabe application contexts&lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  &lt;/set&gt;</p>
  <p class="Code">Â  Â  &lt;set oor:name="Nodes" oor:node-type="Node"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;info&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;desc&gt;List of available nodes.&lt;/desc&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/info&gt;</p>
  <p class="Code">Â  Â  &lt;/set&gt;</p>
  <p class="Code">Â  &lt;/component&gt;</p>
  <p class="Code">&lt;/oor:component-schema&gt;Â </p>
  <p class="Code">Â </p>
  <h3 class="Head3"><a name="1_13_1_The_Options_Dialog_of_the_Extension_Manager" />5.13.1Â Â The Options Dialog of the Extension Manager</h3>
  <p class="P15">The options dialog which is invoked from the Extension Manager only shows Â nodes with leaves which have been added by the currently selected extensions. Â The dialog has no particular application context, so that all nodes are displayed, independent of the application contexts which they are assigned to.</p>
  <h3 class="Head3"><a name="1_13_2_Adding_a_Leaf_to_an_Existing_Node" />5.13.2Â Â Adding a Leaf to an Existing Node</h3>
  <p class="Paragraph">Let us start with something simple and assume that we want to add a leaf under the âOpenOffice.orgâ writer node. Â The <span class="Emphasis">leaves</span> and <span class="Emphasis">nodes</span>, which we are talking about, appear in the tree view of the options dialog on the left side. A leaf has the meaning of an entry which cannot be expanded further. Â Selecting a leaf will cause the options page being displayed on the right side. Â Please do not confuse these node and leaves with the elements from the schema. The latter use uppercase names and the plural is indicated using a pipe symbol, such as âNode|sâ. There is also a xml element Â ânodeâ in the xcu file. In case the meaning is unclear in the respective context, we will add small note.</p>
  <p class="Paragraph">The schema in the OptionsDialog.xcs defines two sets which we can add to. One contains <span class="Codeintext">Modules</span>, which we do not need at the moment, and the other contains <span class="Codeintext">Nodes</span>, which is the place we will add to. As the name suggest, it contains <span class="Codeintext">Node</span>|s and not <span class="Codeintext">Leaf</span>|s. But every <span class="Codeintext">Node</span> contains a set of <span class="Codeintext">Leaf</span>|s, which is named <span class="Codeintext">Leaves</span>. This means, that we have to add a <span class="Codeintext">Leaf</span> to the <span class="Codeintext">Leaves</span> set of the writer <span class="Codeintext">Node</span>. This is done by putting the following xcu file into the extension (do not forget to add the corresponding entry into the manisfest.xml) .</p>
  <p class="Code">&lt;?xml version='1.0' encoding='UTF-8'?&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">&lt;!DOCTYPE oor:component-data SYSTEM "../../../../component-update.dtd"&gt;Â </p>
  <p class="Code">&lt;oor:component-data oor:name="OptionsDialog" oor:package="org.openoffice.Office" xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â &lt;node oor:name="Nodes"&gt;</p>
  <p class="Code">Â  Â  &lt;node oor:name="Writer" oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="Leaves"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.leaf1" </p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;prop oor:name="Id"&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â  Â &lt;value&gt;org.openoffice/framework/desktop/test/deployment/options/leaf1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;prop oor:name="Label"&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â  Â &lt;value xml:lang="en-US"&gt;Writer leaf1 en-US&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;prop oor:name="OptionsPage"&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â  Â &lt;value&gt;%origin%/dialogs/writer1/Writer1.xdl&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;prop oor:name="EventHandlerService"&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â  Â &lt;value&gt;com.sun.star.comp.extensionoptions.DialogHandler&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/oor:component-data&gt; Â </p>
  <p class="Paragraph">In the following examples I will leave out the <span class="Codeintext">xml</span>, <span class="Codeintext">doctype</span> and <span class="Codeintext">root</span> element so we can focus on the relevant parts. In the previous example we see the lines:</p>
  <p class="Code">&lt;node oor:name="Nodes"&gt;Â </p>
  <p class="Code">Â  Â  &lt;node oor:name="Writer" oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="Leaves"&gt;</p>
  <p class="Code">Â </p>
  <p class="Paragraph">The first line represents the set <span class="Codeintext">Nodes</span>. The second line shows that we add to the writer <span class="Codeintext">Node</span>. And the last line represents the Â <span class="Codeintext">Leaves</span> set within the writer <span class="Codeintext">Node</span>. Â The names of <span class="Codeintext">Node</span>|s should be unique, Â as we will see later. Â The name is the value of the oor:name attribute of the set entry. That is, there is no special property ânameâ. Â The names for already existing <span class="Codeintext">Node</span>|s and <span class="Codeintext">Module</span>|s Â are rather short and are reserved exclusively for the office. The list of those names can be found here:</p>
  <p class="P19"><a href="http://replay.waybackmachine.org/20080924043146/http://wiki.services.openoffice.org/wiki/Framework/Article/Options_Dialog_Configuration">http://wiki.services.openoffice.org/wiki/Framework/Article/Options_Dialog_Configuration</a></p>
  <p class="Paragraph">Currently the already existing nodes are not defined in the registry (but may be in future versions). Therefore, the node <span class="Codeintext">Writer,</span><span class="DefaultParagraph"> which is a set entry</span><span class="Codeintext">,</span>may not exist yet, unless another extension has already added to this node. To make sure that there is this node we use the operation <span class="Codeintext">fuse</span>. Â <span class="Codeintext">Leaves</span> is the set within a <span class="Codeintext">Node</span> (the type defined in the templates section of the schema) to which we add our leaf:</p>
  <p class="Code">&lt;node oor:name="Leaves"&gt;Â </p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.leaf1" </p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;prop oor:name="Id"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;value&gt;org.openoffice/framework/desktop/test/deployment/options/leaf1&lt;/value&gt;</p>
  <p class="Code">Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  &lt;prop oor:name="Label"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;value xml:lang="en-US"&gt;Writer leaf1 en-US&lt;/value&gt;</p>
  <p class="Code">Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  &lt;prop oor:name="OptionsPage"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;value&gt;%origin%/dialogs/writer1/Writer1.xdl&lt;/value&gt;</p>
  <p class="Code">Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  &lt;prop oor:name="EventHandlerService"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;value&gt;com.sun.star.comp.extensionoptions.DialogHandler&lt;/value&gt;</p>
  <p class="Code">Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/node&gt;Â </p>
  <p class="Paragraph">When we add to a set then we must provide a unique name for the oor:name attribute of the node element. We did this by calling it: Â  Â org.openoffice.framework.desktop.test.deployment.options.leaf1</p>
  <p class="Paragraph">It is always good to use long names to ensure uniqueness. Â Starting with the reversed domain name is a good practice, because most developers or companies own a domain, which is already unique. Â Node names must use ASCII letters and special characters must be âxml encodedâ. That is signs, such as â&lt;â, â&gt;â, â&amp;â, etc must be replaced by â&amp;lt;â , â&amp;gt;â, â&amp;amp;â , etc. This is also valid for all other xml attribute values or the text between enclosing xml elements. Our leaf node also uses the <span class="Codeintext">fuse</span> operator, to ensure that it is added to the set. </p>
  <p class="Paragraph">It is also useful to avoid â/â within oor:name. This will make it harder when using the API to access the values (see <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XHierarchicalNameAccess.html" title="see type com.sun.star.container.XHierarchicalNameAccess">com.sun.star.container.XHierarchicalNameAccess</a>). Then one need to Â encode the name in a particular way. See chapter <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Config/Config.xhtml#1_1_2_Architecture" title="see chapter 16.1.2 Configuration Management - Overview - Architecture">16.1.2 Configuration Management - Overview - Architecture</a>.</p>
  <p class="P15">The value of the property <span class="Codeintext">Id</span> must be same as the extension identifier. The identifier is used to locate the leaves which belong to a particular extension. This happens when the options dialog is started in the Extension Manager. In this case only the entries for the selected extension are displayed.</p>
  <p class="Paragraph">The property <span class="Codeintext">Label</span> contains the string which appears in the tree view. One can provide many different localized strings. However it is good to have at least an en-US string, which will be used as default in case there is no string which locale matches that of the office.</p>
  <p class="Paragraph">The property <span class="Codeintext">OptionsPage</span> contains the URL to the xdl file of the dialog which shall appear when the user selects the corresponding entry in the tree view. Please note that it always starts with <span class="Codeintext">%origin%</span> and is followed by the relative path to the file.</p>
  <p class="Paragraph">The property <span class="Codeintext">EventHandlerService</span> contains the service name of the handler, which is also contained in the extension. Â One should take care to choose a unique name. It is not necessary to provide any IDL description or type library for the service.</p>
  <h3 class="Head3"><a name="1_13_3_Adding_Several_Leaves" />5.13.3Â Â Adding Several Leaves</h3>
  <p class="Paragraph">It may be necessary to add more then one leaf. This is easily done by just writing the next leaf definition after the previous: Â </p>
  <p class="Code">&lt;node oor:name="Nodes"&gt;Â </p>
  <p class="Code">Â  &lt;node oor:name="Writer" oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;node oor:name="Leaves"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="oorg.openoffice.framework.desktop.test.deployment.options.leaves3.Writer.3" Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;!-- leaving out the properties for the sake of brevity --&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.leaves3.Writer.1" Â  </p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;!-- leaving out the properties for the sake of brevity --&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.leaves3.Writer.2"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â &lt;/node&gt;</p>
  <p class="Code">Â  &lt;node oor:name="Calc" oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;node oor:name="Leaves"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.leaves3.Calc.3" </p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;!-- leaving out the properties for the sake of brevity --&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.leaves3.Calc.1" Â </p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;!-- leaving out the properties for the sake of brevity --&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.leaves3.Calc.2" </p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;!-- leaving out the properties for the sake of brevity --&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/node&gt;Â </p>
  <p class="Paragraph">In the example we have also added three other <span class="Codeintext">Leaf</span>|s to the Calc <span class="Codeintext">Node</span>.</p>
  <p class="Standard">Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table16"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table16A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./5 Extensions_files/important.gif" class="fr2" /></div>
     </td><td style="text-align:left;width:15.529cm; " class="Table16B1">
      <p class="TipInTable">One <span class="Codeintext">Leaf</span> can only be assigned to exactly one <span class="Codeintext">Node</span>. Â If there is no suitable existing <span class="Codeintext">Node</span> which is displayed in all options dialogs where one needs to display the own <span class="Codeintext">Leaf</span>, then one should define a <span class="Codeintext">Node</span> oneself and assign the <span class="Codeintext">Leaf</span> to it.</p>
     </td></tr></table></div>
  <p class="P20">Â </p>
  <h3 class="Head3"><a name="1_13_4_Grouping_of_Leaves" />5.13.4Â Â Grouping of Leaves</h3>
  <p class="Paragraph">When we add several <span class="Codeintext">Leaf</span>|s to the same <span class="Codeintext">Node</span> then we may wish to determine in which order Â they appear. Â This is done by using the properties <span class="Codeintext">GroupId</span> and Â <span class="Codeintext">GroupIndex </span>in<span class="Codeintext"> Leaf</span>. The <span class="Codeintext">GroupId</span> is used to define a group. All <span class="Codeintext">Leaf</span>|s with the same <span class="Codeintext">GroupId</span> form this group. Â The <span class="Codeintext">GroupIndex</span> determines the position of the <span class="Codeintext">Leaf</span> with regard to this group. Â If there are multiple groups of <span class="Codeintext">Leaf</span>|s assigned to the same <span class="Codeintext">Node,</span> then it is undefined in which order the groups are displayed. However, the members of a group are always displayed contiguously . Â </p>
  <p class="Paragraph">The Â value for the <span class="Codeintext">GroupId</span> must be unique. One can use the same patter here as for the names of <span class="Codeintext">Leaf</span>|s, <span class="Codeintext">Node</span>|s, etc.</p>
  <p class="Paragraph">One special <span class="Codeintext">GroupId</span> is the one which has the same value as the <span class="Codeintext">Node</span> name. Â This group is always displayed first under the node in the tree view. We will get to that later.</p>
  <p class="Paragraph">Usually, when an extension provides <span class="Codeintext">Leaf</span>|s which are all assigned to the same <span class="Codeintext">Node,</span> then one makes them belong to the same group.</p>
  <p class="Paragraph">Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table17"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table17A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./5 Extensions_files/important.gif" class="fr2" /></div>
     </td><td style="text-align:left;width:15.529cm; " class="Table17B1">
      <p class="TipInTable">Do not add to groups which you have not defined yourself. This may lead to clashing indices and is generally bad style.Â </p>
      <p class="TipInTable">Grouping <span class="Codeintext">Leaf</span>|s is optional. But when one does it, then all <span class="Codeintext">Leaf</span>|s should be part of a group.</p>
     </td></tr></table></div>
  <p class="Paragraph">Â </p>
  <p class="Code">&lt;node oor:name="Nodes"&gt;Â </p>
  <p class="Code">Â  &lt;node oor:name="Writer" oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;node oor:name="Leaves"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.leaves2.Writer.3"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="Id"&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â &lt;value&gt;org.openoffice/framework/desktop/test/deployment/options/leaves2&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;!-- leaving out some properties for the sake of brevity --&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="GroupId"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;org.openoffice.framework.desktop.test.deployment.options.leaves2.Writer.group&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="GroupIndex"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;2&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.leaves2.Writer.1"</p>
  <p class="Code">Â  Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="Id"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;org.openoffice/framework/desktop/test/deployment/options/leaves2&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;!-- leaving out some properties for the sake of brevity --&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="GroupId"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;org.openoffice.framework.desktop.test.deployment.options.leaves2.Writer.group&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="GroupIndex"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;value&gt;0&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.leaves2.Writer.2"</p>
  <p class="Code">Â  Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;prop oor:name="Id"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;value&gt;org.openoffice/framework/desktop/test/deployment/options/leaves2&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;!-- leaving out some properties for the sake of brevity --&gt;Â  Â  Â  Â   Â </p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;prop oor:name="GroupId"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;value&gt;org.openoffice.framework.desktop.test.deployment.options.leaves2.Writer.group&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;prop oor:name="GroupIndex"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt; Â </p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/node&gt;Â </p>
  <p class="Paragraph">Â </p>
  <h3 class="Head3"><a name="1_13_5_Adding_Nodes" />5.13.5Â Â Adding Nodes </h3>
  <p class="Paragraph">Apart from <span class="Codeintext">Leaf</span>|s one can also define one's own <span class="Codeintext">Node</span>|s. Â First we would like to define one simple <span class="Codeintext">Node</span> along with a few <span class="Codeintext">Leaf</span>|s:</p>
  <p class="Code">&lt;node oor:name="Nodes"&gt;Â </p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes2.node 3" </p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;prop oor:name="Label"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;value xml:lang="en-US"&gt;nodes2 node 3 en-US&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  &lt;value xml:lang="de"&gt;nodes2 node 3 de&lt;/value&gt;</p>
  <p class="Code">Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  &lt;prop oor:name="OptionsPage"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;value&gt;%origin%/dialogs/node3/page/node3.xdl&lt;/value&gt;</p>
  <p class="Code">Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  &lt;prop oor:name="AllModules"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;value&gt;true&lt;/value&gt;</p>
  <p class="Code">Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  &lt;node oor:name="Leaves"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes2.node 3.leaf 3"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;!-- leaving out some properties for the sake of brevity --&gt; Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes2.node 3.leaf 1"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;!-- leaving out some properties for the sake of brevity --&gt; Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes2.node 3.leaf 2"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;!-- leaving out some properties for the sake of brevity --&gt; Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/node&gt;Â </p>
  <p class="Paragraph">Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table18"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table18A1">
      <div class="TableContents"><img width="39" height="39" alt="Tip graphics marks a hint section in the text" src="./5 Extensions_files/tip.gif" class="fr2" /></div>
     </td><td style="text-align:left;width:15.529cm; " class="Table18B1">
      <p class="TipInTable">Nodes without any leaves are not displayed.Â </p>
     </td></tr></table></div>
  <p class="Paragraph"><span class="T9">Because a </span><span class="T13">Node</span><span class="T9"> is represented in the tree view with Â a string, it needs to provide a localized name the same as </span><span class="T13">Leaf</span><span class="T9">|s do. To do this we add under the property </span><span class="T13">Label</span><span class="T9"> several localized values.</span></p>
  <p class="Paragraph"><span class="T9">The property </span><span class="T13">O</span><span class="Codeintext">ptionsPage</span> has the same meaning as the same property in <span class="Codeintext">Leaf</span>. Â There is, however, the restriction that the options page must not take user input. Instead is should contain some explanatory words about the node.</p>
  <p class="Paragraph">The property <span class="Codeintext">AllModules</span> needs to be set to true when one wants that the <span class="Codeintext">Node</span> appears in the options dialog from all applications. Â Now, let me explain shortly the meaning of <span class="Codeintext">Module</span>, because it will be important for the definition of <span class="Codeintext">Node</span>|s. The options dialog opened from the Tools | Options... menu entry refers always to a particular <span class="Codeintext">Module</span>, which depends on the current application. Â All <span class="Codeintext">Node</span>|s can be assigned to one or multiple <span class="Codeintext">Module</span>|s. That is, a <span class="Codeintext">Node</span> may be defined to appear only in the options dialog of the Writer and Calc application. How this is done will be explained later. However, often one wishes to have the <span class="Codeintext">Node</span> displayed in every options dialog. To save the effort of assigning a <span class="Codeintext">Node</span> to all existing <span class="Codeintext">Module</span>|s separately, one can do this just once by setting the property of <span class="Codeintext">AllModules</span> to true. This is also useful in the case where new Â <span class="Codeintext">Module</span>|s are added later, because these new <span class="Codeintext">Module</span>|s would not know about those <span class="Codeintext">Nodes.</span></p>
  <p class="Paragraph">Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table19"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table19A1">
      <div class="TableContents"><img width="39" height="39" alt="Tip graphics marks a hint section in the text" src="./5 Extensions_files/tip.gif" class="fr2" /></div>
     </td><td style="text-align:left;width:15.529cm; " class="Table19B1">
      <p class="TipInTable">Only <span class="Codeintext">Node</span>|s which are assigned to a <span class="Codeintext">Module</span> are displayed. The assignment is done by adding a member to set Module/Nodes (this will be explained later) or by setting <span class="Codeintext">Node/AllModules</span> to true. The latter assigns the <span class="Codeintext">Node</span> to all <span class="Codeintext">Modul</span>|s.</p>
     </td></tr></table></div>
  <p class="Paragraph">Â </p>
  <h3 class="Head3"><a name="1_13_6_Adding_Several_Nodes" />5.13.6Â Â Adding Several Nodes</h3>
  <p class="Paragraph">As one might have imagined, adding several nodes is similar to adding various leaves. The definitions are just written one after the other: Â </p>
  <p class="Code">&lt;node oor:name="Nodes"&gt;Â </p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes2.node 3"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;!-- leaving out all properties and leaves for the sake of brevity --&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;node oor:name="oorg.openoffice.framework.desktop.test.deployment.options.nodes2.node 1"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;!-- leaving out all properties and leaves for the sake of brevity --&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes2.node 2"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;!-- leaving out all properties and leaves for the sake of brevity --&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/node&gt;Â </p>
  <h3 class="Head3"><a name="1_13_7_Absolute_Position_of_Leaves" />5.13.7Â Â Absolute Position of Leaves</h3>
  <p class="Paragraph">When one defines a <span class="Codeintext">Node</span> and <span class="Codeintext">Leaf</span>|s for this <span class="Codeintext">Node</span> at the same time then one would like to specify the position of those leaves as well. Â This can be done be defining group of <span class="Codeintext">Leaf</span>|s which has the same name as the <span class="Codeintext">Node</span> to which they are assigned. This group is special because its <span class="Codeintext">Leaf</span>|s are the first which appear under the corresponding node in the tree view. Otherwise the use of <span class="Codeintext">GroupIndex</span> and <span class="Codeintext">GroupId</span> is identical as explained in âGrouping of Leavesâ.</p>
  <p class="Paragraph">Â </p>
  <p class="Code">&lt;node oor:name="Nodes"&gt;Â </p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes2.node 3"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;!-- leaving out some properties for the sake of brevity --&gt; Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  &lt;node oor:name="Leaves"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes2.node 3.leaf 3"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="GroupId"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;org.openoffice.framework.desktop.test.deployment.options.nodes2.node 3&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="GroupIndex"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;2&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes2.node 3.leaf 1"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="GroupId"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;org.openoffice.framework.desktop.test.deployment.options.nodes2.node 3&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="GroupIndex"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;0&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes2.node 3.leaf 2"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="GroupId"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;org.openoffice.framework.desktop.test.deployment.options.nodes2.node 3&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="GroupIndex"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;2&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/node&gt;Â </p>
  <h3 class="Head3"><a name="1_13_8_Grouping_of_Nodes" />5.13.8Â Â Grouping of Nodes</h3>
  <p class="Paragraph">Similar to <span class="Codeintext">Leaf</span>|s, <span class="Codeintext">Node</span>|s can be grouped as well. For example, an extension Â would like to add three nodes to the options dialog of the Writer. Then one may want that these nodes are displayed contiguously. This will also be achieved by defining a group with the property <span class="Codeintext">GroupId</span> and an index with the property <span class="Codeintext">GroupIndex</span>. The index only determines the position within the group.</p>
  <p class="Paragraph">Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table20"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table20A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./5 Extensions_files/important.gif" class="fr2" /></div>
     </td><td style="text-align:left;width:15.529cm; " class="Table20B1">
      <p class="TipInTable">Do not add to groups which you have not defined yourself. This may lead to clashing indices and is generally bad style.Â </p>
      <p class="TipInTable">Grouping <span class="Codeintext">Node</span>|s is optional. But when one does it, then all <span class="Codeintext">Node</span>|s should be part of a group.</p>
     </td></tr></table></div>
  <p class="Paragraph">Â </p>
  <p class="Code">&lt;node oor:name="Nodes"&gt;Â </p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes2.node 3"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;!-- leaving out some properties for the sake of brevity --&gt; </p>
  <p class="Code">Â  Â  &lt;prop oor:name="GroupId"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;value&gt;org.openoffice.framework.desktop.test.deployment.options.nodes2.group&lt;/value&gt;</p>
  <p class="Code">Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  &lt;prop oor:name="GroupIndex"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;value&gt;2&lt;/value&gt;</p>
  <p class="Code">Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  &lt;!-- Next Node --&gt;</p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes2.node 1"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;!-- leaving out some properties for the sake of brevity --&gt; </p>
  <p class="Code">Â  Â  &lt;prop oor:name="GroupId"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;value&gt;org.openoffice.framework.desktop.test.deployment.options.nodes2.group&lt;/value&gt;</p>
  <p class="Code">Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  &lt;prop oor:name="GroupIndex"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;value&gt;0&lt;/value&gt;</p>
  <p class="Code">Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes2.node 2"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;!-- leaving out some properties for the sake of brevity --&gt; </p>
  <p class="Code">Â  Â  &lt;prop oor:name="GroupId"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;value&gt;org.openoffice.framework.desktop.test.deployment.options.nodes2.group&lt;/value&gt;</p>
  <p class="Code">Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  &lt;prop oor:name="GroupIndex"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;value&gt;1&lt;/value&gt;</p>
  <p class="Code">Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/node&gt;Â </p>
  <p class="Paragraph">The ordering of <span class="Codeintext">Node</span>|s within a group is basically the same as with <span class="Codeintext">Leaf</span>|s. Â But there is a small difference. In contrast to <span class="Codeintext">Leaf</span>|s, <span class="Codeintext">Node</span>|s can be assigned to various <span class="Codeintext">Module</span>|s, whereas as <span class="Codeintext">Leaf</span> can only be assigned to one <span class="Codeintext">Node</span>. Â So actually one could define an order of <span class="Codeintext">Node</span>|s per <span class="Codeintext">Module</span>. The order could then differ depending on the <span class="Codeintext">Module</span>. For example, we define <span class="Codeintext">Node</span> A and B which are assigned to the âWriterâ <span class="Codeintext">Module</span> (actually the names for the modules are longer, for example, com.sun.star.text.TextDocument) and the âCalcâ <span class="Codeintext">Module</span>. We could define that in the options dialog of the Writer node A is before B and in the options dialog of Calc B is before A. </p>
  <p class="Paragraph">This would have added some more complexity to the data structures. With respect to the ease of use we decided for a compromise. Â One can only define one order independent of the <span class="Codeintext">Module</span>. Â In the previous example Â the nodes A and B would have the same order in the Writer's and Calc's options dialog. Â But what if one <span class="Codeintext">Node</span> is not assigned to a Â particular <span class="Codeintext">Module</span> but the others are? For example, there are the <span class="Codeintext">Node</span>|s A, B, C which have the indices 0, 1, 2. Only A and C are assigned to the âWriterâ <span class="Codeintext">Module</span>. Then in the options dialog of the Writer the node A would immediately followed by C.</p>
  <h3 class="Head3"><a name="1_13_9_Assigning_Nodes_to_Modules" />5.13.9Â Â Assigning Nodes to Modules</h3>
  <p class="Paragraph">In the previous paragraphs we have explained what has to be done so that a node appears in the options dialog of an application no matter what the application is. Â Now we will explain how one can pick out the application where the node should appear. </p>
  <p class="Paragraph">Having a look at the schema of the OtionsDialog.xcs one notices that there is another set, named <span class="Codeintext">Modules</span>, to which we can add entries which then determine where the nodes are displayed. Â  If one does not care for a particular application then one should use the <span class="Codeintext">AllModules</span> property of the <span class="Codeintext">Node</span>, so that they are always displayed.</p>
  <p class="Standard">Â </p>
  <p class="Code">&lt;node oor:name="Modules"&gt;Â </p>
  <p class="Code">Â  &lt;node oor:name="com.sun.star.text.TextDocument" oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;node oor:name="Nodes"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes4.node 1"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes4.node 2"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;node oor:name="com.sun.star.sheet.SpreadsheetDocument" oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;node oor:name="Nodes"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes4.node 1"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/node&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">&lt;node oor:name="Nodes"&gt;Â </p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes4.node 1"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;!-- leaving out some properties for the sake of brevity --&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.nodes4.node 2"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;!-- leaving out some properties for the sake of brevity --&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/node&gt;Â </p>
  <p class="Paragraph">The example shows the definition of two <span class="Codeintext">Node</span>|s. Both are displayed in the options dialog of the Writer but only ânode 1â is displayed in the options dialog of Calc. This demonstrates also that a node can be assigned to various <span class="Codeintext">Module</span>|s.</p>
  <p class="Paragraph">The names of the application contexts defined by OOo can be found here:Â </p>
  <p class="P15"><a href="http://replay.waybackmachine.org/20080924043146/http://wiki.services.openoffice.org/wiki/Framework/Article/Options_Dialog_Configuration">http://wiki.services.openoffice.org/wiki/Framework/Article/Options_Dialog_Configuration</a></p>
  <h3 class="Head3"><a name="1_13_10_Defining_a_Module" />5.13.10Â Â Defining a Module</h3>
  <p class="Paragraph">It is possible to define a <span class="Codeintext">Module</span> of one's own. How an extension can provide a real module (not the type <span class="Codeintext">Module</span>) is not part of this documentation. However, if this module does not exist, there wonÂ´t be an options dialog on behalf of this module and the <span class="Codeintext">Node</span>|s assigned to it are not displayed. Only the Â options dialog from the Extension Manager may show the nodes because it does not depend on a particular module. </p>
  <p class="Paragraph">Here is an example of defining a <span class="Codeintext">Module</span>.</p>
  <p class="Paragraph">Â </p>
  <p class="Paragraph">Â </p>
  <p class="Code">&lt;node oor:name="Modules"&gt;Â </p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.modules1.module1"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.modules1.module2"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/node&gt;Â </p>
  <h3 class="Head3"><a name="1_13_11_Absolute_Position_of_Nodes" />5.13.11Â Â Absolute Position of Nodes</h3>
  <p class="Paragraph">If one defines an own <span class="Codeintext">Module</span>, then it is possible to define an order for the <span class="Codeintext">Node</span>|s which one assigns to it. These <span class="Codeintext">Node</span>|s will be the first which are displayed in the options dialog followed by the <span class="Codeintext">Node</span>|s which have been assigned by others.</p>
  <p class="Paragraph">For example:Â </p>
  <p class="Code">&lt;node oor:name="Modules"&gt;Â </p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.modules1.module1"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;node oor:name="Nodes"&gt; Â  </p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.modules1.node 1"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="Index"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;0&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.modules1.node 2"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="Index"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.modules1.node 3"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="Index"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;2&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.modules1.module2"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;node oor:name="Nodes"&gt; Â  </p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.modules1.node 1"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="Index"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;0&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.modules1.node 3"</p>
  <p class="Code">Â  Â  Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name="Index"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/node&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">&lt;node oor:name="Nodes"&gt;Â </p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.modules1.node 3"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;!-- leaving out some properties for the sake of brevity --&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.modules1.node 1"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;!-- leaving out some properties for the sake of brevity --&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;node oor:name="org.openoffice.framework.desktop.test.deployment.options.modules1.node 2"</p>
  <p class="Code">Â  Â  oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  &lt;!-- leaving out some properties for the sake of brevity --&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/node&gt;Â </p>
  <p class="Paragraph">As you can see, every <span class="Codeintext">Node</span> which is assigned to a <span class="Codeintext">Module</span> can be paired with an index (property <span class="Codeintext">Index</span>).</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table21"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table21A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./5 Extensions_files/interesting.gif" class="fr2" /></div>
     </td><td style="text-align:left;width:15.529cm; " class="Table21B1">
      <p class="TipInTable">If one decides to provide an index Â then one should do this for all Node|s.</p>
      <p class="TipInTable">If Â a particular index is not used, for example, only index 0, 1, 5 are used, then the missing indices are left out when the nodes are displayed. That is, the tree view will not show gaps for the missing indices 2,3, and 4.</p>
     </td></tr></table></div>
  <p class="Paragraph">Â </p>
 <p style="text-align:center;"><small>[ <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml" title="Link to previous document">Previous document</a> | <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/DevelopersGuide.xhtml" title="Link to the Content Table">Content Table</a> | <a href="http://replay.waybackmachine.org/20080924043146/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml" title="Link to next document">Next document</a> ]</small></p></body></html>