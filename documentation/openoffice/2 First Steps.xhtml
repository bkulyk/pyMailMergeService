<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><title>First Steps</title><link rel="stylesheet" type="text/css" href="./2 First Steps_files/FirstSteps.css" /><meta name="generator" content="StarOffice/OpenOffice XSLT (http://xml.openoffice.org/sx2ml)" /><meta name="author" content="Dietrich Schulten" /><meta name="created" content="2002-03-07T10:38:36" /><meta name="changedby" content="JÃ¼rgen Schmidt" /><meta name="changed" content="2007-07-04T16:24:57" /><base href="." />
</head><body dir="ltr"><div id="wm-ipp" style="position: relative; padding-top: 0px; padding-right: 5px; padding-bottom: 0px; padding-left: 5px; min-height: 70px; min-width: 800px; z-index: 9000; display: none; ">
<div id="wm-ipp-inside" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(http://static.waybackmachine.org/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="http://waybackmachine.org/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="./2 First Steps_files/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0" /></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="http://waybackmachine.org/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/FirstSteps.xhtml" style="width:400px;font-size:11px;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20090428032215" /><input type="submit" value="Go" style="font-size:11px;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;margin-left:5px;" /><span id="wm_tb_options" style="display:block;" /></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:&apos;Helvetica&apos;,&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20090327224041/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/FirstSteps.xhtml" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="27 Mar 2009"><strong>MAR</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 3:22:15 Apr 28, 2009">APR</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20090529060658/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/FirstSteps.xhtml" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="29 May 2009"><strong>MAY</strong></a>
		                
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20090327224041/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/FirstSteps.xhtml" title="22:40:41 Mar 27, 2009" style="background-color:transparent;border:none;"><img src="./2 First Steps_files/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 3:22:15 Apr 28, 2009">28</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20090529060658/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/FirstSteps.xhtml" title="6:06:58 May 29, 2009" style="background-color:transparent;border:none;"><img src="./2 First Steps_files/wm_tb_nxt_on.png" alt="Next capture" width="14" height="16" border="0" /></a>
		                
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20080410023109/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/FirstSteps.xhtml" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="10 Apr 2008"><strong>2008</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 3:22:15 Apr 28, 2009">2009</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2010
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="http://waybackmachine.org/20090428032215*/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/FirstSteps.xhtml" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>112 captures</strong></a>
           <div style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">26 Feb 06 - 29 May 09</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:400px;height:27px;" href="" id="wm-graph-anchor">
       <div id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:400px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;" onmouseover="showTrackers(&apos;inline&apos;);" onmouseout="showTrackers(&apos;none&apos;);" onmousemove="trackMouseMove(event,this)" alt="sparklines" width="400" height="27" border="0" src="./2 First Steps_files/graph.jsp" />
			<img id="wbMouseTrackYearImg" style="display:none; position:absolute; z-index:9010;" width="25" height="27" border="0" src="./2 First Steps_files/transp-yellow-pixel.png" />
			<img id="wbMouseTrackMonthImg" style="display:none; position:absolute; z-index:9011; " width="2" height="27" border="0" src="./2 First Steps_files/transp-red-pixel.png" />
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById(&apos;wm-ipp&apos;).style.display=&apos;none&apos;;" style="display:block;padding-right:18px;background:url(http://static.waybackmachine.org/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.waybackmachine.org/" style="display:block;padding-right:18px;background:url(http://static.waybackmachine.org/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<!-- BEGIN WAYBACK TOOLBAR INSERT -->

<script type="text/javascript" src="./2 First Steps_files/disclaim-element.js" />
<script type="text/javascript" src="./2 First Steps_files/graph-calc.js" />
<script type="text/javascript" src="./2 First Steps_files/jquery.min.js" />
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1325375999999;
var wbPrefix = "http://replay.waybackmachine.org/";
var wbCurrentUrl = "http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/FirstSteps.xhtml";

var curYear = -1;
var curMonth = -1;
var yearCount = 16;
var firstYear = 1996;
var imgWidth=400;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "28";
var displayMonth = "Apr";
var displayYear = "2009";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>

<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->
<p style="text-align:center;"><small>[ <a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/Preface/ReadersGuide.xhtml" title="Link to previous document">Previous document</a> | <a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/DevelopersGuide.xhtml" title="Link to the Content Table">Content Table</a> | <a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml" title="Link to next document">Next document</a> ]</small></p>
  
  
  
  <h1 style="margin-left:2.54cm;" class="Head1"><a name="1_First_Steps" />2Â Â First Steps</h1>
  <p class="Under_Head1">Â </p>
  <p class="Paragraph">This chapter shows you the first steps when using the OpenOffice.org API. Following these steps is essential to understand and use the chapters about OpenOffice.org documents such as <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/Text/Text.xhtml#1_Text_Documents" title="see chapter 8 Text Documents">8 Text Documents</a></span>, <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/Spreadsheet/Spreadsheet.xhtml#1_Spreadsheet_Documents" title="see chapter 9 Spreadsheet Documents">9 Spreadsheet Documents</a></span> and <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/Drawing/Drawing.xhtml#1_Drawing" title="see chapter 10 Drawing">10 Drawing</a></span>. After you have successfully done the first steps, you can go directly to the other chapters of this manual. </p>
  <p class="Paragraph">The focus of the first steps will be Java, but other languages are covered as well. If you want to use OpenOffice.org Basic afterwards, please refer to the chapters <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/BasicAndDialogs/BasicAndDialogs.xhtml#1_1_First_Steps_with_OpenOffice.org_Basic" title="see chapter 12.1 OpenOffice.org Basic and Dialogs - First Steps with OpenOffice.org Basic">12.1 OpenOffice.org Basic and Dialogs - First Steps with OpenOffice.org Basic</a></span> and <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_4_3_OpenOffice.org_Basic" title="see chapter 3.4.3 Professional UNO - UNO Language Bindings - OpenOffice.org Basic">3.4.3 Professional UNO - UNO Language Bindings - OpenOffice.org Basic</a></span>. The usage of C++ is described in <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_4_2_C_2B_2B_Language_Binding" title="see chapter 3.4.2 Professional UNO - UNO Language Bindings - C++ Language Binding">3.4.2 Professional UNO - UNO Language Bindings - C++ Language Binding</a></span>.</p>
  <h2 class="Head2"><a name="1_1_Programming_with_UNO" />2.1Â Â Programming with UNO</h2>
  <p class="Paragraph">UNO (pronounced ['ju:no<span class="T2">u</span>]) stands for Universal Network Objects and is the base component technology for OpenOffice.org. You can utilize and write components that interact across languages, component technologies, computer platforms, and networks. Currently, UNO is available on Linux, Solaris, Windows, Power PC, FreeBSD and Mac OS X. Other ports are still being developed at OpenOffice.org. The supported programming languages are Â Java, C++ and OpenOffice.org Basic. As well, UNO is available through the component technology Microsoft COM for many other languages. On OpenOffice.org there is also a language binding for Python available.</p>
  <p class="Paragraph">With OpenOffice.org 2.0, UNO is also programmable with .NET languages using the new Common Language Infrastructure binding. In addition, the new scripting framework offers the use of the API through several scripting languages, such as Javascript or Beanshell. See <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/ScriptingFramework/ScriptingFramework.xhtml#1_Scripting_Framework" title="see chapter 19 Scripting Framework">19 Scripting Framework</a></span> for more details.</p>
  <p class="Paragraph">UNO is used to access OpenOffice.org, using its Application Programming Interface (API). The OpenOffice.org API is the comprehensive specification that describes the programmable features of OpenOffice.org.Â </p>
  <h2 class="Head2"><a name="1_2_Fields_of_Application_for_UNO" />2.2Â Â Fields of Application for UNO</h2>
  <p class="Paragraph">You can connect to a local or remote instance of OpenOffice.org from C++, Java and COM/DCOM. C++ and Java Desktop applications, Java servlets, Java Server Pages, JScript and VBScript, and languages, such as Delphi, Visual Basic and many others can use OpenOffice.org to work with Office documents.Â </p>
  <p class="Paragraph">It is possible to develop UNO Components in C++ or Java that can be instantiated by the office process and add new capabilities to OpenOffice.org. For example, you can write Chart Add-ins or Calc Add-ins, Add-ons, linguistic extensions, new file filters, database drivers. You can even write complete applications, such as a groupware client. Â </p>
  <p class="Paragraph">UNO components, as Java Beans, integrate with Java IDEs (Integrated Development Environment) to give easy access to OpenOffice.org. Currently, a set of such components is under development that will allow editing OpenOffice.org documents in Java Frames.Â </p>
  <p class="Paragraph">OpenOffice.org Basic cooperates with UNO, so that UNO programs can be directly written in OpenOffice.org. With this method, you supply your own office solutions and wizards based on an event-driven dialog environment. Â </p>
  <p class="Paragraph">The OpenOffice.org database engine and the data aware forms open another wide area of opportunities for database driven solutions.Â </p>
  <h2 class="Head2"><a name="1_3_Getting_Started" />2.3Â Â Getting Started</h2>
  <p class="Paragraph">A number of files and installation sets are required before beginning with the OpenOffice.org API. Â </p>
  <h3 class="Head3"><a name="1_3_1_Required_Files" />2.3.1Â Â Required Files</h3>
  <p class="Paragraph">These files are required for any of the languages you use.Â </p>
  <p class="TitledListHead"><span class="T3">OpenOffice.org Installation</span></p>
  <p class="TitledListBody">Install the latest version of OpenOffice.org or StarOffice/StarSuite.Â </p>
  <p class="TitledListBody">You can download OpenOffice.org from<span class="T4"> www.openoffice.org. </span>StarOffice can be obtained from Sun Microsystems or through your distributors.</p>
  <p class="TitledListHead"><span class="Emphasis">API Reference</span></p>
  <p class="TitledListBody">The OpenOffice.org API reference is part of the Software Development Kit and provides detailed information about OpenOffice.org objects. The latest version can be found on, or downloaded from, the documents section at <span class="wwwftpemail">api.openoffice.org</span>. </p>
  <h3 class="Head3"><a name="1_3_2_Installation_Sets" />2.3.2Â Â Installation Sets</h3>
  <p class="Paragraph"><span class="T5">The following installation sets are necessary to develop OpenOffice.org API</span><span class="T6"> applications with Java. This chapter describes how to set up a Java IDE for the OpenOffice.org API. </span></p>
  <p class="TitledListHead"><span class="T3">JDK 1.3.1 or later</span></p>
  <p class="TitledListBody">Java applications for OpenOffice.org require the Java Development Kit 1.3.1 or later. Download and install a JDK from <span class="wwwftpemail">java.sun.com.</span> To get all features, Java 1.4.1_01 is required. The recommendation is to use always the latest Java version, because of important bug fixes. </p>
  <p class="TitledListHead"><span class="T3">Java IDE</span></p>
  <p class="TitledListBody">Download an Integrated Development Environment (IDE), such as NetBeans from <span class="wwwftpemail">www.netbeans.org</span> or Â the Sun<span class="T7">TM</span> One Java Studio from Sun Microsystems. Other IDEs can be used, but NetBeans/Sun One Java Studio offers the best integration. The integration of OpenOffice.org with IDEs such as NetBeans is an ongoing effort. Check the files section of <span class="wwwftpemail">api.openoffice.org</span> for the latest information about NetBeans and other IDEs.</p>
  <p class="TitledListHead">OpenOffice.org Software Development Kit (SDK)Â </p>
  <p class="TitledListBody">Obtain the OpenOffice.org Software Development Kit (SDK) from <span class="wwwftpemail">www.openoffice.org. </span>It contains the build environment for the examples mentioned in this manual and reference documentation for the OpenOffice.org API, for the Java UNO runtime, and the C++ API. It also offers more example sources. By means of the SDK you can use GNU <span class="wwwftpemail">make</span> to build and run the examples we mention here.</p>
  <p class="TitledListBody">Unpack the SDK somewhere in your file system. The file <span class="wwwftpemail">index.html </span>gives an overview of the SDK. For detailed instructions which compilers to use and how to set up your development environment, please refer to the SDK installation guide.</p>
  <h3 class="Head3"><a name="1_3_3_Configuration" />2.3.3Â Â Configuration</h3>
  <h4 class="Head4"><a name="1_3_3_1_Enable_Java_in_OpenOffice.org" />Enable Java in OpenOffice.org</h4>
  <p class="Paragraph">OpenOffice.org uses a Java Virtual Machine to instantiate components written in Java. From OpenOffice.org 2.0 on, Java is found automatically during startup, or latest when Java functionality is required. If you prefer to preselect a JRE or JDK, or if no Java is found, you can configure Java using the <span class="Accentuation">Tools â Options</span> dialog in OpenOffice.org and select the section <span class="Accentuation">OpenOffice.org â Java</span> section. In older versions of OpenOffice.org you can also easily tell the office which JVM to use: launch the <span class="wwwftpemail">jvmsetup</span> executable from the programs folder under the OpenOffice.org, select an installed JRE or JDK and click <span class="T8">OK</span>. Close the OpenOffice.org including the Quickstarter in the taskbar and restart OpenOffice.org. <span class="T9">Furthermore, open the </span><span class="T10">Tools - Options</span><span class="T9"> dialog in OpenOffice.org, select the section </span><span class="T11">OpenOffice.org - Security</span><span class="T9"> and make sure that the </span><span class="T10">Java enable</span><span class="T9"> option is checked.</span></p>
  <h4 class="Head4"><a name="1_3_3_2_Use_Java_UNO_class_files" />Use Java UNO class files</h4>
  <p class="Paragraph">Next, the OpenOffice.org class files must be made known to the Java IDE. For NetBeans these Java UNO jar files must be mounted to a project. The following steps show how to create a new project and mount class files in NetBeans from version 3.5.1.Â </p>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P3" style="margin-left:2.5cm;"><p class="P3" style="margin-left:0cm;">From the <span class="ButtonsMenus">Project</span><span class="T8"> </span>menu, select <span class="ButtonsMenus">Project Manager</span><span class="T1">. Click the </span><span class="T8">New</span>... button in the <span class="ButtonsMenus">Project Manager</span> window to create a new project. NetBeans uses your new project as the current project.</p></li>
   <li class="P3" style="margin-left:2.5cm;"><p class="P3" style="margin-left:0cm;">Activate the NetBeans <span class="ButtonsMenus">Explorer</span> windowâit should contain a <span class="ButtonsMenus">Filesystems</span> item (to display the NetBeans Explorer window, click <span class="T8">View - Explorer</span>). Open its context menu and select <span class="T8">Mount â Archive Files</span>, navigate to the folder <span class="wwwftpemail">&lt;OfficePath&gt;/program/classes</span>, choose Â at least <span class="Emphasis">jurt.jar</span>, <span class="Emphasis">unoil.jar</span>, <span class="Emphasis">ridl.jar </span>and <span class="Emphasis">juh.jar</span> in that directory and click <span class="T8">Finish</span> to mount the OpenOffice.org jars in your project. As an alternative, you can also mount files using <span class="ButtonsMenus">File - Mount Filesystem</span>.</p></li>
   <li class="P3" style="margin-left:2.5cm;"><p class="P3" style="margin-left:0cm;">Finally you need a folder for the source files of your project. Choose <span class="ButtonsMenus">Mount â Local Directory</span> from the context menu of the <span class="ButtonsMenus">Filesystems</span> icon and use the file manager dialog to create a new folder somewhere in your file system. Select it without opening it and click <span class="ButtonsMenus">Finish</span> to add it to your project.</p></li>
  </ol>
  <h4 class="Head4"><a name="1_3_3_3_Add_the_API_Reference_to_your_IDE" />Add the API Reference to your IDE</h4>
  <p class="Paragraph">We recommend to add the API and the Java UNO reference to your Java IDE to get online help for the OpenOffice.org API and the Java UNO runtime. In NetBeans 3.4.1, follow these steps:Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P4" style="margin-left:2.5cm;"><p class="P4" style="margin-left:0cm;">Open your project and choose the <span class="T8">Tools â Javadoc Manager</span> menu. With the button <span class="ButtonsMenus">Add Folder...</span> add the folders <span class="wwwftpemail">docs/common/ref</span> and <span class="wwwftpemail">docs/java/ref</span> of your SDK installation to use the API and the Java UNO reference in your project.</p></li>
   <li class="P4" style="margin-left:2.5cm;"><p class="P4" style="margin-left:0cm;">You can now use <span class="ButtonsMenus">Alt </span>+ <span class="ButtonsMenus">F1</span> to view online help while the cursor is on a OpenOffice.org API or Java UNO identifier in the source editor window.</p></li>
  </ul>
  <h3 class="Head3"><a name="1_3_4_First_Contact" />2.3.4Â Â First Contact</h3>
  <h4 class="Head4"><a name="1_3_4_1_Getting_Started" />Getting Started</h4>
  <p class="Paragraph">Since OpenOffice.org 2.0 it is very simple to get a working environment that offers a transparent use of UNO functionality and of office functionality. The following demonstrates how to write a small program that initializes UNO, which means that it internally connects to an office or starts a new office process if necessary and tells you if it was able to get the office component context that provides the office service manager object. Start the Java IDE or source editor, and enter the following source code for the <span class="Codeintext">FirstUnoContact</span> class.</p>
  <p class="Paragraph">To create and run the class in the NetBeans 3.5.1 IDE, use the following steps:Â </p>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P5" style="margin-left:2.5cm;"><p class="P5" style="margin-left:0cm;">Add a main class to the project. In the NetBeans Explorer window, click the <span class="T8">Project &lt;project_name&gt;</span> tab, right click the <span class="T8">Project</span> item, select <span class="T8">Add New... </span><span class="T1">to display the </span><span class="T8">New Wizard</span>, open the <span class="T8">Java Classes</span> folder, highlight the template <span class="T8">Main, </span>and click <span class="T8">Next</span><span class="T1">. </span></p></li>
   <li class="P6" style="margin-left:2.5cm;"><p class="P6" style="margin-left:0cm;">In the <span class="T8">Name</span> field, enter 'FirstUnoContact' as classname for the Main class and select the folder that contains your project files. The <span class="T12">FirstUnoContact</span> is added to the default package of your project. Click <span class="T8">Finish</span> to create the class.</p></li>
   <li class="P6" style="margin-left:2.5cm;"><p class="P6" style="margin-left:0cm;">Enter the source code shown below (<a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/examples/DevelopersGuide/FirstSteps/FirstUnoContact.java" title="goto source FirstSteps/FirstUnoContact.java">FirstSteps/FirstUnoContact.java</a>).Â </p></li>
   <li class="P7" style="margin-left:2.5cm;"><p class="P7" style="margin-left:0cm;">Add a blank ant script to the project. In the NetBeans Explorer window, click the <span class="T13">Project</span> &lt;project_name&gt; tab, right click the <span class="T13">Project</span> item, select <span class="T13">Add New</span> to display the New Wizard, open the Ant Build Scripts folder, highlight the template Blank Ant Project, and click <span class="T13">Next</span>. </p></li>
   <li class="P6" style="margin-left:2.5cm;"><p class="P6" style="margin-left:0cm;">In the <span class="T8">Name</span> field, enter 'build_FirstUnoContact' as script name for the ant build script and select the folder that contains your project files. The <span class="T12">build_FirstUnoContact</span> is added to your project. Click <span class="T8">Finish</span> to create the script.</p></li>
   <li class="P6" style="margin-left:2.5cm;"><p class="P6" style="margin-left:0cm;">Enter the script code shown below (<a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/examples/DevelopersGuide/FirstSteps/build_FirstUnoContact.xml" title="goto source FirstSteps/build_FirstUnoContact.xml">FirstSteps/build_FirstUnoContact.xml</a>). Â </p></li>
   <li class="P6" style="margin-left:2.5cm;"><p class="P6" style="margin-left:0cm;">Select and right click the <span class="T12">build_FirstUnoContact</span> script, select <span class="T13">Execute</span> to build the example project. Right click the <span class="T12">build_FirstUnoContact</span> script again, select <span class="T13">Run Target</span> to display more availble targets, select the run target to execute the example.</p></li>
  </ol>
  <p class="P8">The FirstUnoContact example (<a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/examples/DevelopersGuide/FirstSteps/FirstUnoContact.java" title="goto source FirstSteps/FirstUnoContact.java">FirstSteps/FirstUnoContact.java</a>):Â </p>
  <p class="Code">public class FirstUnoContact {Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  public static void main(String[] args) {</p>
  <p class="Code">Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // get the remote office component context</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  com.sun.star.uno.XComponentContext xContext =</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.comp.helper.Bootstrap.bootstrap();</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  System.out.println("Connected to a running office ...");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  com.sun.star.lang.XMultiComponentFactory xMCF =</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xContext.getServiceManager();</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  String available = (xMCF != null ? "available" : "not available");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  System.out.println( "remote ServiceManager is " + available ); Â  Â  Â  Â  Â  Â </p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  catch (java.lang.Exception e){</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  e.printStackTrace();</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  finally {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  System.exit(0);</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">}Â </p>
  <p class="Paragraph">The example ant build script <span class="T1">(<a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/examples/DevelopersGuide/FirstSteps/build_FirstUnoContact.xml" title="goto source FirstSteps/build_FirstUnoContact.xml">FirstSteps/build_FirstUnoContact.xml</a>)</span>:</p>
  <p class="Code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;Â </p>
  <p class="Code">&lt;project basedir="." default="all" name="FirstUnoContact"&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  &lt;property environment="env"/&gt;</p>
  <p class="Code">Â  Â  &lt;property name="OFFICE_HOME" value="${env.OFFICE_HOME}"/&gt;</p>
  <p class="Code">Â  Â  &lt;property name="OO_SDK_HOME" value="${env.OO_SDK_HOME}"/&gt;</p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  &lt;target name="init"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;property name="OUTDIR" value="${OO_SDK_HOME}/WINExample.out/class/FirstUnoContact"/&gt;</p>
  <p class="Code">Â  Â  &lt;/target&gt;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  &lt;path id="office.class.path"&gt; </p>
  <p class="Code">Â  Â  Â  Â  &lt;filelist dir="${OFFICE_HOME}/program/classes"</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  files="jurt.jar,unoil.jar,ridl.jar,juh.jar"/&gt;</p>
  <p class="Code">Â  Â  &lt;/path&gt; </p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  &lt;fileset id="bootstrap.glue.code" dir="${OO_SDK_HOME}/classes"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;patternset&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;include name="com/sun/star/lib/loader/*.class"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;include name="win/unowinreg.dll"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/patternset&gt;</p>
  <p class="Code">Â  Â  &lt;/fileset&gt; Â  Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â </p>
  <p class="Code">Â  Â  &lt;target name="compile" depends="init"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;mkdir dir="${OUTDIR}"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;javac debug="true" deprecation="true" destdir="${OUTDIR}" srcdir="."&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;classpath refid="office.class.path"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/javac&gt;</p>
  <p class="Code">Â  Â  &lt;/target&gt;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  &lt;target name="jar" depends="init,compile"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;jar basedir="${OUTDIR}" compress="true" </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  jarfile="${OUTDIR}/FirstUnoContact.jar"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;exclude name="**/*.java"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;exclude name="*.jar"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;fileset refid="bootstrap.glue.code"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;manifest&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;attribute name="Main-Class" value="com.sun.star.lib.loader.Loader"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;section name="com/sun/star/lib/loader/Loader.class"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;attribute name="Application-Class" value="FirstUnoContact"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;/section&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;/manifest&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/jar&gt;</p>
  <p class="Code">Â  Â  &lt;/target&gt;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  &lt;target name="all" Â description="Build everything." depends="init,compile,jar"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;echo message="Application built. FirstUnoContact!"/&gt;</p>
  <p class="Code">Â  Â  &lt;/target&gt;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  &lt;target name="run" description="Try running it." depends="init,all"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;java jar="${OUTDIR}/FirstUnoContact.jar" failonerror="true" fork="true"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/java&gt;</p>
  <p class="Code">Â  Â  &lt;/target&gt;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  &lt;target Â name="clean" description="Clean all build products." depends="init"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;delete&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;fileset dir="${OUTDIR}"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;include name="**/*.class"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;/fileset&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/delete&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;delete file="${OUTDIR}/FirstUnoContact.jar"/&gt;</p>
  <p class="Code">Â  Â  &lt;/target&gt;</p>
  <p class="Code">Â </p>
  <p class="Code">&lt;/project&gt;Â </p>
  <p class="Paragraph">For an example that connects to the office with C++, see chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_4_2_C_2B_2B_Language_Binding" title="see chapter 3.4.2 Professional UNO - UNO Language Bindings - C++ Language Binding">3.4.2 Professional UNO - UNO Language Bindings - C++ Language Binding</a></span>. Accessing the office with OpenOffice.org Basic is described in <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/BasicAndDialogs/BasicAndDialogs.xhtml#1_1_First_Steps_with_OpenOffice.org_Basic" title="see chapter 12.1 OpenOffice.org Basic and Dialogs - First Steps with OpenOffice.org Basic">12.1 OpenOffice.org Basic and Dialogs - First Steps with OpenOffice.org Basic</a></span>.</p>
  <p class="Paragraph">The next section describes what happens during the connection between a Java program and OpenOffice.org.Â </p>
  <h4 class="Head4"><a name="1_3_4_2_Service_Managers" />Service Managers</h4>
  <p class="Paragraph">UNO introduces the concept of <span class="Emphasis">service managers</span>, which can be considered as âfactoriesâ that Â create <span class="Emphasis">services.</span> For now, it is sufficient to see services as UNO objects that can be used to perform specific tasks. Later on we will give a more precise definition for the term service.</p>
  <p class="Paragraph">For example, the following services are available:Â </p>
  <p class="TitledListHead">com.sun.star.frame.DesktopÂ </p>
  <p class="TitledListBody">maintains loaded documents: is used to load documents, to get the current document, and access all loaded documentsÂ </p>
  <p class="TitledListHead">com.sun.star.configuration.ConfigurationProviderÂ </p>
  <p class="TitledListBody">yields access to the OpenOffice.org configuration, for instance the settings in the <span class="ButtonsMenus">Tools - Options</span> dialog</p>
  <p class="TitledListHead">com.sun.star.sdb.DatabaseContextÂ </p>
  <p class="TitledListBody">holds databases registered with OpenOffice.orgÂ </p>
  <p class="TitledListHead">com.sun.star.system.SystemShellExecuteÂ </p>
  <p class="TitledListBody">executes system commands or documents registered for an application on the current platformÂ </p>
  <p class="TitledListHead">com.sun.star.text.GlobalSettingsÂ </p>
  <p class="TitledListBody">manages global view and print settings for text documentsÂ </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle4"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Tabelle4A1">
      <div class="Paragraph"><div style="width: 7.999cm; " id="Rahmen3" class="fr2">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/Service.png" title="link to the full-sized graphic &quot;./Service.png&quot;"><img border="0" width="306" height="454" alt="Overview graphic of a ServiceManager providing services" src="./2 First Steps_files/Service.png" class="fr3" /></a>Illustration <a name="refIllustration0">2.1</a>: Service manager</div>
       </div></div>
     </td></tr></table></div>
  <p class="Paragraph">A service always exists in a <span class="Emphasis">component context</span>, which consists of the service manager that created the service and other data to be used by the service.</p>
  <p class="Paragraph">The <span class="Codeintext">FirstUnoContact</span> class above is considered a client of the OpenOffice.org process, OpenOffice.org is the server in this respect. The server has its own component context and its own service manager, which can be accessed from client programs to use the office functionality. The client program initializes UNO and gets the component context from the OpenOffice.org process. Internally, this initialization process creates a local service manager, establishes a pipe connection to a running OpenOffice.org process (if necessary a new process is started) and returns the remote component context. In the first step this is the only thing you have to know. The com.sun.star.comp.helper.Bootstrap.bootstrap() method initializes UNO and returns the remote component context of a running OpenOffice.org process. You can find more details about bootstrapping UNO, the opportunities of different connection types and how to establish a connection to a UNO server process in the <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_3_UNO_Concepts" title="see chapter 3.3 Professional UNO - UNO Concepts">3.3 Professional UNO - UNO Concepts</a></span>. </p>
  <p class="Paragraph">After this first initialization step, you can use the method Â  <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XComponentContext.html#getServiceManager" title="see getServiceManager of type com.sun.star.uno.XComponentContext">getServiceManager</a>()</span> from the component context to get the remote service manager from the OpenOffice.org process, which offers you access to the complete office functionality available through the API.</p>
  <p class="Paragraph">Â </p>
  <h4 class="Head4"><a name="1_3_4_3_Failed_Connections" />Failed Connections</h4>
  <p class="Paragraph">A remote connection can fail under certain conditions: Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P9" style="margin-left:2.5cm;"><p class="P9" style="margin-left:0cm;">Client programs should be able to detect errors. For instance, sometimes the bridge might become unavailable. Simple clients that connect to the office, perform a certain task and exit afterwards should stop their work and inform the user if an error occurred.Â </p></li>
  </ul>
  <ul style="margin-left:0.5cm;">
   <li class="P10" style="margin-left:2.5cm;"><p class="P10" style="margin-left:0cm;">Clients that are supposed to run over a long period of time should not assume that a reference to an initial object will be valid over the whole runtime of the client. The client should resume even if the connection goes down for some reason and comes back later on. When the connection fails, a robust, long running client should stop the current work, inform the user that the connection is not available and release the references to the remote process. When the user tries to repeat the last action, the client should try to rebuild the connection. Do not force the user to restart your program just because the connection was temporarily unavailable. Â </p></li>
  </ul>
  <p class="Paragraph">When the bridge has become unavailable and access is tried, it throws a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/DisposedException.html" title="see type com.sun.star.lang.DisposedException">com.sun.star.lang.DisposedException</a></span>. Whenever you access remote references in your program, catch this Exception in such a way that you set your remote references to null and inform the user accordingly. If your client is designed to run for a longer period of time, be prepared to get new remote references when you find that they are currently null. </p>
  <p class="Paragraph">A more sophisticated way to handle lost connections is be to register a listener at the underlying bridge object. The chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_3_1_UNO_Interprocess_Connections" title="see chapter 3.3.1 Professional UNO - UNO Concepts - UNO Interprocess Connections">3.3.1 Professional UNO - UNO Concepts - UNO Interprocess Connections</a></span> shows how to write a connection-aware client. Â </p>
  <p class="Paragraph">Â </p>
  <h2 class="Head2"><a name="1_4_How_to_get_Objects_in_OpenOffice.org" />2.4Â Â How to get Objects in OpenOffice.org</h2>
  <p class="Paragraph">An <span class="T4">object</span> in our context is a software artifact that has methods you can call. Objects are required to do something with OpenOffice.org. But where do you obtain them?</p>
  <p class="TitledListHead">New objectsÂ </p>
  <p class="TitledListBody">In general, new objects or objects which are necessary for a first access are created by Â <span class="Emphasis">service managers</span> in OpenOffice.org. In the <span class="Codeintext">FirstLoadComponent</span> example, the Â remote service manager creates the remote <span class="Codeintext">Desktop</span> object, which handles application windows and loaded documents in OpenOffice.org: </p>
  <p class="TitledListCode">Object desktop = xRemoteServiceManager.<span class="T8">createInstanceWithContext</span>(<br />Â  Â  Â  Â   Â  Â  Â  Â "com.sun.star.frame.Desktop", xRemoteContext);</p>
  <p class="TitledListHead">Document objectsÂ </p>
  <p class="TitledListBody">Document objects represent the files that are opened with OpenOffice.org. They are created by the <span class="Codeintext">Desktop</span> object, which has a <span class="Codeintext">loadComponentFromURL()</span> method for this purpose.</p>
  <p class="TitledListHead">Objects that are provided by other objectsÂ </p>
  <p class="TitledListBody">Objects can hand out other objects. There are two cases:Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P11" style="margin-left:3cm;"><p class="P11" style="margin-left:0cm;">Features which are designed to be an integral part of the object that provides the feature can be obtained by get methods in the OpenOffice.org API. It is common to get an object from a get method. For instance, <span class="Codeintext">getSheets()</span> is required for every Calc document, <span class="Codeintext">getText()</span> is essential for every Writer Document and <span class="Codeintext">getDrawpages()</span> is an essential part of every Draw document. After loading a document, these methods are used to get the Sheets, Text and Drawpages object of the corresponding document. Object-specific get methods are an important technique to get objects.</p></li>
  </ul>
  <ul style="margin-left:0.5cm;">
   <li class="P12" style="margin-left:3cm;"><p class="P12" style="margin-left:0cm;">Features which are not considered integral for the architecture of an object are accessible through a set of universal methods. In the OpenOffice.org API, these features are called properties, and generic methods are used, such as <span class="Codeintext">getPropertyValue(String propertyName)</span> to access them. In some cases such a non-integral feature is provided as an object, therefore the method <span class="Codeintext">getPropertyValue() </span>can be another source for objects. For instance, page styles for spreadsheets have the properties <span class="Codeintext">"RightPageHeaderContent"</span> and <span class="Codeintext">"LeftPageHeaderContent"</span>, that contain objects for the page header sections of a spreadsheet document. The generic <span class="Codeintext">getPropertyValue()</span> method can sometimes provide an object you need.</p></li>
  </ul>
  <p class="TitledListHead">Sets of objectsÂ </p>
  <p class="TitledListBody">Objects can be elements in a set of similar objects. In sets, to access an object you need to know how to get a particular element from the set. The OpenOffice.org API allows four ways to provide an element in a set. The first three ways are objects with element access methods that allow access by name, index, or enumeration. The fourth way is a sequence of elements which has no access methods but can be used as an array directly. How these sets of elements are used will be discussed later.Â </p>
  <p class="TitledListBody">The designer of an object decides which of those opportunities to offer, based on special conditions of the object, such as how it performs remotely or which access methods best work with implementation.Â </p>
  <h2 class="Head2"><a name="1_5_Working_with_Objects" />2.5Â Â Working with Objects</h2>
  <p class="Paragraph">Working with OpenOffice.org API objects involves the following: Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P13" style="margin-left:2.5cm;"><p class="P13" style="margin-left:0cm;">First we will learn the UNO concepts of objects, interfaces, services, attributes, and properties, and we will get acquainted with UNO's method of using them. Â </p></li>
   <li class="P13" style="margin-left:2.5cm;"><p class="P13" style="margin-left:0cm;">After that, we will work with a OpenOffice.org document for the first time, and give some hints for the usage of the most common types in OpenOffice.org API. Â </p></li>
   <li class="P13" style="margin-left:2.5cm;"><p class="P13" style="margin-left:0cm;">Finally we will introduce the common interfaces that allow you to work with text, tables and drawings across all OpenOffice.org document types.Â </p></li>
  </ul>
  <h3 class="Head3"><a name="1_5_1_Objects_2C_Interfaces_2C_and_Services" />2.5.1Â Â Objects, Interfaces, and Services</h3>
  <h4 class="Head4"><a name="1_5_1_1_Objects" />Objects</h4>
  <p class="Paragraph">In UNO, an <span class="Emphasis">object</span> is a software artifact that has methods that you can call and attributes that you can get and set. Exactly what methods and attributes an object offers is specified by the set of interfaces it supports.</p>
  <h4 class="Head4"><a name="1_5_1_2_Interfaces" />Interfaces</h4>
  <p class="Paragraph">An <span class="T14">interface</span><span class="T4"> </span>specifies a set of attributes and methods that together define one single aspect of an object. For instance, the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/resource/XResourceBundle.html" title="see type com.sun.star.resource.XResourceBundle">com.sun.star.resource.XResourceBundle</a></span></p>
  <p class="Code">module com { module sun { module star { module resource {<br /><span class="T13">interface</span> <span class="T13">XResourceBundle</span>: com::sun::star::conainer::XNameAccess {</p>
  <p class="Code">Â  Â  [attribute] XResourceBundle <span class="T13">Parent</span>;</p>
  <p class="Code">Â  Â  com::sun::star::lang::Locale <span class="T13">getLocale</span>();</p>
  <p class="Code">Â  Â  any <span class="T13">getDirectElement</span>([in] string key);</p>
  <p class="Code">};<br />}; }; }; };</p>
  <p class="Paragraph">specifies the attribute <span class="Codeintext">Parent</span> and the methods <span class="Codeintext">getLocale()</span> and <span class="Codeintext">getDirectElement()</span>. To allow for reuse of such interface specifications, an interface can inherit one or more other interfaces (as, for example, <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/resource/XResourceBundle.html" title="see type com.sun.star.resource.XResourceBundle">XResourceBundle</a></span> inherits all the attributes and methods of <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XNameAccess.html" title="see type com.sun.star.container.XNameAccess">com.sun.star.container.XNameAccess</a></span>). Multiple inheritance, the ability to inherit more than one interface, is new in OpenOffice.orgÂ 2.0.</p>
  <p class="Paragraph">Strictly speaking, interface attributes are not needed in UNO. Each attribute could also be expressed as a combination of one method to get the attributeâs value, and another method to set it (or just one method to get the value for a read-only attribute). However, there are at least two good reasons for the inclusion of interface attributes in UNO: First, the need for such combinations of getting and setting a value seems to be widespread enough to warrant extra support. Second, with attributes, a designer of an interface can better express nuances among the different features of an object. Attributes can be used for those features that are not considered integral or structural parts of an object, while explicit methods are reserved to access the core features.Â </p>
  <p class="Paragraph">Historically, a UNO object typically supported a set of many independent interfaces, corresponding to its many different aspects. With multiple-inheritance interfaces, there is less need for this, as an object may now support just one interface that inherits from all the other interfaces that make up the objectâs various aspects.Â </p>
  <h4 class="Head4"><a name="1_5_1_3_Services" />Services</h4>
  <p class="Paragraph">Historically, the term âserviceâ has been used with an unclear meaning in UNO. Starting with OpenOffice.orgÂ 2.0, the underlying concepts have been made cleaner. Unfortunately, this leaves two different meanings for the term âserviceâ within UNO. In the following, we will use the term ânew-style serviceâ to denote an entity that conforms to the clarified, OpenOffice.org-2.0 service concept, while we use âold-style serviceâ to denote an entity that only conforms to the historical, more vague concept. To make matters even more complicated, the term âserviceâ is often used with still different meanings in contexts outside UNO.Â </p>
  <p class="Paragraph">Although technically there should no longer be any need for old-style services, the OpenOffice.org API still uses them extensively, to remain backwards compatible. Therefore, be prepared to encounter uses of both service concepts in parallel when working with the OpenOffice.org API.Â </p>
  <p class="Paragraph">A <span class="Emphasis">new-style </span><span class="Emphasis">service</span> is of the form</p>
  <p class="Code">module com { module sun { module star { module bridge {<br /> Â  Â <span class="T13">service</span> <span class="T13">UnoUrlResolver</span>: XUnoUrlResolver;<br />}; }; }; };</p>
  <p class="Paragraph">and specifies that objects that support a certain interface (for example, <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/bridge/XUnoUrlResolver.html" title="see type com.sun.star.bridge.XUnoUrlResolver">com.sun.star.bridge.XUnoUrlResolver</a></span>) will be available under a certain service name (e.g., <span class="Codeintext">"com.sun.star.bridge.UnoUrlResolver"</span>) at a component contextâs service manager. (Formally, new-style services are called âsingle-interfaceâbased services.â)</p>
  <p class="Paragraph">The various UNO language bindings offer special constructs to easily obtain instances of such new-style services, given a suitable component context; see <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_4_1_4_11_Mapping_of_Services" title="see chapter 3.4.1 Professional UNO - UNO Language Bindings - Java Language Binding - Type Mappings - Mapping of Services">3.4.1 Professional UNO - UNO Language Bindings - Java Language Binding - Type Mappings - Mapping of Services</a></span> and <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_4_2_10_5_Mapping_of_Services" title="see chapter 3.4.2 Professional UNO - UNO Language Bindings - C++ Language Binding - Type Mappings - Mapping of Services">3.4.2 Professional UNO - UNO Language Bindings - C++ Language Binding - Type Mappings - Mapping of Services</a></span>.</p>
  <p class="Paragraph">An <span class="Emphasis">old-style service</span> (formally called an âaccumulation-based serviceâ) is of the form</p>
  <p class="Code">module com { module sun { module star { module frame {<br /><span class="T13">service</span> <span class="T13">Desktop</span> {</p>
  <p class="Code">Â  Â  service Frame;</p>
  <p class="Code">Â  Â  interface XDesktop;</p>
  <p class="Code">Â  Â  interface XComponentLoader;</p>
  <p class="Code">Â  Â  interface com::sun::star::document::XEventBroadcaster;</p>
  <p class="Code">};<br />}; }; }; };</p>
  <p class="Paragraph">and is used to specify any of the following:Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P14" style="margin-left:2.5cm;"><p class="P14" style="margin-left:0cm;">The general contract is, that if an object is documented to support a certain old-style service, then you can expect that object to support all interfaces exported by the service itself and any inherited services. For example, the method <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XFrames.html#queryFrames" title="see queryFrames of type com.sun.star.frame.XFrames:queryFrames">com.sun.star.frame.XFrames:queryFrames</a></span> returns a sequence of objects that should all support the old-style service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/Frame.html" title="see type com.sun.star.frame.Frame">com.sun.star.frame.Frame</a></span>, and thus all the interfaces exported by <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/Frame.html" title="see type com.sun.star.frame.Frame">Frame</a></span>.</p></li>
   <li class="P14" style="margin-left:2.5cm;"><p class="P14" style="margin-left:0cm;">Additionally, an old-style service may specify one or more properties, as inÂ </p></li>
  </ul>
  <p class="TitledListCode">module com { module sun { module star { module frame {<br />service Frame {<br /> Â  Â interface com::sun::star::frame::XFrame;</p>
  <p class="TitledListCode">Â  Â  interface com::sun::star::frame::XDispatchProvider;</p>
  <p class="TitledListCode">Â  Â  // ...</p>
  <p class="TitledListCode">Â  Â  [<span class="T13">property</span>] string Title;</p>
  <p class="TitledListCode">Â  Â  [<span class="T13">property</span>, optional] XDispatchRecorderSupplier RecorderSupplier;</p>
  <p class="TitledListCode">Â  Â  // ...</p>
  <p class="TitledListCode">};<br />}; }; }; };</p>
  <p class="TitledListBody">Properties, which are explained in detail in the following section, are similar to interface attributes, in that they describe additional features of an object. The main difference is that interface attributes can be accessed directly, while the properties of an old-style service are typically accessed via generic interfaces like <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XPropertySet.html" title="see type com.sun.star.beans.XPropertySet">com.sun.star.beans.XPropertySet</a></span>. Often, interface attributes are used to represent integral features of an object, while properties represent additional, more volatile features.</p>
  <ul style="margin-left:0.5cm;">
   <li class="P14" style="margin-left:2.5cm;"><p class="P14" style="margin-left:0cm;">Some old-style services are intended to be available at a component contextâs service manager. For example, the service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/Desktop.html" title="see type com.sun.star.frame.Desktop">com.sun.star.frame.Desktop</a></span> can be instantiated at a component contextâs service manager under its service name <span class="Codeintext">"com.sun.star.frame.Desktop"</span>. (The problem is that you cannot tell whether a given old-style service is intended to be available at a component context; using a new-style service instead makes that intent explicit.)</p></li>
   <li class="P14" style="margin-left:2.5cm;"><p class="P14" style="margin-left:0cm;">Other old-style services are designed as generic super-services that are inherited by other services. For example, the service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/document/OfficeDocument.html" title="see type com.sun.star.document.OfficeDocument">com.sun.star.document.OfficeDocument</a></span> serves as a generic base for all different sorts of concrete document services, like <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/text/TextDocument.html" title="see type com.sun.star.text.TextDocument">com.sun.star.text.TextDocument</a></span> and <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/DrawingDocument.html" title="see type com.sun.star.drawing.DrawingDocument">com.sun.star.drawing.DrawingDocument</a></span>. (Multiple-inheritance interfaces are now the preferred mechanism to express such generic base services.)</p></li>
   <li class="P14" style="margin-left:2.5cm;"><p class="P14" style="margin-left:0cm;">Yet other old-style services only list properties, and do not export any interfaces at all. Instead of specifying the interfaces supported by certain objects, as the other kinds of old-style services do, such services are used to document a set of related properties. For example, the service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/document/MediaDescriptor.html" title="see type com.sun.star.document.MediaDescriptor">com.sun.star.document.MediaDescriptor</a></span> lists all the properties that can be passed to <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XComponentLoader.html#loadComponentFromURL" title="see loadComponentFromURL of type com.sun.star.frame.XComponentLoader:loadComponentFromURL">com.sun.star.frame.XComponentLoader:loadComponentFromURL</a></span>.</p></li>
  </ul>
  <p class="Paragraph">A <span class="T4">property</span> is a feature of an object which is typically not considered an integral or structural part of the object and therefore is handled through generic <span class="Codeintext">getPropertyValue()/setPropertyValue()</span> methods instead of specialized get methods, such as <span class="Codeintext">getPrinter()</span>. Old-style services offer a special syntax to list all the properties of an object. An object containing properties only has to support the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XPropertySet.html" title="see type com.sun.star.beans.XPropertySet">com.sun.star.beans.XPropertySet</a></span> interface to be prepared to handle all kinds of properties. Typical examples are properties for character or paragraph formatting. With properties, you can set multiple features of an object through a single call to <span class="Codeintext">setPropertyValues()</span>, which greatly improves the remote performance. For instance, paragraphs support the <span class="Codeintext">setPropertyValues()</span> method through their <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XMultiPropertySet.html" title="see type com.sun.star.beans.XMultiPropertySet">com.sun.star.beans.XMultiPropertySet</a></span> interface.</p>
  <h3 class="Head3"><a name="1_5_2_Using_Services" />2.5.2Â Â Using Services</h3>
  <p class="Paragraph">The concepts of interfaces and services were introduced for the following reasons:Â </p>
  <p class="TitledListHead">Interfaces and services separate specification from implementationÂ </p>
  <p class="TitledListBody">The specification of an interface or service is <span class="Emphasis">abstract</span>, that is, it does not define how objects supporting a certain functionality do this <span class="Emphasis">internally</span>. Through the abstract specification of the OpenOffice.org API, it is possible to pull the implementation out from under the API and install a different implementation if required.</p>
  <p class="TitledListHead">Service names allow to create instances by specification name, not by class namesÂ </p>
  <p class="TitledListBody">In Java or C++ you use the <span class="Codeintext">new</span> operator to create a class instance. This approach is restricted: the class you get is hard-coded. You cannot later on exchange it by another class without editing the code. The concept of services solves this. The central object factory in OpenOffice.org, the global service manager, is asked to create an object that can be used for a certain purpose without defining its internal implementation. This is possible, because a service can be ordered from the factory by its <span class="Emphasis">service name</span> and the factory decides which service implementation it returns. Which implementation you get makes no difference, you only use the well-defined interface of the service.</p>
  <p class="TitledListHead">Multiple-inheritance interfaces make fine-grained interfaces manageableÂ </p>
  <p class="TitledListBody">Abstract interfaces are more reusable if they are fine-grained, i.e., if they are small and describe only one aspect of an object, not several aspects. But then you need many of them to describe a useful object. Multiple-inheritance interfaces allow to have fine-grained interfaces on the one hand <span class="Emphasis">and</span> to manage them easily by forging them into a collection. Since it is quite probable that objects in an office environment will share many aspects, this fine granularity allows the interfaces to be reused and thus to get objects that behave consistently. For instance, it was possible to realize a unified way to handle text, no matter if you are dealing with body text, text frames, header or footer text, footnotes, table cells or text in drawing shapes. It was not necessary to define separate interfaces for all of these purposes.</p>
  <p class="Paragraph">Let us consider the old-style service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/text/TextDocument.html" title="see type com.sun.star.text.TextDocument">com.sun.star.text.TextDocument</a></span> in UML notation. The UML chart shown in Illustration <a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/FirstSteps.xhtml#refIllustration1">2.2</a> depicts the mandatory interfaces of a <span class="Codeintext">TextDocument</span> service. These interfaces express the basic aspects of a text document in OpenOffice.org. It contains text, it is searchable and refreshable. It is a model with URL and controller, and it is modifiable, printable and storable. The UML chart shows how this is specified in the API.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table5"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table5A1">
      <div class="Paragraph"><div style="width: 11.573cm; " id="Frame3" class="fr4">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/TextDocumentWithMethods.png" title="link to the full-sized graphic &quot;./TextDocumentWithMethods.png&quot;"><img border="0" width="469" height="788" alt="UML diagram showing the com.sun.star.text.TextDocument service" src="./2 First Steps_files/TextDocumentWithMethods.png" class="fr5" /></a>Illustration <a name="refIllustration1">2.2</a>: Text Document</div>
       </div></div>
     </td></tr></table></div>
  <p class="P15">On the left of Illustration <a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/FirstSteps.xhtml#refIllustration1">2.2</a>, the services <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/text/TextDocument.html" title="see type com.sun.star.text.TextDocument">com.sun.star.text.TextDocument</a></span> and <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/document/OfficeDocument.html" title="see type com.sun.star.document.OfficeDocument">com.sun.star.document.OfficeDocument</a></span> are shown. Every <span class="Codeintext">TextDocument</span> must include these services by definition.</p>
  <p class="P16">On the right of Illustration <a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/FirstSteps.xhtml#refIllustration1">2.2</a>, you find the interfaces, that the services must export. Their method compartments list the methods contained in the various interfaces. In the OpenOffice.org API, all interface names have to start with an X to be distinguishable from the names of other entities.</p>
  <p class="P16">Every <span class="Codeintext">TextDocument</span> object must support three interfaces: <span class="Codeintext">XTextDocument</span>, <span class="Codeintext">XSearchable</span>, and <span class="Codeintext">XRefreshable</span>. In addition, because a <span class="Codeintext">TextDocument</span> is always an <span class="Codeintext">OfficeDocument</span>, it must also support the interfaces <span class="Codeintext">XPrintable</span>, <span class="Codeintext">XStorable</span>, <span class="Codeintext">XModifiable</span> and <span class="Codeintext">XModel</span>. The methods contained in these interfaces cover these aspects: printing, storing, modification and model handling.</p>
  <p class="P16">Note that the interfaces shown in Illustration 2.2 are only the mandatory interfaces of a <span class="Codeintext">TextDocument</span>. A <span class="Codeintext">TextDocument</span> has optional properties and interfaces, among them the properties <span class="Codeintext">CharacterCount</span>, <span class="Codeintext">ParagraphCount</span> and <span class="Codeintext">WordCount</span> and the <span class="Codeintext">XPropertySet</span> interface which must be supported if properties are present at all. The current implementation of the <span class="Codeintext">TextDocument</span> service in OpenOffice.org does not only support these interfaces, but all optional interfaces as well. The usage of a <span class="Codeintext">TextDocument</span> is described thoroughly in <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/Text/Text.xhtml#1_Text_Documents" title="see chapter 8 Text Documents">8 Text Documents</a></span>.</p>
  <h4 class="Head4"><a name="1_5_2_1_Using_Interfaces" />Using Interfaces</h4>
  <p class="Paragraph">The fact that every UNO object must be accessed through its interfaces has an effect in languages like Java and C++, where the compiler needs the correct type of an object reference before you can call a method from it. <span class="T9">In Java or C++, you normally just cast an object before you access an interface it implements. When working with UNO objects this is different: You must ask the UNO environment to get the appropriate reference for you whenever you want to access methods of an interface which your object supports, but your compiler does not yet know about. Only then you can cast it safely.</span></p>
  <p class="Paragraph">The Java UNO environment has a method <span class="Codeintext">queryInterface()</span> for this purpose. It looks complicated at first sight, but once you understand that <span class="Codeintext">queryInterface()</span> is about safe casting of UNO types across process boundaries, you will soon get used to it. Take a look to the second example FirstLoadComponent <span class="T1">(<a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/examples/DevelopersGuide/FirstSteps/FirstLoadComponent.java" title="goto source FirstSteps/FirstLoadComponent.java">FirstSteps/FirstLoadComponent.java</a>)</span> where a new Desktop object is created and afterwards the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XInterface.html#queryInterface" title="see queryInterface of type com.sun.star.uno.XInterface">queryInterface</a>()</span> method is used to get the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XComponentLoader.html" title="see type com.sun.star.frame.XComponentLoader">XComponentLoader</a></span> interface.</p>
  <p class="Code"><span class="T1">Object desktop = xRemoteServiceManager.</span><span class="T15">createInstanceWithContext</span><span class="T1">(</span></p>
  <p class="P17">Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.frame.Desktop", xRemoteContext);</p>
  <p class="P17">Â </p>
  <p class="P17">XComponentLoader xComponentLoader = (XComponentLoader)Â </p>
  <p class="P17">Â  Â  Â  Â  Â  Â  Â  Â  UnoRuntime.<span class="CodeEmphasis">queryInterface</span>(XComponentLoader.class, desktop);</p>
  <p class="P17">OÂ </p>
  <p class="P18">We asked the service manager to create a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/Desktop.html" title="see type com.sun.star.frame.Desktop">com.sun.star.frame.Desktop</a></span> using its factory method <span class="Codeintext">createInstanceWithContext()</span>. This method is defined to return a Java Object type, which should not surprise youâafter all the factory must be able to return any type:</p>
  <p class="Code">java.lang.Object createInstanceWithContext(String serviceName, XComponentContext context)Â </p>
  <p class="P18">The object we receive is a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/Desktop.html" title="see type com.sun.star.frame.Desktop">com.sun.star.frame.Desktop</a></span> service.</p>
  <p class="P19">The following figure Â is a simplified specification in UML notation showing the relation to the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/Frame.html" title="see type com.sun.star.frame.Frame">com.sun.star.frame.Frame</a></span> service and the supported interfaces.The point is, while <span class="T4">we</span> know that the object we ordered at the factory is a DesktopUnoUrlResolver and exports among other interfaces the interface <span class="Codeintext">XComponentLoader</span>, the <span class="T16">compiler</span> does <span class="T4">not</span>. Therefore, we have to use the UNO runtime environment to ask or <span class="T4">query</span> for the interface <span class="Codeintext">XComponentLoader</span>, since we want to use the <span class="Codeintext">loadComponentFromURL()</span> method on this interface. The method <span class="Codeintext">queryInterface()</span> makes sure we get a reference that can be cast to the needed interface type, no matter if the target object is a local or a remote object. There are two <span class="Codeintext">queryInterface</span> definitions in the Java UNO language binding:</p>
  <p class="Code">java.lang.Object UnoRuntime.queryInterface(java.lang.Class targetInterface, Object sourceObject)Â </p>
  <p class="Code">java.lang.Object UnoRuntime.queryInterface(com.sun.star.uno.Type targetInterface, Object sourceObject)Â </p>
  <p class="Paragraph">Since <span class="Codeintext">UnoRuntime.queryInterface()</span> is specified to return a java.lang.Object just like the factory method <span class="Codeintext">createInstanceWithContext()</span>, we still must explicitly cast our interface reference to the needed type. The difference is that after <span class="Codeintext">queryInterface()</span> we can safely cast the object to our interface type and, most important, that the reference will now work even with an object in another process. Here is the <span class="Codeintext">queryInterface()</span> call, explained step by step:</p>
  <p class="P17">XComponentLoader xComponentLoader = (XComponentLoader)Â </p>
  <p class="P17">Â  Â  Â  Â  Â  Â  Â  Â  UnoRuntime.<span class="CodeEmphasis">queryInterface</span>(XComponentLoader.class, desktop);</p>
  <p class="Code">Â </p>
  <p class="Paragraph"><span class="Codeintext">XComponentLoader</span> is the interface we want to use, so we define a <span class="Codeintext">XComponentLoader</span> variable named <span class="Codeintext">xComponentLaoder</span> (lower x) to store the interface we expect from <span class="Codeintext">queryInterface</span>. </p>
  <p class="Paragraph">Then we query our <span class="Codeintext">desktop</span> object for the <span class="Codeintext">XComponentLoader</span> interface, passing in <span class="Codeintext">XComponentLoader.class</span> as target interface and <span class="Codeintext">desktop</span> as source object. Finally we cast the outcome to <span class="Codeintext">XComponentLoader</span> and assign the resulting reference to our variable <span class="Codeintext">xComponentLoader</span>.</p>
  <p class="Paragraph">If the source object does not support the interface we are querying for, <span class="Codeintext">queryInterface()</span> will return <span class="Codeintext">null</span>.</p>
  <p class="Paragraph">In Java, this call to <span class="Codeintext">queryInterface()</span> is necessary whenever you have a reference to an object which is known to support an interface that you need, but you do not have the proper reference type yet. Fortunately, you are not only allowed to <span class="Codeintext">queryInterface()</span> from <span class="Codeintext">java.lang.Object</span> source types, but you may also query an interface from another interface reference, like this:</p>
  <p class="Code">// loading a blank spreadsheet document gives us its XComponent interface:Â </p>
  <p class="Code">XComponent <span class="T8">xComponent</span> = xComponentLoader.loadComponentFromURL(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  "private:factory/scalc", "_blank", 0, loadProps);</p>
  <p class="Code">Â </p>
  <p class="Code">// now we query the interface XSpreadsheetDocument from xComponentÂ </p>
  <p class="Code">XSpreadsheetDocument xSpreadsheetDocument = (XSpreadsheetDocument)UnoRuntime.queryInterface(Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XSpreadsheetDocument.class, <span class="T8">xComponent</span>); Â </p>
  <p class="Paragraph">Furthermore, if a method is defined in such a way that it already returns an interface type, you do not need to query the interface, but you can use its methods right away. In the snippet above, the method <span class="Codeintext">loadComponentFromURL </span>is specified to return an <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XComponent.html" title="see type com.sun.star.lang.XComponent">com.sun.star.lang.XComponent</a></span> interface, so you may call the <span class="Codeintext">XComponent</span> methods <span class="Codeintext">addEventListener()</span> and <span class="Codeintext">removeEventListener() </span>directly at the <span class="Codeintext">xComponent</span> variable, if you want to be notified that the document is being closed.</p>
  <p class="Paragraph">The corresponding step in C++ is done by a <span class="Codeintext">Reference&lt;&gt;</span> template that takes the source instance as parameter:</p>
  <p class="Code">// instantiate a sample service with the servicemanager.Â </p>
  <p class="Code">Reference&lt; XInterface &gt; rInstance =Â </p>
  <p class="Code">Â  Â  Â  Â  rServiceManager-&gt;createInstanceWithContext( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  OUString::createFromAscii("com.sun.star.frame.Desktop" ),</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  rComponentContext );</p>
  <p class="Code">Â </p>
  <p class="Code">// Query for the XComponentLoader interfaceÂ </p>
  <p class="Code">Reference&lt; XComponentLoader &gt; rComponentLoader( rInstance, UNO_QUERY );Â </p>
  <p class="Paragraph">In OpenOffice.org Basic, querying for interfaces is not necessary, the Basic runtime engine takes care about that internally.Â </p>
  <p class="Paragraph">With the proliferation of multiple-inheritance interfaces in the OpenOffice.org API, there will be less of a demand to explicitly query for specific interfaces in Java or C++. For example, with the hypothetical interfacesÂ </p>
  <p class="Code">interface <span class="T13">XBase1</span> {<br /> Â  Â void fun1();</p>
  <p class="Code">};Â </p>
  <p class="Code">interface <span class="T13">XBase2</span> {</p>
  <p class="Code">Â  Â  void fun2();</p>
  <p class="Code">};Â </p>
  <p class="Code">interface <span class="T13">XBoth</span> { // inherits from both XBase1 and XBase2</p>
  <p class="Code">Â  Â  interface XBase1;</p>
  <p class="Code">Â  Â  interface XBase2;</p>
  <p class="Code">};Â </p>
  <p class="Code">interface <span class="T13">XFactory</span> {</p>
  <p class="Code">Â  Â  XBoth getBoth();<br />};</p>
  <p class="Paragraph">you can directly call both <span class="Codeintext">fun1()</span> and <span class="Codeintext">fun2()</span> on a reference obtained through <span class="Codeintext">XFactory.getBoth()</span>, without querying for either <span class="Codeintext">XBase1</span> or <span class="Codeintext">XBase2</span>.</p>
  <h4 class="Head4"><a name="1_5_2_2_Using_Properties" />Using Properties</h4>
  <p class="P19">An object must offer its properties through <span class="T16">interfaces</span> that allow you to work with properties. The most basic form of these interfaces is the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XPropertySet.html" title="see type com.sun.star.beans.XPropertySet">com.sun.star.beans.XPropertySet</a></span>. There are other interfaces for properties, such as <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XMultiPropertySet.html" title="see type com.sun.star.beans.XMultiPropertySet">com.sun.star.beans.XMultiPropertySet</a></span>, that gets and sets a multitude of properties with a single method call. The <span class="Codeintext">XPropertySet</span> is always supported when properties are present in a service.</p>
  <p class="P19">In <span class="Codeintext">XPropertySet</span>, two methods carry out the property access, which are defined in Java as follows: </p>
  <p class="MethodSignatures">void <span class="MethodSignatureEmphasis">setPropertyValue</span>(String propertyName, Object propertyValue)</p>
  <p class="MethodSignatures">Object <span class="MethodSignatureEmphasis">getPropertyValue</span>(String propertyName)</p>
  <p class="Paragraph">In the FirstLoadComponent example, the <span class="Codeintext">XPropertySet</span> interface was used to set the CellStyle property at a cell object. The cell object was a <span class="Codeintext">com.sun.star.sheet.SheetCell</span> and therefore supports also the <span class="Codeintext">com.sun.star.table.CellProperties</span> service which had a property <span class="Codeintext">CellStyle</span>. The following code explains how this property was set:</p>
  <p class="Code">// query the XPropertySet interface from cell objectÂ </p>
  <p class="Code">XPropertySet xCellProps = (XPropertySet)UnoRuntime.<span class="CodeEmphasis">queryInterface</span>(XPropertySet.class, xCell);</p>
  <p class="Code">Â </p>
  <p class="Code">// set the CellStyle propertyÂ </p>
  <p class="Code">xCellProps.<span class="CodeEmphasis">setPropertyValue</span>("CellStyle", "Result");</p>
  <p class="Code">Â </p>
  <p class="Paragraph">You are now ready to start working with a OpenOffice.org document.Â </p>
  <h3 class="Head3"><a name="1_5_3_Example_3A_Working_with_a_Spreadsheet_Document" />2.5.3Â Â Example: Working with a Spreadsheet Document</h3>
  <p class="P20">In this example, we will ask the remote service manager to give us the remote <span class="Codeintext">Desktop</span> object and use its <span class="Codeintext">loadComponentFromURL()</span> method to create a new spreadsheet document. From the document we get its sheets container where we insert and access a new sheet by name. In the new sheet, we enter values into A1 and A2 and summarize them in A3. The cell style of the summarizing cell gets the cell style Result, so that it appears in italics, bold and underlined. Finally, we make our new sheet the active sheet, so that the user can see it.</p>
  <p class="P15">Add these import lines to the FirstConnection example above: (<a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/examples/DevelopersGuide/FirstSteps/FirstLoadComponent.java" title="goto source FirstSteps/FirstLoadComponent.java">FirstSteps/FirstLoadComponent.java</a>)Â </p>
  <p class="Code">import com.sun.star.beans.PropertyValue;Â </p>
  <p class="Code">import com.sun.star.lang.XComponent;Â </p>
  <p class="Code">import com.sun.star.sheet.XSpreadsheetDocument;Â </p>
  <p class="Code">import com.sun.star.sheet.XSpreadsheets;Â </p>
  <p class="Code">import com.sun.star.sheet.XSpreadsheet;Â </p>
  <p class="Code">import com.sun.star.sheet.XSpreadsheetView;Â </p>
  <p class="Code">import com.sun.star.table.XCell;Â </p>
  <p class="Code">import com.sun.star.frame.XModel;Â </p>
  <p class="Code">import com.sun.star.frame.XController;Â </p>
  <p class="P21">import com.<span class="T17">sun</span>.star.frame.XComponentLoader;</p>
  <p class="P18">Edit the useConnection method as follows:Â </p>
  <p class="P22">protected void useConnection() throws java.lang.Exception {Â </p>
  <p class="P22">Â  Â  Â  Â  try {</p>
  <p class="P22">Â  Â  Â  Â  Â  Â  // get the remote office component context</p>
  <p class="P22">Â  Â  Â  Â  Â  Â  xRemoteContext = com.sun.star.comp.helper.Bootstrap.bootstrap();</p>
  <p class="P22">Â  Â  Â  Â  Â  Â  System.out.println("Connected to a running office ...");</p>
  <p class="P22">Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="P22">Â  Â  Â  Â  Â  Â  xRemoteServiceManager = xRemoteContext.getServiceManager();</p>
  <p class="P22">Â  Â  Â  Â  }</p>
  <p class="P22">Â  Â  Â  Â  catch( Exception e) {</p>
  <p class="P22">Â  Â  Â  Â  Â  Â  e.printStackTrace();</p>
  <p class="P22">Â  Â  Â  Â  Â  Â  System.exit(1);</p>
  <p class="P22">Â  Â  Â  Â  }</p>
  <p class="P22">Â </p>
  <p class="P22">Â  Â  Â  Â  try {</p>
  <p class="P22">Â </p>
  <p class="P22">Â  Â  Â  Â  // get the Desktop, we need its XComponentLoader interface to load a new document</p>
  <p class="P22">Â  Â  Â  Â  Object desktop = xRemoteServiceManager.<span class="T8">createInstanceWithContext</span>(</p>
  <p class="P22">Â  Â  Â  Â  Â  Â  "com.sun.star.frame.Desktop", xRemoteContext);</p>
  <p class="P22">Â  Â  Â  Â  </p>
  <p class="P22">Â  Â  Â  Â  // query the XComponentLoader interface from the desktop</p>
  <p class="P22">Â  Â  Â  Â  XComponentLoader xComponentLoader = (XComponentLoader)UnoRuntime.<span class="T8">queryInterface</span>(</p>
  <p class="P22">Â  Â  Â  Â  Â  Â  XComponentLoader.class, desktop);</p>
  <p class="P22">Â </p>
  <p class="P22">Â  Â  Â  Â  // create empty array of PropertyValue structs, needed for loadComponentFromURL</p>
  <p class="P22">Â  Â  Â  Â  PropertyValue[] loadProps = <span class="T8">new</span> PropertyValue[0];</p>
  <p class="P22">Â  Â  Â  Â  </p>
  <p class="P22">Â  Â  Â  Â  // load new calc file</p>
  <p class="P22">Â  Â  Â  Â  XComponent xSpreadsheetComponent = xComponentLoader.<span class="T8">loadComponentFromURL</span>(</p>
  <p class="P22">Â  Â  Â  Â  Â  Â  "private:factory/scalc", "_blank", 0, loadProps);</p>
  <p class="P22">Â </p>
  <p class="P22">Â  Â  Â  Â  // query its XSpreadsheetDocument interface, we want to use getSheets()</p>
  <p class="P22">Â  Â  Â  Â  XSpreadsheetDocument xSpreadsheetDocument = (XSpreadsheetDocument)UnoRuntime.<span class="T8">queryInterface</span>(</p>
  <p class="P22">Â  Â  Â  Â  Â  Â  XSpreadsheetDocument.class, xSpreadsheetComponent);</p>
  <p class="P22">Â </p>
  <p class="P22">Â </p>
  <p class="P22">Â  Â  Â  Â  // use getSheets to get spreadsheets container</p>
  <p class="P22">Â  Â  Â  Â  XSpreadsheets xSpreadsheets = xSpreadsheetDocument.<span class="T8">getSheets</span>();</p>
  <p class="P22">Â </p>
  <p class="P21"><span class="T17">Â  Â  Â  Â  //insert new sheet at position 0 and get it</span> by name, then query its XSpreadsheet interface</p>
  <p class="P22">Â  Â  Â  Â  xSpreadsheets.<span class="T8">insertNewByName</span>("MySheet", (short)0);</p>
  <p class="P22">Â  Â  Â  Â  Object sheet = xSpreadsheets.<span class="T8">getByName</span>("MySheet");</p>
  <p class="P22">Â  Â  Â  Â  XSpreadsheet xSpreadsheet = (XSpreadsheet)UnoRuntime.<span class="T8">queryInterface</span>(</p>
  <p class="P22">Â  Â  Â  Â  Â  Â  XSpreadsheet.class, sheet);</p>
  <p class="P22">Â </p>
  <p class="Code">Â  Â  Â  Â  // use XSpreadsheet interface to get the cell A1 at position 0,0 and enter 21 as value</p>
  <p class="P22">Â  Â  Â  Â  XCell xCell = xSpreadsheet.getCellByPosition(0, 0);</p>
  <p class="P22">Â  Â  Â  Â  xCell.setValue(21);</p>
  <p class="P22">Â </p>
  <p class="P22">Â  Â  Â  Â  // enter another value into the cell A2 at position 0,1</p>
  <p class="P22">Â  Â  Â  Â  xCell = xSpreadsheet.getCellByPosition(0, 1);</p>
  <p class="P22">Â  Â  Â  Â  xCell.setValue(21);</p>
  <p class="P22">Â </p>
  <p class="P22">Â  Â  Â  Â  // sum up the two cells</p>
  <p class="P22">Â  Â  Â  Â  xCell = xSpreadsheet.getCellByPosition(0, 2);</p>
  <p class="P22">Â  Â  Â  Â  xCell.setFormula("=sum(A1:A2)");</p>
  <p class="P22">Â </p>
  <p class="P21"><span class="T17">Â  Â  Â  Â  // we want to access the cell property CellStyle, so query the cell's XPropertySet interface</span> </p>
  <p class="P22">Â  Â  Â  Â  XPropertySet xCellProps = (XPropertySet)UnoRuntime.<span class="T8">queryInterface</span>(</p>
  <p class="P22">Â  Â  Â  Â  Â  Â  XPropertySet.class, xCell);</p>
  <p class="P22">Â </p>
  <p class="P22">Â  Â  Â  Â  // assign the cell style "Result" to our formula, which is available out of the box</p>
  <p class="P22">Â  Â  Â  Â  xCellProps.<span class="T8">setPropertyValue</span>("CellStyle", "Result");</p>
  <p class="P22">Â </p>
  <p class="P21"><span class="T17">Â  Â  Â  Â  //</span> we want to make our new sheet the current sheet, so we need to ask the model</p>
  <p class="P21">Â  Â  Â  Â  // for the controller: first query the XModel interface from our spreadsheet component</p>
  <p class="P22">Â  Â  Â  Â  XModel xSpreadsheetModel = (XModel)UnoRuntime.<span class="T8">queryInterface</span>(</p>
  <p class="P22">Â  Â  Â  Â  Â  Â XModel.class, xSpreadsheetComponent);</p>
  <p class="P22">Â  Â  Â  Â  </p>
  <p class="P22">Â  Â  Â  Â  // then get the current controller from the model</p>
  <p class="P22">Â  Â  Â  Â  XController xSpreadsheetController = xSpreadsheetModel.<span class="T8">getCurrentController</span>();</p>
  <p class="P22">Â </p>
  <p class="P22">Â  Â  Â  Â  // get the XSpreadsheetView interface from the controller, we want to call its method</p>
  <p class="P21">Â  Â  Â  Â  // setActiveSheet</p>
  <p class="P22">Â  Â  Â  Â  XSpreadsheetView xSpreadsheetView = (XSpreadsheetView)UnoRuntime.<span class="T8">queryInterface</span>(</p>
  <p class="P22">Â  Â  Â  Â  Â  Â XSpreadsheetView.class, xSpreadsheetController);</p>
  <p class="P22">Â </p>
  <p class="P22">Â  Â  Â  Â  // make our newly inserted sheet the active sheet using setActiveSheet</p>
  <p class="P22">Â  Â  Â  Â  xSpreadsheetView.<span class="T8">setActiveSheet</span>(xSpreadsheet); Â  Â  </p>
  <p class="P22">Â  Â  }</p>
  <p class="P22">Â  Â  catch( com.sun.star.lang.DisposedException e ) { //works from Patch 1</p>
  <p class="P22">Â  Â  Â  Â  xRemoteContext = null;</p>
  <p class="P22">Â  Â  Â  Â  throw e;</p>
  <p class="P22">Â  Â  } Â  Â  Â  Â  Â </p>
  <p class="P22">}Â </p>
  <p class="Paragraph">Alternatively, you can add <span class="wwwftpemail">FirstLoadComponent.java</span> from the samples directory to your current project, it contains the changes shown above.</p>
  <h3 class="Head3"><a name="1_5_4_Common_Types" />2.5.4Â Â Common Types</h3>
  <p class="P15">Until now, literals and common Java types for method parameters and return values have been used as if the OpenOffice.org API was made for Java. However, it is important to understand that UNO is designed to be language independent and therefore has its own set of types which have to be mapped to the proper types for your language binding. The type mappings are briefly described in this section. Refer to <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_Professional_UNO" title="see chapter 3 Professional UNO">3 Professional UNO</a></span> for detailed information about type mappings. </p>
  <h4 class="Head4"><a name="1_5_4_1_Basic_Types" />Basic Types</h4>
  <p class="P18">The basic UNO types (where the term âbasicâ has nothing to do with OpenOffice.org Basic) occur as members of structs, as method return types or method parameters. The following table shows the basic UNO types and, if available, their exact mappings to Java, C++, and OpenOffice.org Basic types. Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle1"><colgroup><col width="89" /><col width="178" /><col width="106" /><col width="167" /><col width="166" /></colgroup><tr><td style="text-align:left;width:1.944cm; " class="Tabelle1A1">
      <p class="TableHead">UNOÂ </p>
     </td><td style="text-align:left;width:3.896cm; " class="Tabelle1A1">
      <p class="TableHead">Type descriptionÂ </p>
     </td><td style="text-align:left;width:2.325cm; " class="Tabelle1A1">
      <p class="TableHead">JavaÂ </p>
     </td><td style="text-align:left;width:3.646cm; " class="Tabelle1A1">
      <p class="TableHead">C++Â </p>
     </td><td style="text-align:left;width:3.628cm; " class="Tabelle1E1">
      <p class="TableHead">BasicÂ </p>
     </td></tr><tr><td style="text-align:left;width:1.944cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">void</span></p>
    </td><td style="text-align:left;width:3.896cm; " class="Tabelle1A2">
     <p class="TextInTable">empty type, used only as method return type and in <span class="Codeintext">any</span></p>
    </td><td style="text-align:left;width:2.325cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">void</span></p>
    </td><td style="text-align:left;width:3.646cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">void</span></p>
    </td><td style="text-align:left;width:3.628cm; " class="Tabelle1E2">
     <p class="TextInTable"><span class="CODEKeyWord">-</span></p>
    </td></tr><tr><td style="text-align:left;width:1.944cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">boolean</span></p>
    </td><td style="text-align:left;width:3.896cm; " class="Tabelle1A2">
     <p class="TextInTable">Boolean type; true and falseÂ </p>
    </td><td style="text-align:left;width:2.325cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">boolean</span></p>
    </td><td style="text-align:left;width:3.646cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">sal_Bool</span></p>
    </td><td style="text-align:left;width:3.628cm; " class="Tabelle1E2">
     <p class="TextInTable"><span class="CODEKeyWord">Boolean</span></p>
    </td></tr><tr><td style="text-align:left;width:1.944cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">byte</span></p>
    </td><td style="text-align:left;width:3.896cm; " class="Tabelle1A2">
     <p class="TextInTable">signed 8-bit integer typeÂ </p>
    </td><td style="text-align:left;width:2.325cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">byte</span></p>
    </td><td style="text-align:left;width:3.646cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">sal_Int8</span></p>
    </td><td style="text-align:left;width:3.628cm; " class="Tabelle1E2">
     <p class="TextInTable"><span class="CODEKeyWord">Integer</span></p>
    </td></tr><tr><td style="text-align:left;width:1.944cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">short</span></p>
    </td><td style="text-align:left;width:3.896cm; " class="Tabelle1A2">
     <p class="TextInTable">signed 16-bit integer typeÂ </p>
    </td><td style="text-align:left;width:2.325cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">short</span></p>
    </td><td style="text-align:left;width:3.646cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">sal_Int16</span></p>
    </td><td style="text-align:left;width:3.628cm; " class="Tabelle1E2">
     <p class="TextInTable"><span class="CODEKeyWord">Integer</span></p>
    </td></tr><tr><td style="text-align:left;width:1.944cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">unsigned short</span></p>
    </td><td style="text-align:left;width:3.896cm; " class="Tabelle1A2">
     <p class="TextInTable">unsigned 16-bit integer type (deprecated)Â </p>
    </td><td style="text-align:left;width:2.325cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">-</span></p>
    </td><td style="text-align:left;width:3.646cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">sal_uInt16</span></p>
    </td><td style="text-align:left;width:3.628cm; " class="Tabelle1E2">
     <p class="TextInTable"><span class="CODEKeyWord">-</span></p>
    </td></tr><tr><td style="text-align:left;width:1.944cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">long</span></p>
    </td><td style="text-align:left;width:3.896cm; " class="Tabelle1A2">
     <p class="TextInTable">signed 32-bit integer typeÂ </p>
    </td><td style="text-align:left;width:2.325cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">int</span></p>
    </td><td style="text-align:left;width:3.646cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">sal_Int32</span></p>
    </td><td style="text-align:left;width:3.628cm; " class="Tabelle1E2">
     <p class="TextInTable"><span class="CODEKeyWord">Long</span></p>
    </td></tr><tr><td style="text-align:left;width:1.944cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">unsigned long</span></p>
    </td><td style="text-align:left;width:3.896cm; " class="Tabelle1A2">
     <p class="TextInTable">unsigned 32-bit integer type (deprecated)Â </p>
    </td><td style="text-align:left;width:2.325cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">-</span></p>
    </td><td style="text-align:left;width:3.646cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">sal_uInt32</span></p>
    </td><td style="text-align:left;width:3.628cm; " class="Tabelle1E2">
     <p class="TextInTable"><span class="CODEKeyWord">-</span></p>
    </td></tr><tr><td style="text-align:left;width:1.944cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">hyper</span></p>
    </td><td style="text-align:left;width:3.896cm; " class="Tabelle1A2">
     <p class="TextInTable">signed 64-bit integer typeÂ </p>
    </td><td style="text-align:left;width:2.325cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">long</span></p>
    </td><td style="text-align:left;width:3.646cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">sal_Int64</span></p>
    </td><td style="text-align:left;width:3.628cm; " class="Tabelle1E2">
     <p class="TextInTable"><span class="CODEKeyWord">-</span></p>
    </td></tr><tr><td style="text-align:left;width:1.944cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">unsigned hyper</span></p>
    </td><td style="text-align:left;width:3.896cm; " class="Tabelle1A2">
     <p class="TextInTable">unsigned 64-bit integer type (deprecated)Â </p>
    </td><td style="text-align:left;width:2.325cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">-</span></p>
    </td><td style="text-align:left;width:3.646cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">sal_uInt64</span></p>
    </td><td style="text-align:left;width:3.628cm; " class="Tabelle1E2">
     <p class="TextInTable"><span class="CODEKeyWord">-</span></p>
    </td></tr><tr><td style="text-align:left;width:1.944cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">float</span></p>
    </td><td style="text-align:left;width:3.896cm; " class="Tabelle1A2">
     <p class="TextInTable">IECÂ 60559 single precision floating point typeÂ </p>
    </td><td style="text-align:left;width:2.325cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">float</span></p>
    </td><td style="text-align:left;width:3.646cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">float</span> (if appropriate)</p>
    </td><td style="text-align:left;width:3.628cm; " class="Tabelle1E2">
     <p class="TextInTable"><span class="CODEKeyWord">Single</span></p>
    </td></tr><tr><td style="text-align:left;width:1.944cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">double</span></p>
    </td><td style="text-align:left;width:3.896cm; " class="Tabelle1A2">
     <p class="TextInTable">IECÂ 60559 double precision floating point typeÂ </p>
    </td><td style="text-align:left;width:2.325cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">double</span></p>
    </td><td style="text-align:left;width:3.646cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">double</span> (if appropriate)</p>
    </td><td style="text-align:left;width:3.628cm; " class="Tabelle1E2">
     <p class="TextInTable"><span class="CODEKeyWord">Double</span></p>
    </td></tr><tr><td style="text-align:left;width:1.944cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">char</span></p>
    </td><td style="text-align:left;width:3.896cm; " class="Tabelle1A2">
     <p class="TextInTable">16-bit Unicode character type (more precisely: UTF-16 code units)-Â </p>
    </td><td style="text-align:left;width:2.325cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">char</span></p>
    </td><td style="text-align:left;width:3.646cm; " class="Tabelle1A2">
     <p class="TextInTable"><span class="CODEKeyWord">sal_Unicode</span></p>
    </td><td style="text-align:left;width:3.628cm; " class="Tabelle1E2">
     <p class="TextInTable"><span class="CODEKeyWord">-</span></p>
    </td></tr></table></div>
  <p class="P18">There are special conditions for types that do not have an exact mapping in this table. Check for details about these types in the corresponding sections about type mappings in <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_4_UNO_Language_Bindings" title="see chapter 3.4 Professional UNO - UNO Language Bindings">3.4 Professional UNO - UNO Language Bindings</a></span>.</p>
  <h4 class="Head4"><a name="1_5_4_2_Strings" />Strings</h4>
  <p class="Paragraph">UNO considers strings to be simple types, but since they need special treatment in some environments, we discuss them separately here.Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table2"><colgroup><col width="89" /><col width="173" /><col width="111" /><col width="167" /><col width="165" /></colgroup><tr><td style="text-align:left;width:1.944cm; " class="Table2A1">
      <p class="TableHead">UNOÂ </p>
     </td><td style="text-align:left;width:3.791cm; " class="Table2A1">
      <p class="TableHead">DescriptionÂ </p>
     </td><td style="text-align:left;width:2.432cm; " class="Table2A1">
      <p class="TableHead">JavaÂ </p>
     </td><td style="text-align:left;width:3.648cm; " class="Table2A1">
      <p class="TableHead">C++Â </p>
     </td><td style="text-align:left;width:3.621cm; " class="Table2E1">
      <p class="TableHead">BasicÂ </p>
     </td></tr><tr><td style="text-align:left;width:1.944cm; " class="Table2A2">
     <p class="TextInTable"><span class="Codeintext">string</span></p>
    </td><td style="text-align:left;width:3.791cm; " class="Table2A2">
     <p class="TextInTable">Unicode string type (more precisely: strings of Unicode scalar values)Â </p>
    </td><td style="text-align:left;width:2.432cm; " class="Table2A2">
     <p class="TextInTable"><span class="Codeintext">java.lang.Â­String</span></p>
    </td><td style="text-align:left;width:3.648cm; " class="Table2A2">
     <p class="TextInTable"><span class="Codeintext">rtl::OUString</span></p>
    </td><td style="text-align:left;width:3.621cm; " class="Table2E2">
     <p class="TextInTable"><span class="Codeintext">String</span></p>
    </td></tr></table></div>
  <p class="Paragraph">In Java, use UNO strings as if they were native <span class="Codeintext">java.lang.String</span> objects.</p>
  <p class="Paragraph">In C++, native <span class="Codeintext">char</span> strings must be converted to UNO Unicode strings by means of SAL conversion functions, usually the function <span class="Codeintext">createFromAscii()</span> in the <span class="Codeintext">rtl::OUString</span> class:</p>
  <p class="Code">//C++Â </p>
  <p class="Code">static OUString createFromAscii( const sal_Char * value ) throw(); Â </p>
  <p class="Paragraph">In Basic, Basic strings are mapped to UNO strings transparently.Â </p>
  <h4 class="Head4"><a name="1_5_4_3_Enum_Types_and_Groups_of_Constants" />Enum Types and Groups of Constants</h4>
  <p class="Paragraph">The OpenOffice.org API uses many enumeration types (called enums) and groups of constants (called constant groups). <span class="T4">Enums</span> are used to list every plausible value in a certain context. The <span class="T4">constant groups</span> define possible values for properties, parameters, return values and struct members.</p>
  <p class="P18">For example, there is an enum <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/table/CellVertJustify.html" title="see type com.sun.star.table.CellVertJustify">com.sun.star.table.CellVertJustify</a></span> that describes the possible values for the vertical adjustment of table cell content. The vertical adjustment of table cells is determined by their property <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/table/CellProperties.html#VertJustify" title="see VertJustify of type com.sun.star.table.CellProperties:VertJustify">com.sun.star.table.CellProperties:VertJustify</a></span>. The possible values for this property are, according to <span class="Codeintext">CellVertJustify</span>, the values <span class="Codeintext">STANDARD</span>, <span class="Codeintext">TOP</span>, <span class="Codeintext">CENTER</span> and <span class="Codeintext">BOTTOM</span>.</p>
  <p class="P21">// adjust<span class="T17"> a cell content to the upper cell border</span></p>
  <p class="P22">// The service com.sun.star.table.Cell includes the service com.sun.star.table.CellPropertiesÂ </p>
  <p class="P22">// and therefore has a property VertJustify that controls the vertical cell adjustmentÂ </p>
  <p class="P22">// we have to use the XPropertySet interface of our Cell to set itÂ </p>
  <p class="P22">Â </p>
  <p class="P23"><span class="T17">xCellProps</span>.setPropertyValue("VertJustify", com.sun.star.table.CellVertJustify.TOP);</p>
  <p class="Paragraph">OpenOffice.org Basic understands enumeration types and constant groups. Their usage is straightforward:Â </p>
  <p class="P24">'OpenOffice.org BasicÂ </p>
  <p class="P24">oCellProps.VertJustify = com.sun.star.table.CellVertJustify.TOPÂ </p>
  <p class="Paragraph">In C++ enums and constant groups are used with the scope operator ::Â </p>
  <p class="P25">//C++Â </p>
  <p class="P25">rCellProps-&gt;setPropertyValue(OUString::createFromAscii( "VertJustify" ), Â </p>
  <p class="P25">Â  Â  Â  Â  ::com::sun::star::table::CellVertJustify.TOP);</p>
  <h3 class="Head3"><a name="1_5_5_Struct" />2.5.5Â Â Struct</h3>
  <p class="Paragraph">Structs in the OpenOffice.org API are used to create compounds of other UNO types. They correspond to C structs or Java classes consisting of public member variables only.Â </p>
  <p class="Paragraph">While structs do not encapsulate data, they are easier to transport as a whole, instead of marshalling <span class="Codeintext">get()</span> and <span class="Codeintext">set()</span> calls back and forth. In particular, this has advantages for remote communication.</p>
  <p class="Paragraph">You gain access to struct members through the<span class="Codeintext"> . </span>(dot) operator as in </p>
  <p class="Code">aProperty.Name = "ReadOnly";Â </p>
  <p class="Paragraph">In Java, C++ und OpenOffice.org Basic, the keyword <span class="Codeintext">new</span> instantiates structs. In OLE automation, use <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/CoreReflection.html" title="see type com.sun.star.reflection.CoreReflection">com.sun.star.reflection.CoreReflection</a></span> to get a UNO struct. Do not use the service manager to create structs.</p>
  <p class="Code">//In Java:Â </p>
  <p class="Code">com.sun.star.beans.PropertyValue aProperty = new com.sun.star.beans.PropertyValue();Â </p>
  <p class="P26">Â </p>
  <p class="Code">'In StarBasicÂ </p>
  <p class="Code">Dim aProperty as new com.sun.star.beans.PropertyValueÂ </p>
  <h3 class="Head3"><a name="1_5_6_Any" />2.5.6Â Â Any</h3>
  <p class="Paragraph">The OpenOffice.org API frequently uses an <span class="T18">any</span><span class="T18"> </span>type, which is the counterpart of the <span class="Codeintext">Variant</span> type known from other environments. The <span class="Codeintext">any</span> type holds one arbitrary UNO type. The <span class="T18">any </span>type is especially used in generic UNO interfaces.</p>
  <p class="Paragraph">Examples for the occurrence of <span class="Codeintext">any</span> are the method parameters and return values of the following, frequently used methods:</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table1"><colgroup><col width="126" /><col width="231" /><col width="185" /><col width="162" /></colgroup><tr><td style="text-align:left;width:2.759cm; " class="Table1A1">
      <p class="TableHead">InterfaceÂ </p>
     </td><td style="text-align:left;width:5.062cm; " class="Table1A1">
      <p class="TableHead">returning an any typeÂ </p>
     </td><td colspan="2" style="text-align:left;width:4.06cm; " class="Table1C1">
      <p class="TableHead">taking an any typeÂ </p>
     </td></tr><tr><td style="text-align:left;width:2.759cm; " class="Table1A2">
     <p class="P27">XPropertySetÂ </p>
    </td><td style="text-align:left;width:5.062cm; " class="Table1A2">
     <p class="P27">any <span class="T8">getPropertyValue</span>(string propertyName)</p>
    </td><td colspan="2" style="text-align:left;width:4.06cm; " class="Table1C2">
     <p class="P27">void <span class="T8">setPropertyValue</span>(any value)</p>
    </td></tr><tr><td style="text-align:left;width:2.759cm; " class="Table1A2">
     <p class="P27">XNameContainerÂ </p>
    </td><td style="text-align:left;width:5.062cm; " class="Table1A2">
     <p class="P27">any <span class="T8">getByName</span>(string name)</p>
    </td><td style="text-align:left;width:4.06cm; " class="Table1A2">
     <p class="P27">void <span class="T8">replaceByName</span>(string name, any element)</p>
    </td><td style="text-align:left;width:3.558cm; " class="Table1C2">
     <p class="P27">void <span class="T8">insertByName</span>(string name, any element)</p>
    </td></tr><tr><td style="text-align:left;width:2.759cm; " class="Table1A2">
     <p class="P27">XIndexContainerÂ </p>
    </td><td style="text-align:left;width:5.062cm; " class="Table1A2">
     <p class="P27">any <span class="T8">getByIndex</span>(long index)</p>
    </td><td style="text-align:left;width:4.06cm; " class="Table1A2">
     <p class="P27">void <span class="T8">replaceByIndex</span>(long index, any element)</p>
    </td><td style="text-align:left;width:3.558cm; " class="Table1C2">
     <p class="P27">void <span class="T8">insertByIndex</span>(long index, any element)</p>
    </td></tr><tr><td style="text-align:left;width:2.759cm; " class="Table1A2">
     <p class="P27">XEnumerationÂ </p>
    </td><td style="text-align:left;width:5.062cm; " class="Table1A2">
     <p class="P27">any <span class="T8">nextElement</span>()</p>
    </td><td colspan="2" style="text-align:left;width:4.06cm; " class="Table1C2">
     <p class="P28">-Â </p>
    </td></tr></table></div>
  <p class="P29">Furthermore, the <span class="Codeintext">any</span> type occurs in the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/PropertyValue.html" title="see type com.sun.star.beans.PropertyValue">com.sun.star.beans.PropertyValue</a></span> struct. </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table7"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table7A1">
      <div class="Paragraph"><div style="width: 4.135cm; " id="Frame31" class="fr6">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/PropertyValue.png" title="link to the full-sized graphic &quot;./PropertyValue.png&quot;"><img border="0" width="177" height="137" alt="UML diagram showing the com.sunstar.beans.PropertyValue struct" src="./2 First Steps_files/PropertyValue.png" class="fr7" /></a>Illustration <a name="refIllustration2">2.3</a>: PropertyValue</div>
       </div></div>
     </td></tr></table></div>
  <p class="P29">This <span class="Codeintext">struct</span> has two member variables, <span class="Codeintext">Name</span> and <span class="Codeintext">Value</span>, and is ubiquitous in sets of <span class="Codeintext">PropertyValue</span> structs, where every <span class="Codeintext">PropertyValue</span> is a name-value pair that describes a property by name and value. If you need to set the value of such a <span class="Codeintext">PropertyValue</span> struct, you must assign an <span class="Codeintext">any</span> type, and you must be able to interpret the contained <span class="Codeintext">any</span>, if you are reading from a <span class="Codeintext">PropertyValue</span>. It depends on your language how this is done.</p>
  <p class="P29">In Java, the <span class="Codeintext">any</span> type is mapped to <span class="Codeintext">java.lang.Object</span>, but there is also a special Java class <span class="Codeintext">com.sun.star.uno.Any</span>, mainly used in those cases where a plain <span class="Codeintext">Object</span> would be ambiguous. There are two simple rules of thumb to follow:</p>
  <p class="Paragraph"><span class="T1">When you are supposed to </span><span class="T19">pass in</span><span class="T1"> an </span><span class="T20">any</span><span class="T1"> value, always pass in a </span><span class="T20">java.lang.Object</span><span class="T1"> or a Java UNO object.</span></p>
  <p class="P8">For instance, if you use <span class="Codeintext">setPropertyValue()</span> to <span class="T16">set</span> a property that has a non-interface type in the target object, you must pass in a <span class="Codeintext">java.lang.Object</span> for the new value. If the new value is of a primitive type in Java, use the corresponding <span class="Codeintext">Object</span> type for the primitive type:</p>
  <p class="Code">xCellProps.setPropertyValue("CharWeight", <span class="T8">new Double(200.0)</span>);</p>
  <p class="P18">Another example would be a <span class="Codeintext">PropertyValue</span> struct you want to use for <span class="Codeintext">loadComponentFromURL</span>:</p>
  <p class="Code">com.sun.star.beans.PropertyValue aProperty = new com.sun.star.beans.PropertyValue();Â </p>
  <p class="Code">aProperty.Name = "ReadOnly";Â </p>
  <p class="Code">aProperty.Value = <span class="T8">Boolean.TRUE</span>;</p>
  <p class="P30">When you <span class="T4">receive</span> an <span class="CODEKeyWord">any</span> instance, always use the <span class="Codeintext">com.sun.star.uno.AnyConverter</span> to retrieve its value.</p>
  <p class="Paragraph">The <span class="Codeintext">AnyConverter</span> requires a closer look. For instance, if you want to <span class="T16">get</span> a property which contains a primitive Java type, you must be aware that <span class="Codeintext">getPropertyValue()</span> returns a <span class="Codeintext">java.lang.Object</span> containing your primitive type wrapped in an <span class="CODEKeyWord">any</span> value. The <span class="Codeintext">com.sun.star.uno.AnyConverter</span> is a converter for such objects. Actually it can do more than just conversion, you can find its specification in the Java UNO reference. The following list sums up the conversion functions in the <span class="Codeintext">AnyConverter</span>:</p>
  <p class="MethodSignatures">static java.lang.Object <span class="MethodSignatureEmphasis">toArray</span>(java.lang.Object object)</p>
  <p class="MethodSignatures">static boolean <span class="MethodSignatureEmphasis">toBoolean</span>(java.lang.Object object) </p>
  <p class="MethodSignatures">static byte <span class="MethodSignatureEmphasis">toByte</span>(java.lang.Object object) </p>
  <p class="MethodSignatures">static char <span class="MethodSignatureEmphasis">toChar</span>(java.lang.Object object) </p>
  <p class="MethodSignatures">static double <span class="MethodSignatureEmphasis">toDouble</span>(java.lang.Object object) </p>
  <p class="MethodSignatures">static float <span class="MethodSignatureEmphasis">toFloat</span>(java.lang.Object object) </p>
  <p class="MethodSignatures">static int <span class="MethodSignatureEmphasis">toInt</span>(java.lang.Object object) </p>
  <p class="MethodSignatures">static long <span class="MethodSignatureEmphasis">toLong</span>(java.lang.Object object) </p>
  <p class="MethodSignatures">static java.lang.Object <span class="MethodSignatureEmphasis">toObject</span>(Class clazz, java.lang.Object object) </p>
  <p class="MethodSignatures">static java.lang.Object <span class="MethodSignatureEmphasis">toObject</span>(Type type, java.lang.Object object) </p>
  <p class="MethodSignatures">static short <span class="MethodSignatureEmphasis">toShort</span>(java.lang.Object object) </p>
  <p class="MethodSignatures">static java.lang.String <span class="MethodSignatureEmphasis">toString</span>(java.lang.Object object) </p>
  <p class="MethodSignatures">static Type <span class="MethodSignatureEmphasis">toType</span>(java.lang.Object object)</p>
  <p class="MethodSignatures">static int <span class="MethodSignatureEmphasis">toUnsignedInt</span>(java.lang.Object object)</p>
  <p class="MethodSignatures">static long <span class="MethodSignatureEmphasis">toUnsignedLong</span>(java.lang.Object object)</p>
  <p class="MethodSignatures">static short <span class="MethodSignatureEmphasis">toUnsignedShort</span>(java.lang.Object object)</p>
  <p class="Paragraph">Its usage is straightforward:Â </p>
  <p class="P31">import com.sun.st<span class="T17">ar.uno.AnyConverter;</span></p>
  <p class="P32"><span class="T17">long cellColor = </span>AnyConverter.<span class="T8">toLong</span>(xCellProps.getPropertyValue("CharColor"));</p>
  <p class="Paragraph">For convenience, for interface types you can directly use <span class="Codeintext">UnoRuntime.queryInterface()</span> without first calling <span class="Codeintext">AnyConverter.getObject()</span>:</p>
  <p class="Code">import com.sun.star.uno.AnyConverter;<br />import com.sun.star.uno.UnoRuntime;</p>
  <p class="Code">Object ranges = xSpreadsheet.getPropertyValue("NamedRanges");Â </p>
  <p class="Code">XNamedRanges ranges1 = (XNamedRanges) UnoRuntime.queryInterface(Â </p>
  <p class="Code">Â  Â  XNamedRanges.class, AnyConverter.toObject(XNamedRanges.class, r));</p>
  <p class="Code">XNamedRanges ranges2 = (XNamedRanges) UnoRuntime.queryInterface(<br /> Â  Â XNamedRanges.class, r);</p>
  <p class="Paragraph">In OpenOffice.org Basic, the <span class="CODEKeyWord">any</span> type becomes a Variant:</p>
  <p class="P24">'OpenOffice.org BasicÂ </p>
  <p class="P24">Dim cellColor as VariantÂ </p>
  <p class="P24">cellColor = oCellProps.CharColorÂ </p>
  <p class="Paragraph">In C++, there are special operators for the <span class="CODEKeyWord">any</span> type:</p>
  <p class="P24">//C++ has &gt;&gt;= and &lt;&lt;= for Any (the pointed brackets are always left)Â </p>
  <p class="Code">sal_Int32 cellColor;Â </p>
  <p class="Code">Any any;Â </p>
  <p class="Code">any = rCellProps-&gt;getPropertyValue(OUString::createFromAscii( "CharColor" ));Â </p>
  <p class="Code">// extract the value from anyÂ </p>
  <p class="Code">any &gt;&gt;= cellColor;Â </p>
  <h3 class="Head3"><a name="1_5_7_Sequence" />2.5.7Â Â Sequence</h3>
  <p class="Paragraph">A sequence is a homogeneous collection of values of one UNO type with a variable number of elements. Sequences map to arrays in most current language bindings. Although such collections are sometimes implemented as objects with element access methods in UNO (e.g., via the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XEnumeration.html" title="see type com.sun.star.container.XEnumeration">com.sun.star.container.XEnumeration</a></span> interface), there is also the sequence type, to be used where remote performance matters. Sequences are always written with pointed brackets in the API reference:</p>
  <p class="Code">// a sequence of strings is notated as follows in the API referenceÂ </p>
  <p class="Code">sequence&lt; string &gt; aStringSequence;Â </p>
  <p class="Paragraph">In Java, you treat sequences as arrays. (But do not use <span class="Codeintext">null</span> for empty sequences, use arrays created via <span class="Codeintext">new</span> and with a length of zero instead.) Furthermore, keep in mind that you only create an array of references when creating an array of Java objects, the actual objects are not allocated. Therefore, you must use <span class="Codeintext">new</span> to create the array itself, then you must again use <span class="Codeintext">new</span><span class="Codeintext"><span class="CodeEmphasis"> </span></span>for every single object and assign the new objects to the array.</p>
  <p class="Paragraph">An empty sequence of <span class="Codeintext">PropertyValue</span> structs is frequently needed for <span class="Codeintext">loadComponentFromURL:</span></p>
  <p class="Code">// create an empty array of PropertyValue structs for loadComponentFromURLÂ </p>
  <p class="P21"><span class="T17">PropertyValue[] emptyProps = </span><span class="T21">new</span><span class="T17"> PropertyValue[0];</span></p>
  <p class="Paragraph">A sequence of <span class="Codeintext">PropertyValue</span> structs is needed to use loading parameters with <span class="Codeintext">loadComponentFromURL()</span>. The possible parameter values for <span class="Codeintext">loadComponentFromURL()</span> and the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XStorable.html" title="see type com.sun.star.frame.XStorable">com.sun.star.frame.XStorable</a></span> interface can be found in the service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/document/MediaDescriptor.html" title="see type com.sun.star.document.MediaDescriptor">com.sun.star.document.MediaDescriptor</a></span>.</p>
  <p class="P22">// create an array with one PropertyValue struct for loadComponentFromURL, it contains references onlyÂ </p>
  <p class="Code">PropertyValue[] loadProps = new PropertyValue[1];Â </p>
  <p class="Code">Â </p>
  <p class="Code">// instantiate PropertyValue struct and set its member fieldsÂ </p>
  <p class="Code">PropertyValue asTemplate = new PropertyValue();Â </p>
  <p class="Code">asTemplate.Name = "AsTemplate";Â </p>
  <p class="Code">asTemplate.Value = Boolean.TRUE;Â </p>
  <p class="Code">Â </p>
  <p class="Code">// assign PropertyValue struct to first element in our array of references to PropertyValue structsÂ </p>
  <p class="Code">loadProps[0] = asTemplate;Â </p>
  <p class="Code">Â </p>
  <p class="P22">// load calc file as templateÂ </p>
  <p class="P22">XComponent xSpreadsheetComponent = xComponentLoader.<span class="T8">loadComponentFromURL</span>(</p>
  <p class="P22">Â  Â  "file:///X:/share/samples/english/spreadsheets/OfficeSharingAssoc.sxc",</p>
  <p class="P22">Â  Â  "_blank", 0, loadProps);</p>
  <p class="Paragraph">In OpenOffice.org Basic, a simple <span class="Codeintext">Dim</span> creates an empty array.</p>
  <p class="P24">'OpenOffice.org BasicÂ </p>
  <p class="P33">Dim loadProps() Â 'empty array</p>
  <p class="Paragraph">A sequence of structs is created using <span class="Codeintext">new</span> together with <span class="Codeintext">Dim</span>.</p>
  <p class="P24">'OpenOffice.org BasicÂ </p>
  <p class="P24">Dim loadProps(0) as new com.sun.star.beans.PropertyValue 'one PropertyValueÂ </p>
  <p class="Paragraph">In C++, there is a class template for sequences. An empty sequence can be created by omitting the number of elements required.Â </p>
  <p class="P25">//C++Â </p>
  <p class="P25">Sequence&lt; ::com::sun::star::beans::PropertyValue &gt; loadProperties; // empty sequenceÂ </p>
  <p class="Paragraph">If you pass a number of elements, you get an array of the requested length.Â </p>
  <p class="P24">//C++Â </p>
  <p class="P24">Sequence&lt; ::com::sun::star::beans::PropertyValue &gt; loadProps( 1 );Â </p>
  <p class="Code">// the structs are default constructedÂ </p>
  <p class="Code">loadProps[0].Name = OUString::createFromAscii( "AsTemplate" );Â </p>
  <p class="Code">loadProps[0].Handle &lt;&lt;= true;Â </p>
  <p class="Code">Â </p>
  <p class="Code">Reference&lt; XComponent &gt; rComponent = rComponentLoader-&gt;loadComponentFromURL(Â </p>
  <p class="Code">Â  Â  Â  Â  OUString::createFromAscii("private:factory/swriter"), </p>
  <p class="Code">Â  Â  Â  Â  OUString::createFromAscii("_blank"), </p>
  <p class="Code">Â  Â  Â  Â  0, </p>
  <p class="Code">Â  Â  Â  Â  loadProps);</p>
  <h3 class="Head3"><a name="1_5_8_Element_Access" />2.5.8Â Â Element Access</h3>
  <p class="Paragraph">We have already seen in section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/FirstSteps.xhtml#1_4_How_to_get_Objects_in_OpenOffice.org" title="see chapter 2.4 First Steps - How to get Objects in OpenOffice.org">2.4 First Steps - How to get Objects in OpenOffice.org</a></span> that sets of objects can also be provided through element access methods. The three most important kinds of element access interfaces are <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XNameContainer.html" title="see type com.sun.star.container.XNameContainer">com.sun.star.container.XNameContainer</a></span>, <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XIndexContainer.html" title="see type com.sun.star.container.XIndexContainer">com.sun.star.container.XIndexContainer</a></span> and <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XEnumeration.html" title="see type com.sun.star.container.XEnumeration">com.sun.star.container.XEnumeration</a></span>.</p>
  <p class="Paragraph">The three element access interfaces are examples of how the fine-grained interfaces of the OpenOffice.org API allow consistent object design.Â </p>
  <p class="Paragraph">All three interfaces inherit from <span class="Codeintext">XElementAccess</span>, i.e., they include the methods:</p>
  <p class="MethodSignatures">type <span class="T8">getElementType</span>()</p>
  <p class="MethodSignatures">boolean <span class="T8">hasElements</span>()</p>
  <p class="Paragraph">to find out basic information about the set of elements. The method <span class="Codeintext">hasElements()</span> answers the question if a set contains elements at all, and which type a set contains. In Java and C++, you can get information about a UNO type through <span class="Codeintext">com.sun.star.uno.Type</span>, cf. the Java UNO and the C++ UNO reference.</p>
  <p class="P18">The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XIndexContainer.html" title="see type com.sun.star.container.XIndexContainer">com.sun.star.container.XIndexContainer</a></span> and <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XNameContainer.html" title="see type com.sun.star.container.XNameContainer">com.sun.star.container.XNameContainer</a></span> interface have a parallel design. Consider both interfaces in UML notation.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table8"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table8A1">
      <div class="Paragraph"><div style="width: 10.04cm; " id="Frame5" class="fr4">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/XNameIndexContainer.png" title="link to the full-sized graphic &quot;./XNameIndexContainer.png&quot;"><img border="0" width="456" height="672" alt="UML diagram showing the com.sun.star.container.XIndexContainer and com.sun.star.container.XNameContainer" src="./2 First Steps_files/XNameIndexContainer.png" class="fr5" /></a>Illustration <a name="refIllustration3">2.4</a>: Indexed and Named Container</div>
       </div></div>
     </td></tr></table></div>
  <p class="P19">The <span class="Codeintext">XIndexAccess/XNameAccess</span> interfaces are about <span class="T14">getting</span> an element. The <span class="Codeintext">XIndexReplace/XNameReplace</span> interfaces allow you to <span class="T14">replace</span><span class="T4"> existing</span> elements without changing the number of elements in the set, whereas the <span class="Codeintext">XIndexContainer/XNameContainer</span> interfaces allow you to <span class="T14">increase and decrease the number of elements</span> by inserting and removing elements.</p>
  <p class="Paragraph">Many sets of named or indexed objects do not support the whole inheritance hierarchy of <span class="Codeintext">XIndexContainer</span> or <span class="Codeintext">XNameContainer</span>, because the capabilities added by every subclass are not always logical for any set of elements.</p>
  <p class="Paragraph">The <span class="Codeintext">XEumerationAccess</span> interface works differently from named and indexed containers below the <span class="Codeintext">XElementAccess</span> interface. <span class="Codeintext">XEnumerationAccess</span> does not provide single elements like <span class="Codeintext">XNameAccess</span> and <span class="Codeintext">XIndexAccess</span>, but it creates an enumeration of objects which has methods to go to the next element as long as there are more elements. </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table9"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table9A1">
      <div class="Paragraph"><div style="width: 5.239cm; " id="Frame6" class="fr6">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/XEnumerationAccess.png" title="link to the full-sized graphic &quot;./XEnumerationAccess.png&quot;"><img border="0" width="231" height="528" alt="UML diagram showing the com.sun.star.container.XEnumeration interface" src="./2 First Steps_files/XEnumerationAccess.png" class="fr7" /></a>Illustration <a name="refIllustration4">2.5</a>: Enumerated Container</div>
       </div></div>
     </td></tr></table></div>
  <p class="Paragraph">Sets of objects sometimes support all element access methods, some also support only name, index, or enumeration access. Always look up the various types in the API reference to see which access methods are available.Â </p>
  <p class="Paragraph">For instance, the method <span class="Codeintext">getSheets()</span> at the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/sheet/XSpreadsheetDocument.html" title="see type com.sun.star.sheet.XSpreadsheetDocument">com.sun.star.sheet.XSpreadsheetDocument</a></span> is specified to return a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/sheet/XSpreadsheets.html" title="see type com.sun.star.sheet.XSpreadsheets">com.sun.star.sheet.XSpreadsheets</a></span> interface inherited from <span class="Codeintext">XNameContainer</span>. In addition, the API reference tells you that the provided object supports the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/sheet/Spreadsheets.html" title="see type com.sun.star.sheet.Spreadsheets">com.sun.star.sheet.Spreadsheets</a></span> service, which defines additional element access interfaces besides <span class="Codeintext">XSpreadsheets</span>.</p>
  <p class="Paragraph">Examples that show how to work with <span class="Codeintext">XNameAccess</span>, <span class="Codeintext">XIndexAccess</span>, and <span class="Codeintext">XEnumerationAccess</span> are provided below.</p>
  <h4 class="Head4"><a name="1_5_8_1_Name_Access" />Name Access</h4>
  <p class="Paragraph">The basic interface which hands out elements by name is the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XNameAccess.html" title="see type com.sun.star.container.XNameAccess">com.sun.star.container.XNameAccess</a></span> interface. It has three methods:</p>
  <p class="MethodSignatures">any <span class="T8">getByName</span>( [in] string name)</p>
  <p class="MethodSignatures">sequence&lt; string &gt; <span class="T8">getElementNames</span>()</p>
  <p class="MethodSignatures">boolean <span class="T8">hasByName</span>( [in] string name)</p>
  <p class="Paragraph">In the FirstLoadComponent example above, the method <span class="Codeintext">getSheets()</span> returned a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/sheet/XSpreadsheets.html" title="see type com.sun.star.sheet.XSpreadsheets">com.sun.star.sheet.XSpreadsheets</a></span> interface, which inherits from <span class="Codeintext">XNameAccess</span>. Therefore, you could use <span class="Codeintext">getByName()</span> to obtain the sheet "MySheet" by name from the <span class="Codeintext">XSpreadsheets</span> container:</p>
  <p class="Code">XSpreadsheets xSpreadsheets = xSpreadsheetDocument.<span class="T8">getSheets</span>();</p>
  <p class="P22">Â </p>
  <p class="P22">Object sheet = xSpreadsheets.<span class="T8">getByName</span>("MySheet");</p>
  <p class="P34">XSpreadsheet xSpreadsheet = (XSpreadsheet)UnoRuntime.<span class="T8">queryInterface</span>(</p>
  <p class="P22">Â  Â  Â  Â  Â  Â  XSpreadsheet.class, sheet);</p>
  <p class="P22">Â </p>
  <p class="P22">// use XSpreadsheet interface to get the cell A1 at position 0,0 and enter 42 as valueÂ </p>
  <p class="P22">XCell xCell = xSpreadsheet.<span class="T8">getCellByPosition</span>(0, 0);</p>
  <p class="Paragraph">Since <span class="Codeintext">getByName()</span> returns an <span class="Codeintext">any</span>, you have to use <span class="Codeintext">AnyConverter.toObject()</span> and/or <span class="Codeintext">UnoRuntime.queryInterface()</span> before you can call methods at the spreadsheet object.</p>
  <h4 class="Head4"><a name="1_5_8_2_Index_Access" />Index Access</h4>
  <p class="P18">The interface which hands out elements by index is the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XIndexAccess.html" title="see type com.sun.star.container.XIndexAccess">com.sun.star.container.XIndexAccess</a></span> interface. It has two methods:</p>
  <p class="MethodSignatures">any <span class="T8">getByIndex</span>( [in] long index)</p>
  <p class="MethodSignatures">long <span class="T8">getCount</span>()</p>
  <p class="Paragraph">The FirstLoadComponent example allows to demonstrate <span class="Codeintext">XIndexAccess</span>. The API reference tells us that the service returned by <span class="Codeintext">getSheets()</span> is a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/sheet/Spreadsheet.html" title="see type com.sun.star.sheet.Spreadsheet">com.sun.star.sheet.Spreadsheet</a></span> service and supports not only the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/sheet/XSpreadsheets.html" title="see type com.sun.star.sheet.XSpreadsheets">com.sun.star.sheet.XSpreadsheets</a></span>, but <span class="Codeintext">XIndexAccess</span> as well. Therefore, the sheets could have been accessed by index and not just by name by performing a query for the <span class="Codeintext">XIndexAccess</span> interface from our <span class="Codeintext">xSpreadsheets</span> variable:</p>
  <p class="Code">XIndexAccess xSheetIndexAccess = (XIndexAccess)UnoRuntime.<span class="T8">queryInterface</span>(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â XIndexAccess.class, xSpreadsheets);</p>
  <p class="Code">Â </p>
  <p class="Code">Object sheet = XSheetIndexAccess.<span class="T8">getByIndex</span>(0);</p>
  <h4 class="Head4"><a name="1_5_8_3_Enumeration_Access" />Enumeration Access</h4>
  <p class="Paragraph">The interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XEnumerationAccess.html" title="see type com.sun.star.container.XEnumerationAccess">com.sun.star.container.XEnumerationAccess</a></span> creates enumerations that allow traveling across a set of objects. It has one method:</p>
  <p class="MethodSignatures">com.sun.star.container.XEnumeration <span class="T8">createEnumeration</span>()</p>
  <p class="P18">The enumeration object gained from <span class="Codeintext">createEnumeration()</span> supports the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XEnumeration.html" title="see type com.sun.star.container.XEnumeration">com.sun.star.container.XEnumeration</a></span>. With this interface we can keep pulling elements out of the enumeration as long as it has more elements. <span class="Codeintext">XEnumeration</span> supplies the methods:</p>
  <p class="MethodSignatures"><span class="T17">boolean</span> <span class="T8">hasMoreElements</span>()</p>
  <p class="MethodSignatures">any <span class="T8">nextElement</span>()</p>
  <p class="Paragraph">which are meant to build loops such as:Â </p>
  <p class="Code">while (xCells.<span class="T8">hasMoreElements</span>()) {</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Object cell = xCells.<span class="T8">nextElement</span>();</p>
  <p class="Code">Â  Â  // do something with cell </p>
  <p class="Code">}Â </p>
  <p class="Paragraph">For example, in spreadsheets you have the opportunity to find out which cells contain formulas. The resulting set of cells is provided as <span class="Codeintext">XEnumerationAccess</span>. </p>
  <p class="Paragraph">The interface that queries for cells with formulas is <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/sheet/XCellRangesQuery.html" title="see type com.sun.star.sheet.XCellRangesQuery">com.sun.star.sheet.XCellRangesQuery</a></span>, it defines (among others) a method</p>
  <p class="MethodSignatures"><span class="T17">XSheetCellRanges </span><span class="T21">queryContentCells</span>(short cellFlags)</p>
  <p class="Paragraph">which queries for cells having content as defined in the constants group <a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/sheet/CellFlags.html" title="see type com.sun.star.sheet.CellFlags">com.sun.star.sheet.CellFlags</a>. One of these cell flags is <span class="Codeintext">FORMULA</span>. From <span class="Codeintext">queryContentCells() </span>we receive an object with an <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/sheet/XSheetCellRanges.html" title="see type com.sun.star.sheet.XSheetCellRanges">com.sun.star.sheet.XSheetCellRanges</a></span> interface, which has these methods:</p>
  <p class="MethodSignatures"><span class="T22">XEnumerationAccess</span><span class="T21"> </span><span class="T23">getCells</span>()</p>
  <p class="MethodSignatures"><span class="T22">String</span><span class="T21"> </span><span class="T23">getRangeAddressesAsString</span>()</p>
  <p class="MethodSignatures">sequence&lt; com.sun.star.table.CellRangeAddress &gt; <span class="T24">getRangeAddresses</span>()</p>
  <p class="Paragraph">The method <span class="Codeintext">getCells()</span> can be used to list all formula cells and the containing formulas in the spreadsheet document from our FirstLoadComponent example, utilizing <span class="Codeintext">XEnumerationAccess</span>.(<a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/examples/DevelopersGuide/FirstSteps/FirstLoadComponent.java" title="goto source FirstSteps/FirstLoadComponent.java">FirstSteps/FirstLoadComponent.java</a>)</p>
  <p class="Code">XCellRangesQuery xCellQuery = (XCellRangesQuery)UnoRuntime.queryInterface(Â </p>
  <p class="Code">Â  Â  XCellRangesQuery.class, sheet);</p>
  <p class="Code">XSheetCellRanges xFormulaCells = xCellQuery.queryContentCells(Â </p>
  <p class="Code">Â  Â  (short)com.sun.star.sheet.CellFlags.FORMULA);</p>
  <p class="Code">Â </p>
  <p class="Code"><span class="T8">XEnumerationAccess</span> xFormulas = xFormulaCells.<span class="T8">getCells</span>();</p>
  <p class="Code"><span class="T8">XEnumeration</span> xFormulaEnum = xFormulas.<span class="T8">createEnumeration</span>();</p>
  <p class="Code">Â </p>
  <p class="Code">while (xFormulaEnum.<span class="T8">hasMoreElements</span>()) {</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Object formulaCell = xFormulaEnum.<span class="T8">nextElement</span>();</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  // do something with formulaCell</p>
  <p class="Code">Â  Â  xCell = (XCell)UnoRuntime.queryInterface(XCell.class, formulaCell);</p>
  <p class="Code">Â  Â  XCellAddressable xCellAddress = (XCellAddressable)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  XCellAddressable.class, xCell);</p>
  <p class="Code">Â  Â  System.out.print("Formula cell in column " + xCellAddress.getCellAddress().Column</p>
  <p class="Code">Â  Â  Â  Â  + ", row " + xCellAddress.getCellAddress().Row</p>
  <p class="Code">Â  Â  Â  Â  + " contains " + xCell.getFormula());</p>
  <p class="Code">}Â </p>
  <h2 class="Head2"><a name="1_6_How_do_I_know_Which_Type_I_Have_3F" />2.6Â Â How do I know Which Type I Have?</h2>
  <p class="Paragraph">A common problem is deciding what capabilities an object really has, after you receive it from a method.Â </p>
  <p class="Paragraph">By observing the code completion in Java IDE, you can discover the base interface of an object returned from a method. You will notice that <span class="Codeintext">loadComponentFromURL() </span>returns a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XComponent.html" title="see type com.sun.star.lang.XComponent">com.sun.star.lang.XComponent</a></span>. </p>
  <p class="Paragraph">By pressing Alt + F1<span class="ButtonsMenus"> </span>in the NetBeans IDE you can read specifications about the interfaces and services you are using.</p>
  <p class="Paragraph">However, methods can only be specified to return one interface type. The interface you get from a method very often supports more interfaces than the one that is returned by the method (especially when the design of those interfaces predates the availability of multiple-inheritance interface types in UNO). Furthermore, the interface does not tell anything about the properties the object contains.Â </p>
  <p class="Paragraph">Therefore you should uses this manual to get an idea how things work. Then start writing code, using the code completion and the API reference.Â </p>
  <p class="Paragraph">In addition, you can try the InstanceInspector, a Java tool which is part of the OpenOffice.org SDK examples. It is a Java component that can be registered with the office and shows interfaces and properties of the object you are currently working with.Â </p>
  <p class="Paragraph">In OpenOffice.org Basic, you can inspect objects using the following Basic properties.Â </p>
  <p class="Code">sub mainÂ </p>
  <p class="Code">Â  oDocument = thiscomponent</p>
  <p class="Code">Â  msgBox(oDocument.dbg_methods)</p>
  <p class="Code">Â  msgBox(oDocument.dbg_properties)</p>
  <p class="Code">Â  msgBox(oDocument.dbg_supportedInterfaces)</p>
  <p class="Code">end subÂ </p>
  <h2 class="Head2"><a name="1_7_Example_3A_Hello_Text_2C_Hello_Table_2C_Hello_Shape" />2.7Â Â Example: Hello Text, Hello Table, Hello Shape</h2>
  <p class="Paragraph">The goal of this section is to give a brief overview of those mechanisms in the OpenOffice.org API, which are common to all document types. The three main application areas of OpenOffice.org are text, tables and drawing shapes. The point is: texts, tables and drawing shapes can occur in all three document types, no matter if you are dealing with a Writer, Calc or Draw/Impress file, but they are treated in the same manner everywhere. When you master the common mechanisms, you will be able to insert and use texts, tables and drawings in all document types.Â </p>
  <h3 class="Head3"><a name="1_7_1_Common_Mechanisms_for_Text_2C_Tables_and_Drawings" />2.7.1Â Â Common Mechanisms for Text, Tables and Drawings</h3>
  <p class="Paragraph">We want to stress the common ground, therefore we start with the common interfaces and properties that allow to manipulate existing texts, tables and drawings. Afterwards we will demonstrate the different techniques to create text, table and drawings in each document type.Â </p>
  <p class="Paragraph">The key interfaces and properties to work with existing texts, tables and drawings are the following:Â </p>
  <p class="P35">For <span class="T3">text</span> the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/text/XText.html" title="see type com.sun.star.text.XText">com.sun.star.text.XText</a></span> contains the methods that change the actual text and other text contents (examples for text contents besides conventional text paragraphs are text tables, text fields, graphic objects and similar things, but such contents are not available in all contexts). When we talk about text here, we mean any text - text in text documents, text frames, page headers and footers, table cells or in drawing shapes. <span class="Codeintext">XText</span> is the key for text everywhere in OpenOffice.org. </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table10"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table10A1">
      <div class="Paragraph"><div style="width: 9.133cm; " id="Frame7" class="fr8">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/XText.png" title="link to the full-sized graphic &quot;./XText.png&quot;"><img border="0" width="414" height="575" alt="UML diagram showing the com.sun.star.XTextRange interface" src="./2 First Steps_files/XText.png" class="fr7" /></a>Illustration <a name="refIllustration5">2.6</a>: XTextRange</div>
       </div></div>
     </td></tr></table></div>
  <p class="P35">The interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/text/XText.html" title="see type com.sun.star.text.XText">com.sun.star.text.XText</a></span> has the ability to set or get the text as a single string, and to locate the beginning and the end of a text. Furthermore, <span class="Codeintext">XText</span> can insert strings at an arbitrary position in the text and create text cursors to select and format text. Finally, <span class="Codeintext">XText</span> handles text contents through the methods <span class="Codeintext">insertTextContent</span> and <span class="Codeintext">removeTextContent</span>, although not all texts accept text contents other than conventional text. In fact, <span class="Codeintext">XText</span> covers all this by inheriting from <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/text/XSimpleText.html" title="see type com.sun.star.text.XSimpleText">com.sun.star.text.XSimpleText</a></span> that is inherited from <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/text/XTextRange.html" title="see type com.sun.star.text.XTextRange">com.sun.star.text.XTextRange</a></span>.</p>
  <p class="P35">Text formatting happens through the properties which are described in the services <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/style/ParagraphProperties.html" title="see type com.sun.star.style.ParagraphProperties">com.sun.star.style.ParagraphProperties</a></span> and <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/style/CharacterProperties.html" title="see type com.sun.star.style.CharacterProperties">com.sun.star.style.CharacterProperties</a></span>.</p>
  <p class="P35">The following example method <span class="Codeintext">manipulateText()</span> adds text, then it uses a text cursor to select and format a few words using <span class="Codeintext">CharacterProperties</span>, afterwards it inserts more text. The method <span class="Codeintext">manipulateText()</span> only contains the most basic methods of <span class="Codeintext">XText</span> so that it works with every text object. In particular, it avoids <span class="T12">insertTextContent()</span>, since there are no text contents except for conventional text that can be inserted in all text objects.(<a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/examples/DevelopersGuide/FirstSteps/HelloTextTableShape.java" title="goto source FirstSteps/HelloTextTableShape.java">FirstSteps/HelloTextTableShape.java</a>)</p>
  <p class="Code">protected void manipulateText(XText xText) throws com.sun.star.uno.Exception {Â </p>
  <p class="Code">Â  Â  Â  Â  // simply set whole text as one string</p>
  <p class="Code">Â  Â  Â  Â  xText.<span class="CodeEmphasis">setString</span>("He lay flat on the brown, pine-needled floor of the forest, "</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  + "his chin on his folded arms, and high overhead the wind blew in the tops "</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  + "of the pine trees.");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â </p>
  <p class="Code">Â  Â  Â  Â  // create text cursor for selecting and formatting</p>
  <p class="Code">Â  Â  Â  Â  XTextCursor xTextCursor = xText.<span class="CodeEmphasis">createTextCursor</span>();</p>
  <p class="Code">Â  Â  Â  Â  XPropertySet xCursorProps = (XPropertySet)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XPropertySet.class, xTextCursor);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  // use cursor to select "He lay" and apply bold italic</p>
  <p class="Code">Â  Â  Â  Â  xTextCursor.<span class="CodeEmphasis">gotoStart</span>(false);</p>
  <p class="Code">Â  Â  Â  Â  xTextCursor.<span class="CodeEmphasis">goRight</span>((short)6, true); Â  Â  Â  Â </p>
  <p class="Code">Â  Â  Â  Â  // from CharacterProperties</p>
  <p class="Code">Â  Â  Â  Â  xCursorProps.setPropertyValue("<span class="CodeEmphasis">CharPosture</span>", Â  Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  com.sun.star.awt.FontSlant.ITALIC);</p>
  <p class="Code">Â  Â  Â  Â  xCursorProps.setPropertyValue("<span class="CodeEmphasis">CharWeight</span>", </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  new Float(com.sun.star.awt.FontWeight.BOLD)); </p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  // add more text at the end of the text using insertString</p>
  <p class="Code">Â  Â  Â  Â  xTextCursor.<span class="CodeEmphasis">gotoEnd</span>(false);</p>
  <p class="Code">Â  Â  Â  Â  xText.<span class="CodeEmphasis">insertString</span>(xTextCursor, " The mountainside sloped gently where he lay; "</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  + "but below it was steep and he could see the dark of the oiled road "</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  + "winding through the pass. There was a stream alongside the road "</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  + "and far down the pass he saw a mill beside the stream and the falling water "</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  + "of the dam, white in the summer sunlight.", false);</p>
  <p class="Code">Â  Â  Â  Â  // after insertString the cursor is behind the inserted text, insert more text</p>
  <p class="Code">Â  Â  Â  Â  xText.<span class="CodeEmphasis">insertString</span>(xTextCursor, "\n Â \"Is that the mill?\" he asked.", false); Â  </p>
  <p class="Code">}Â </p>
  <p class="Paragraph">In <span class="T3">tables and table cells,</span> the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/table/XCellRange.html" title="see type com.sun.star.table.XCellRange">com.sun.star.table.XCellRange</a></span> allows you to retrieve single cells and subranges of cells. Once you have a cell, you can work with its formula or numeric value through the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/table/XCell.html" title="see type com.sun.star.table.XCell">com.sun.star.table.XCell</a></span>. </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table11"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table11A1">
      <div class="Paragraph"><div style="height: 8.64cm; width: 7.168cm; " id="Frame8" class="fr6">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/XCellRange.png" title="link to the full-sized graphic &quot;./XCellRange.png&quot;"><img border="0" width="326" height="375" alt="UML diagram shwoing the com.sun.star.table.XCellRange and com.sun.star.table.XCell interface" src="./2 First Steps_files/XCellRange.png" class="fr5" /></a>Illustration <a name="refIllustration6">2.7</a>: Cell and Cell Range</div>
       </div></div>
     </td></tr></table></div>
  <p class="Paragraph">Table formatting is partially different in text tables and spreadsheet tables. Text tables use the properties specified in <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/text/TextTable.html" title="see type com.sun.star.text.TextTable">com.sun.star.text.TextTable</a></span>, whereas spreadsheet tables use <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/table/CellProperties.html" title="see type com.sun.star.table.CellProperties">com.sun.star.table.CellProperties</a></span>. Furthermore there are table cursors that allow to select and format cell ranges and the contained text. But since a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/text/TextTableCursor.html" title="see type com.sun.star.text.TextTableCursor">com.sun.star.text.TextTableCursor</a></span> works quite differently from a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/sheet/SheetCellCursor.html" title="see type com.sun.star.sheet.SheetCellCursor">com.sun.star.sheet.SheetCellCursor</a></span>, we will discuss them in the chapters about text and spreadsheet documents.(<a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/examples/DevelopersGuide/FirstSteps/HelloTextTableShape.java" title="goto source FirstSteps/HelloTextTableShape.java">FirstSteps/HelloTextTableShape.java</a>)</p>
  <p class="Code">protected void manipulateTable(XCellRange xCellRange) throws com.sun.star.uno.Exception {Â </p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  String backColorPropertyName = "";</p>
  <p class="Code">Â  Â  Â  Â  XPropertySet xTableProps = null;</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  // enter column titles and a cell value</p>
  <p class="Code">Â  Â  Â  Â  // Enter "Quotation" in A1, "Year" in B1. We use setString because we want to change the whole</p>
  <p class="Code">Â  Â  Â  Â  // cell text at once</p>
  <p class="Code">Â  Â  Â  Â  XCell xCell = xCellRange.getCellByPosition(0,0);</p>
  <p class="Code">Â  Â  Â  Â  XText xCellText = (XText)UnoRuntime.queryInterface(XText.class, xCell);</p>
  <p class="Code">Â  Â  Â  Â  xCellText.setString("Quotation");</p>
  <p class="Code">Â  Â  Â  Â  xCell = xCellRange.getCellByPosition(1,0);</p>
  <p class="Code">Â  Â  Â  Â  xCellText = (XText)UnoRuntime.queryInterface(XText.class, xCell);</p>
  <p class="Code">Â  Â  Â  Â  xCellText.setString("Year");</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  // cell value</p>
  <p class="Code">Â  Â  Â  Â  xCell = xCellRange.getCellByPosition(1,1);</p>
  <p class="Code">Â  Â  Â  Â  xCell.setValue(1940);</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  // select the table headers and get the cell properties</p>
  <p class="Code">Â  Â  Â  Â  XCellRange xSelectedCells = xCellRange.getCellRangeByName("A1:B1");</p>
  <p class="Code">Â  Â  Â  Â  XPropertySet xCellProps = (XPropertySet)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XPropertySet.class, xSelectedCells);</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  // format the color of the table headers and table borders</p>
  <p class="Code">Â  Â  Â  Â  // we need to distinguish text and spreadsheet tables:</p>
  <p class="Code">Â  Â  Â  Â  // - the property name for cell colors is different in text and sheet cells</p>
  <p class="Code">Â  Â  Â  Â  // - the common property for table borders is com.sun.star.table.TableBorder, but </p>
  <p class="Code">Â  Â  Â  Â  // Â  we must apply the property TableBorder to the whole text table, </p>
  <p class="Code">Â  Â  Â  Â  // Â  whereas we only want borders for spreadsheet cells with content.</p>
  <p class="Code">Â </p>
  <p class="P36">Â  Â  Â  Â  // XServiceInfo allows to distinguish text tables from spreadsheets</p>
  <p class="Code">Â  Â  Â  Â  XServiceInfo xServiceInfo = (XServiceInfo)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XServiceInfo.class, xCellRange);</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  // determine the correct property name for background color and the XPropertySet interface</p>
  <p class="Code">Â  Â  Â  Â  // for the cells that should get colored border lines</p>
  <p class="Code">Â  Â  Â  Â  if (xServiceInfo.supportsService("com.sun.star.sheet.Spreadsheet")) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  backColorPropertyName = "CellBackColor";</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // select cells</p>
  <p class="Code">Â  Â  Â  Â   Â  Â xSelectedCells = xCellRange.getCellRangeByName("A1:B2");</p>
  <p class="Code">Â  Â  Â  Â   Â  Â // table properties only for selected cells</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xTableProps = (XPropertySet)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet.class, xSelectedCells);</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  else if (xServiceInfo.supportsService("com.sun.star.text.TextTable")) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  backColorPropertyName = "BackColor";</p>
  <p class="Code">Â  Â  Â  Â   Â  // table properties for whole table</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xTableProps = (XPropertySet)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet.class, xCellRange);</p>
  <p class="Code">Â  Â  Â  Â  } Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  // set cell background color</p>
  <p class="Code">Â  Â  Â  Â  xCellProps.setPropertyValue(backColorPropertyName, new Integer(0x99CCFF));</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  // set table borders</p>
  <p class="Code">Â  Â  Â  Â  // create description for blue line, width 10</p>
  <p class="Code">Â  Â  Â  Â  // colors are given in ARGB, comprised of four bytes for alpha-red-green-blue as in 0xAARRGGBB Â </p>
  <p class="Code">Â  Â  Â  Â  BorderLine theLine = new BorderLine();</p>
  <p class="Code">Â  Â  Â  Â  theLine.Color = 0x000099;</p>
  <p class="Code">Â  Â  Â  Â  theLine.OuterLineWidth = 10;</p>
  <p class="Code">Â  Â  Â  Â  // apply line description to all border lines and make them valid</p>
  <p class="Code">Â  Â  Â  Â  TableBorder bord = new TableBorder();</p>
  <p class="Code">Â  Â  Â  Â  bord.VerticalLine = bord.HorizontalLine = </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  bord.LeftLine = bord.RightLine = </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  bord.TopLine = bord.BottomLine = </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  theLine;</p>
  <p class="Code">Â  Â  Â  Â  bord.IsVerticalLineValid = bord.IsHorizontalLineValid = </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  bord.IsLeftLineValid = bord.IsRightLineValid = </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  bord.IsTopLineValid = bord.IsBottomLineValid =</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  true;</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  xTableProps.setPropertyValue("TableBorder", bord);</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">}Â </p>
  <p class="Paragraph">On <span class="T3">drawing shapes,</span> the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/XShape.html" title="see type com.sun.star.drawing.XShape">com.sun.star.drawing.XShape</a></span> is used to determine the position and size of a shape. </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table12"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table12A1">
      <div class="Paragraph"><div style="width: 6.299cm; " id="Frame9" class="fr9">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/XShape.png" title="link to the full-sized graphic &quot;./XShape.png&quot;"><img border="0" width="285" height="150" alt="UML diagram showing the com.sun.star.drawing.XShape interface" src="./2 First Steps_files/XShape.png" class="fr5" /></a>Illustration <a name="refIllustration7">2.8</a>: XShape</div>
       </div></div>
     </td></tr></table></div>
  <p class="Paragraph">Everything else is a matter of property-based formatting and there is a multitude of properties to use. OpenOffice.org comes with eleven different shapes that are the basis for the drawing tools in the GUI (graphical user interface). Six of the shapes have individual properties that reflect their characteristics. The six shapes are:Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P37" style="margin-left:2.5cm;"><p class="P37" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/EllipseShape.html" title="see type com.sun.star.drawing.EllipseShape">com.sun.star.drawing.EllipseShape</a></span> for circles and ellipses.</p></li>
   <li class="P37" style="margin-left:2.5cm;"><p class="P37" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/RectangleShape.html" title="see type com.sun.star.drawing.RectangleShape">com.sun.star.drawing.RectangleShape</a></span> for boxes.</p></li>
   <li class="P37" style="margin-left:2.5cm;"><p class="P37" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/TextShape.html" title="see type com.sun.star.drawing.TextShape">com.sun.star.drawing.TextShape</a></span> for text boxes.</p></li>
   <li class="P37" style="margin-left:2.5cm;"><p class="P37" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/CaptionShape.html" title="see type com.sun.star.drawing.CaptionShape">com.sun.star.drawing.CaptionShape</a></span> for labeling.</p></li>
   <li class="P37" style="margin-left:2.5cm;"><p class="P37" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/MeasureShape.html" title="see type com.sun.star.drawing.MeasureShape">com.sun.star.drawing.MeasureShape</a></span> for metering.</p></li>
   <li class="P37" style="margin-left:2.5cm;"><p class="P37" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/ConnectorShape.html" title="see type com.sun.star.drawing.ConnectorShape">com.sun.star.drawing.ConnectorShape</a></span> for lines that can be "glued" to other shapes to draw connecting lines between them.</p></li>
  </ul>
  <p class="Paragraph">Five shapes have no individual properties, rather they share the properties defined in the service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/PolyPolygonBezierDescriptor.html" title="see type com.sun.star.drawing.PolyPolygonBezierDescriptor">com.sun.star.drawing.PolyPolygonBezierDescriptor</a></span>: </p>
  <ul style="margin-left:0.5cm;">
   <li class="P38" style="margin-left:2.5cm;"><p class="P38" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/LineShape.html" title="see type com.sun.star.drawing.LineShape">com.sun.star.drawing.LineShape</a></span> is for lines and arrows.</p></li>
   <li class="P38" style="margin-left:2.5cm;"><p class="P38" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/PolyLineShape.html" title="see type com.sun.star.drawing.PolyLineShape">com.sun.star.drawing.PolyLineShape</a></span> is for open shapes formed by straight lines.</p></li>
   <li class="P38" style="margin-left:2.5cm;"><p class="P38" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/PolyPolygonShape.html" title="see type com.sun.star.drawing.PolyPolygonShape">com.sun.star.drawing.PolyPolygonShape</a></span> is for shapes formed by one or more polygons.</p></li>
   <li class="P38" style="margin-left:2.5cm;"><p class="P38" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/ClosedBezierShape.html" title="see type com.sun.star.drawing.ClosedBezierShape">com.sun.star.drawing.ClosedBezierShape</a></span> is for closed bezier shapes. </p></li>
   <li class="P38" style="margin-left:2.5cm;"><p class="P38" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/PolyPolygonBezierShape.html" title="see type com.sun.star.drawing.PolyPolygonBezierShape">com.sun.star.drawing.PolyPolygonBezierShape</a></span> is for combinations of multiple polygon and Bezier shapes.</p></li>
  </ul>
  <p class="Paragraph">Â <br />All of these eleven shapes use the properties from the following services:</p>
  <ul style="margin-left:0.5cm;">
   <li class="P39" style="margin-left:2.5cm;"><p class="P39" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/Shape.html" title="see type com.sun.star.drawing.Shape">com.sun.star.drawing.Shape</a></span> describes basic properties of all shapes such as the layer a shape belongs to, protection from moving and sizing, style name, 3D transformation and name.</p></li>
   <li class="P39" style="margin-left:2.5cm;"><p class="P39" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/LineProperties.html" title="see type com.sun.star.drawing.LineProperties">com.sun.star.drawing.LineProperties</a></span> determines how the lines of a shape look</p></li>
   <li class="P39" style="margin-left:2.5cm;"><p class="P39" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/Text.html" title="see type com.sun.star.drawing.Text">com.sun.star.drawing.Text</a></span> has no properties of its own, but includes:</p><ul style="margin-left:-2cm;">
     <li class="P39" style="margin-left:2.5cm;"><p class="P39" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/TextProperties.html" title="see type com.sun.star.drawing.TextProperties">com.sun.star.drawing.TextProperties</a></span> that affects numbering, shape growth and text alignment in the cell, text animation and writing direction.</p></li>
     <li class="P39" style="margin-left:2.5cm;"><p class="P39" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/style/ParagraphProperties.html" title="see type com.sun.star.style.ParagraphProperties">com.sun.star.style.ParagraphProperties</a></span> is concerned with paragraph formatting.</p></li>
     <li class="P39" style="margin-left:2.5cm;"><p class="P39" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/style/CharacterProperties.html" title="see type com.sun.star.style.CharacterProperties">com.sun.star.style.CharacterProperties</a></span> formats characters</p></li>
    </ul></li>
   <li class="P39" style="margin-left:2.5cm;"><p class="P39" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/ShadowProperties.html" title="see type com.sun.star.drawing.ShadowProperties">com.sun.star.drawing.ShadowProperties</a></span> deals with the shadow of a shape. </p></li>
   <li class="P39" style="margin-left:2.5cm;"><p class="P39" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/RotationDescriptor.html" title="see type com.sun.star.drawing.RotationDescriptor">com.sun.star.drawing.RotationDescriptor</a></span> sets rotation and shearing of a shape.</p></li>
   <li class="P39" style="margin-left:2.5cm;"><p class="P39" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/drawing/FillProperties.html" title="see type com.sun.star.drawing.FillProperties">com.sun.star.drawing.FillProperties</a></span> is only for closed shapes and describes how the shape is filled.</p></li>
   <li class="P39" style="margin-left:2.5cm;"><p class="P39" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/common/ref/com/sun/star/presentation/Shape.html" title="see type com.sun.star.presentation.Shape">com.sun.star.presentation.Shape</a></span> adds presentation effects to shapes in presentation documents.</p></li>
  </ul>
  <p class="Paragraph">Consider the following example showing how these properties work: (<a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/examples/DevelopersGuide/FirstSteps/HelloTextTableShape.java" title="goto source FirstSteps/HelloTextTableShape.java">FirstSteps/HelloTextTableShape.java</a>)Â </p>
  <p class="Code">protected void manipulateShape(XShape xShape) throws com.sun.star.uno.Exception {Â </p>
  <p class="Code">Â  Â  Â  Â  // for usage of setSize and setPosition in interface XShape see method useDraw() below</p>
  <p class="Code">Â  Â  Â  Â  XPropertySet xShapeProps = (XPropertySet)UnoRuntime.queryInterface(XPropertySet.class, xShape);</p>
  <p class="Code">Â  Â  Â  Â  // colors are given in ARGB, comprised of four bytes for alpha-red-green-blue as in 0xAARRGGBB</p>
  <p class="Code">Â  Â  Â  Â  xShapeProps.setPropertyValue("FillColor", new Integer(0x99CCFF));</p>
  <p class="Code">Â  Â  Â  Â  xShapeProps.setPropertyValue("LineColor", new Integer(0x000099));</p>
  <p class="Code">Â  Â  Â  Â  // angles are given in hundredth degrees, rotate by 30 degrees</p>
  <p class="Code">Â  Â  Â  Â  xShapeProps.setPropertyValue("RotateAngle", new Integer(3000));</p>
  <p class="Code">}Â </p>
  <h3 class="Head3"><a name="1_7_2_Creating_Text_2C_Tables_and_Drawing_Shapes" />2.7.2Â Â Creating Text, Tables and Drawing Shapes</h3>
  <p class="Paragraph">The three <span class="Codeintext">manipulateXXX</span> methods above took text, table and shape objects as parameters and altered them. The following methods show how to create such objects in the various document types. Note that all documents have their own service factory to create objects to be inserted into the document. Aside from that it depends very much on the document type how you proceed. This section only demonstrates the different procedures, the explanation can be found in the chapters about Text, Spreadsheet and Drawing Documents.</p>
  <p class="Paragraph">First, a small convenience method is used to create new documents.(<a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/examples/DevelopersGuide/FirstSteps/HelloTextTableShape.java" title="goto source FirstSteps/HelloTextTableShape.java">FirstSteps/HelloTextTableShape.java</a>)Â </p>
  <p class="Code">protected XComponent newDocComponent(String docType) throws java.lang.Exception {Â </p>
  <p class="Code">Â  Â  Â  Â  String loadUrl = "private:factory/" + docType;</p>
  <p class="Code">Â  Â  Â  Â  xRemoteServiceManager = this.getRemoteServiceManager(unoUrl);</p>
  <p class="Code">Â  Â  Â  Â  Object desktop = xRemoteServiceManager.createInstanceWithContext(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  "com.sun.star.frame.Desktop", xRemoteContext);</p>
  <p class="Code">Â  Â  Â  Â  XComponentLoader xComponentLoader = (XComponentLoader)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XComponentLoader.class, desktop);</p>
  <p class="Code">Â  Â  Â  Â  PropertyValue[] loadProps = new PropertyValue[0];</p>
  <p class="Code">Â  Â  Â  Â  return xComponentLoader.loadComponentFromURL(loadUrl, "_blank", 0, loadProps); Â  Â </p>
  <p class="Code">}Â </p>
  <h4 class="Head4"><a name="1_7_2_1_Text_2C_Tables_and_Drawings_in_Writer" />Text, Tables and Drawings in Writer</h4>
  <p class="Paragraph">The method <span class="Codeintext">useWriter</span> creates a writer document and manipulates its text, then uses the document's internal service manager to instantiate a text table and a shape, inserts them and manipulates the table and shape (<a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/examples/DevelopersGuide/FirstSteps/HelloTextTableShape.java" title="goto source FirstSteps/HelloTextTableShape.java">FirstSteps/HelloTextTableShape.java</a>). Refer to <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/Text/Text.xhtml#1_Text_Documents" title="see chapter 8 Text Documents">8 Text Documents</a></span> for more detailed information.</p>
  <p class="Code">protected void useWriter() throws java.lang.Exception {Â </p>
  <p class="Code">Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // create new writer document and get text, then manipulate text</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XComponent xWriterComponent = newDocComponent("swriter");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XTextDocument xTextDocument = (XTextDocument)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XTextDocument.class, xWriterComponent);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XText xText = xTextDocument.getText();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  manipulateText(xText);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // get internal service factory of the document</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XMultiServiceFactory xWriterFactory = (XMultiServiceFactory)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XMultiServiceFactory.class, xWriterComponent);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // insert TextTable and get cell text, then manipulate text in cell</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object table = xWriterFactory.createInstance("com.sun.star.text.TextTable");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XTextContent xTextContentTable = (XTextContent)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XTextContent.class, table);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xText.insertTextContent(xText.getEnd(), xTextContentTable, false);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XCellRange xCellRange = (XCellRange)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XCellRange.class, table);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XCell xCell = xCellRange.getCellByPosition(0, 1);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XText xCellText = (XText)UnoRuntime.queryInterface(XText.class, xCell);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  manipulateText(xCellText);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  manipulateTable(xCellRange);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // insert RectangleShape and get shape text, then manipulate text</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object writerShape = xWriterFactory.createInstance(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.drawing.RectangleShape");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XShape xWriterShape = (XShape)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XShape.class, writerShape);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xWriterShape.setSize(new Size(10000, 10000));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XTextContent xTextContentShape = (XTextContent)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XTextContent.class, writerShape);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xText.insertTextContent(xText.getEnd(), xTextContentShape, false);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XPropertySet xShapeProps = (XPropertySet)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet.class, writerShape);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // wrap text inside shape</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xShapeProps.setPropertyValue("TextContourFrame", new Boolean(true));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XText xShapeText = (XText)UnoRuntime.queryInterface(XText.class, writerShape);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  manipulateText(xShapeText);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  manipulateShape(xWriterShape); </p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  catch( com.sun.star.lang.DisposedException e ) { //works from Patch 1</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xRemoteContext = null;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  throw e;</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">} Â  Â </p>
  <h4 class="Head4"><a name="1_7_2_2_Text_2C_Tables_and_Drawings_in_Calc" />Text, Tables and Drawings in Calc</h4>
  <p class="Paragraph">The method useCalc creates a calc document, uses its document factory to create a shape and manipulates the cell text, table and shape. The chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/Spreadsheet/Spreadsheet.xhtml#1_Spreadsheet_Documents" title="see chapter 9 Spreadsheet Documents">9 Spreadsheet Documents</a></span> treats all aspects of spreadsheets. (<a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/examples/DevelopersGuide/FirstSteps/HelloTextTableShape.java" title="goto source FirstSteps/HelloTextTableShape.java">FirstSteps/HelloTextTableShape.java</a>)</p>
  <p class="Code">protected void useCalc() throws java.lang.Exception {Â </p>
  <p class="Code">Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // create new calc document and manipulate cell text</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XComponent xCalcComponent = newDocComponent("scalc");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XSpreadsheetDocument Â xSpreadsheetDocument Â = </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  (XSpreadsheetDocument)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XSpreadsheetDocument .class, xCalcComponent);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object sheets = xSpreadsheetDocument.getSheets();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XIndexAccess xIndexedSheets = (XIndexAccess)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XIndexAccess.class, sheets);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object sheet = Â xIndexedSheets.getByIndex(0);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //get cell A2 in first sheet</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XCellRange xSpreadsheetCells = (XCellRange)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XCellRange.class, sheet);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XCell xCell = xSpreadsheetCells.getCellByPosition(0,1);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XPropertySet xCellProps = (XPropertySet)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet.class, xCell);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xCellProps.setPropertyValue("IsTextWrapped", new Boolean(true));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XText xCellText = (XText)UnoRuntime.queryInterface(XText.class, xCell);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  manipulateText(xCellText);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  manipulateTable(xSpreadsheetCells);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // get internal service factory of the document</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XMultiServiceFactory xCalcFactory = (XMultiServiceFactory)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XMultiServiceFactory.class, xCalcComponent);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // get Drawpage</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XDrawPageSupplier xDrawPageSupplier =</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â (XDrawPageSupplier)UnoRuntime.queryInterface(XDrawPageSupplier.class, sheet);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XDrawPage xDrawPage = xDrawPageSupplier.getDrawPage();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // create and insert RectangleShape and get shape text, then manipulate text</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object calcShape = xCalcFactory.createInstance(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.drawing.RectangleShape");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XShape xCalcShape = (XShape)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XShape.class, calcShape);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xCalcShape.setSize(new Size(10000, 10000));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xCalcShape.setPosition(new Point(7000, 3000));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xDrawPage.add(xCalcShape);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XPropertySet xShapeProps = (XPropertySet)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet.class, calcShape);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // wrap text inside shape</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xShapeProps.setPropertyValue("TextContourFrame", new Boolean(true));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XText xShapeText = (XText)UnoRuntime.queryInterface(XText.class, calcShape);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  manipulateText(xShapeText);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  manipulateShape(xCalcShape); </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  catch( com.sun.star.lang.DisposedException e ) { //works from Patch 1</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xRemoteContext = null;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  throw e;</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">} Â  Â </p>
  <h4 class="Head4"><a name="1_7_2_3_Drawings_and_Text_in_Draw" />Drawings and Text in Draw</h4>
  <p class="Paragraph">The method useDraw creates a draw document and uses its document factory to instantiate and add a shape, then it manipulates the shape. The chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/Drawing/Drawing.xhtml#1_Drawing" title="see chapter 10 Drawing">10 Drawing</a></span> casts more light on drawings and presentations. (<a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/examples/DevelopersGuide/FirstSteps/HelloTextTableShape.java" title="goto source FirstSteps/HelloTextTableShape.java">FirstSteps/HelloTextTableShape.java</a>)</p>
  <p class="Code">protected void useDraw() throws java.lang.Exception {Â </p>
  <p class="Code">Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  //create new draw document and insert ractangle shape</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XComponent xDrawComponent = newDocComponent("sdraw");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XDrawPagesSupplier xDrawPagesSupplier = </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  (XDrawPagesSupplier)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XDrawPagesSupplier.class, xDrawComponent);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object drawPages = xDrawPagesSupplier.getDrawPages();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XIndexAccess xIndexedDrawPages = (XIndexAccess)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XIndexAccess.class, drawPages);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object drawPage = xIndexedDrawPages.getByIndex(0);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XDrawPage xDrawPage = (XDrawPage)UnoRuntime.queryInterface(XDrawPage.class, drawPage);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // get internal service factory of the document</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XMultiServiceFactory xDrawFactory = </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  (XMultiServiceFactory)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XMultiServiceFactory.class, xDrawComponent);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object drawShape = xDrawFactory.createInstance(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.drawing.RectangleShape");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XShape xDrawShape = (XShape)UnoRuntime.queryInterface(XShape.class, drawShape);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xDrawShape.setSize(new Size(10000, 20000)); </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xDrawShape.setPosition(new Point(5000, 5000));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xDrawPage.add(xDrawShape);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XText xShapeText = (XText)UnoRuntime.queryInterface(XText.class, drawShape);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XPropertySet xShapeProps = (XPropertySet)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet.class, drawShape);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // wrap text inside shape</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xShapeProps.setPropertyValue("TextContourFrame", new Boolean(true)); Â  Â  Â  Â  Â  Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  manipulateText(xShapeText);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  manipulateShape(xDrawShape);</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  catch( com.sun.star.lang.DisposedException e ) { //works from Patch 1</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xRemoteContext = null;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  throw e;</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">}Â </p>
 <p style="text-align:center;"><small>[ <a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/Preface/ReadersGuide.xhtml" title="Link to previous document">Previous document</a> | <a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/DevelopersGuide.xhtml" title="Link to the Content Table">Content Table</a> | <a href="http://replay.waybackmachine.org/20090428032215/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml" title="Link to next document">Next document</a> ]</small></p></body></html>