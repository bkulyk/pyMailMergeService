<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><parsererror style="display: block; white-space: pre; border: 2px solid #c77; padding: 0 1em 0 1em; margin: 1em; background-color: #fdd; color: black"><h3>This page contains the following errors:</h3><div style="font-family:monospace;font-size:12px">error on line 1215 at column 604: EntityRef: expecting ';'
</div><h3>Below is a rendering of the page up to the first error.</h3></parsererror><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><title>Advanced UNO</title><link rel="stylesheet" type="text/css" href="./6 Advanced UNO_files/AdvancedUNO.css" /><meta name="generator" content="StarOffice/OpenOffice XSLT (http://xml.openoffice.org/sx2ml)" /><meta name="author" content="Jörg Budischewski" /><meta name="created" content="2002-06-06T09:05:08" /><meta name="changedby" content="Jürgen Schmidt" /><meta name="changed" content="2007-07-04T16:20:17" /><base href="." />
</head><body dir="ltr"><div id="wm-ipp" style="position: relative; padding-top: 0px; padding-right: 5px; padding-bottom: 0px; padding-left: 5px; min-height: 70px; min-width: 800px; z-index: 9000; display: none; ">
<div id="wm-ipp-inside" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(http://static.waybackmachine.org/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="http://waybackmachine.org/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="./6 Advanced UNO_files/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0" /></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="http://waybackmachine.org/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml" style="width:400px;font-size:11px;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20090421193405" /><input type="submit" value="Go" style="font-size:11px;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;margin-left:5px;" /><span id="wm_tb_options" style="display:block;" /></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:&apos;Helvetica&apos;,&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20090220004416/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="20 Feb 2009"><strong>FEB</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 19:34:05 Apr 21, 2009">APR</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       May
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20090220004416/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml" title="0:44:16 Feb 20, 2009" style="background-color:transparent;border:none;"><img src="./6 Advanced UNO_files/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 19:34:05 Apr 21, 2009">21</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20090511124103/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml" title="12:41:03 May 11, 2009" style="background-color:transparent;border:none;"><img src="./6 Advanced UNO_files/wm_tb_nxt_on.png" alt="Next capture" width="14" height="16" border="0" /></a>
		                
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20080322220846/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="22 Mar 2008"><strong>2008</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 19:34:05 Apr 21, 2009">2009</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2010
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="http://waybackmachine.org/20090421193405*/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>43 captures</strong></a>
           <div style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 Mar 06 - 11 May 09</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:400px;height:27px;" href="" id="wm-graph-anchor">
       <div id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:400px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;" onmouseover="showTrackers(&apos;inline&apos;);" onmouseout="showTrackers(&apos;none&apos;);" onmousemove="trackMouseMove(event,this)" alt="sparklines" width="400" height="27" border="0" src="./6 Advanced UNO_files/graph.jsp" />
			<img id="wbMouseTrackYearImg" style="display:none; position:absolute; z-index:9010;" width="25" height="27" border="0" src="./6 Advanced UNO_files/transp-yellow-pixel.png" />
			<img id="wbMouseTrackMonthImg" style="display:none; position:absolute; z-index:9011; " width="2" height="27" border="0" src="./6 Advanced UNO_files/transp-red-pixel.png" />
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById(&apos;wm-ipp&apos;).style.display=&apos;none&apos;;" style="display:block;padding-right:18px;background:url(http://static.waybackmachine.org/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.waybackmachine.org/" style="display:block;padding-right:18px;background:url(http://static.waybackmachine.org/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<!-- BEGIN WAYBACK TOOLBAR INSERT -->

<script type="text/javascript" src="./6 Advanced UNO_files/disclaim-element.js" />
<script type="text/javascript" src="./6 Advanced UNO_files/graph-calc.js" />
<script type="text/javascript" src="./6 Advanced UNO_files/jquery.min.js" />
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1325375999999;
var wbPrefix = "http://replay.waybackmachine.org/";
var wbCurrentUrl = "http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml";

var curYear = -1;
var curMonth = -1;
var yearCount = 16;
var firstYear = 1996;
var imgWidth=400;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "21";
var displayMonth = "Apr";
var displayYear = "2009";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>

<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->
<p style="text-align:center;"><small>[ <a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml" title="Link to previous document">Previous document</a> | <a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/DevelopersGuide.xhtml" title="Link to the Content Table">Content Table</a> | <a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/OfficeDev/OfficeDev.xhtml" title="Link to next document">Next document</a> ]</small></p>
  
  
  
  <h1 style="margin-left:2.54cm;" class="P2"><a name="1_Advanced_UNO" />6  Advanced UNO</h1>
  <p class="Under_Head1"> </p>
  <h2 class="Head2"><a name="1_1_Choosing_an_Implementation_Language" />6.1  Choosing an Implementation Language</h2>
  <p class="Paragraph">The UNO technology provides a framework for cross-platform and language independent programming. All the OpenOffice.org components can be implemented in any language supported by UNO, as long as they only communicate with other components through their IDL interfaces. </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table3"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table3A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./6 Advanced UNO_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table3B1">
      <p class="TextInTable">Note: The condition "as long as they only communicate with other components through their IDL interfaces" is to be strictly taken. In fact, a lot of implementations within OpenOffice.org export UNO interfaces and still use private C++ interfaces. This is a tribute to older implementations that cannot be rewritten in an acceptable timeframe. </p>
     </td></tr></table></div>
  <p class="Paragraph">A developer can customize the office to their needs with this flexibility, but they will have to decide which implementation language should be selected for a specific problem. </p>
  <h3 class="Head3"><a name="1_1_1_Supported_Programming_Environments" />6.1.1  Supported Programming Environments</h3>
  <p class="Paragraph">The support for programming languages in UNO and OpenOffice.org is divided into three different categories.  </p>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P3" style="margin-left:2.5cm;"><p class="P3" style="margin-left:0cm;">Languages that invoke calls on existing UNO objects are possibly implemented in other programming languages. Additionally, it may be possible to implement certain UNO interfaces, but not UNO components that can be instantiated by the service manager. </p></li>
   <li class="P3" style="margin-left:2.5cm;"><p class="P3" style="margin-left:0cm;">Languages that implement UNO components. UNO objects implemented in such a language are accessible from any other language that UNO supports, just by instantiating a service by name at the servicemanager. For instance, the developer can implement a OpenOffice.org Calc addin (see <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/Spreadsheet/Spreadsheet.xhtml#1_Spreadsheet_Documents" title="see chapter 9 Spreadsheet Documents">9 Spreadsheet Documents</a></span>).</p></li>
   <li class="P3" style="margin-left:2.5cm;"><p class="P3" style="margin-left:0cm;">Languages that are used to write code to be delivered within OpenOffice.org documents and utilize dialogs designed with the OpenOffice.org dialog editor. </p></li>
  </ol>
  <p class="Paragraph">The following table lists programming languages currently supported by UNO. 'Yes' in the table columns denotes full support, 'no' denotes that there is no support and is not even planned in the future. 'Maybe in future' means there is currently no support, but this may change with future releases.  </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="supported_languages"><colgroup><col width="142" /><col width="174" /><col width="194" /><col width="194" /></colgroup><tr><td style="text-align:left;width:3.119cm; " class="supported_languagesA1">
      <p class="TableHead">Language </p>
     </td><td style="text-align:left;width:3.808cm; " class="supported_languagesA1">
      <p class="TableHead">UNO scripting </p>
     </td><td style="text-align:left;width:4.256cm; " class="supported_languagesA1">
      <p class="TableHead">UNO components </p>
     </td><td style="text-align:left;width:4.256cm; " class="supported_languagesD1">
      <p class="TableHead">Deployment with<br /> OpenOffice.org documents</p>
     </td></tr><tr><td style="text-align:left;width:3.119cm; " class="supported_languagesA2">
     <p class="TextInTable">C++ </p>
    </td><td style="text-align:left;width:3.808cm; " class="supported_languagesA2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:4.256cm; " class="supported_languagesA2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:4.256cm; " class="supported_languagesD2">
     <p class="TextInTable">no </p>
    </td></tr><tr><td style="text-align:left;width:3.119cm; " class="supported_languagesA2">
     <p class="TextInTable">C </p>
    </td><td style="text-align:left;width:3.808cm; " class="supported_languagesA2">
     <p class="TextInTable">maybe in future </p>
    </td><td style="text-align:left;width:4.256cm; " class="supported_languagesA2">
     <p class="TextInTable">maybe in future </p>
    </td><td style="text-align:left;width:4.256cm; " class="supported_languagesD2">
     <p class="TextInTable">no </p>
    </td></tr><tr><td style="text-align:left;width:3.119cm; " class="supported_languagesA2">
     <p class="TextInTable">Java </p>
    </td><td style="text-align:left;width:3.808cm; " class="supported_languagesA2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:4.256cm; " class="supported_languagesA2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:4.256cm; " class="supported_languagesD2">
     <p class="TextInTable">maybe in future </p>
    </td></tr><tr><td style="text-align:left;width:3.119cm; " class="supported_languagesA2">
     <p class="TextInTable">StarBasic </p>
    </td><td style="text-align:left;width:3.808cm; " class="supported_languagesA2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:4.256cm; " class="supported_languagesA2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:4.256cm; " class="supported_languagesD2">
     <p class="TextInTable">yes </p>
    </td></tr><tr><td style="text-align:left;width:3.119cm; " class="supported_languagesA2">
     <p class="TextInTable">OLE automation (win32 only) </p>
    </td><td style="text-align:left;width:3.808cm; " class="supported_languagesA2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:4.256cm; " class="supported_languagesA2">
     <p class="TextInTable">maybe in future </p>
    </td><td style="text-align:left;width:4.256cm; " class="supported_languagesD2">
     <p class="TextInTable">maybe in future </p>
    </td></tr><tr><td style="text-align:left;width:3.119cm; " class="supported_languagesA2">
     <p class="TextInTable">Python </p>
    </td><td style="text-align:left;width:3.808cm; " class="supported_languagesA2">
     <p class="TextInTable">maybe in future<br /> (under development)</p>
    </td><td style="text-align:left;width:4.256cm; " class="supported_languagesA2">
     <p class="TextInTable">maybe in future<br /> (under development)</p>
    </td><td style="text-align:left;width:4.256cm; " class="supported_languagesD2">
     <p class="TextInTable">maybe in future </p>
    </td></tr></table></div>
  <h4 class="Head4"><a name="1_1_1_1_Java" />Java</h4>
  <p class="Paragraph">Java is a an accepted programming language offering a standard library with a large set of features and available extensions. Additional extensions will be available in the future, such as JAX-RPC for calling webservices. It is a typesafe language with a typesafe UNO binding. Although interfaces have to be <span class="T2">queried</span> explicitly, the type safety makes it suitable for larger projects. UNO components can be implemented with Java, that is, the Java VM is started on demand inside the office process when a Java component is instantiated. The OfficeBean allows embedding OpenOffice.org documents in Java Applets and Applications.</p>
  <p class="Paragraph">There is a constant runtime overhead of about 1 to 2 ms per call that is caused by the bridge conversion routines when calling UNO objects implemented in other language bindings. Since OpenOffice.org consists of C++ code, every Java call into the office needs to be bridged. This poses no problems if there are a few calls per user interaction. The runtime overhead will hurt the application when routines produce hundreds or thousands of calls. </p>
  <h4 class="Head4"><a name="1_1_1_2_C_2B_2B" />C++</h4>
  <p class="Paragraph">C++ is an accepted programming language offering third-party products. In addition to C++ being fast since it is compiled locally, it offers the fastest communication with OpenOffice.org because most of the essential parts of office have been developed in C++. This advantage becomes less important as you call into the office through the interprocess bridge, because every remote call means a constant loss of 1 to2 ms. The fastest code to extend the office can be implemented as a C++ UNO component. It is appropriate for larger projects due to its strong type safety at compile time.</p>
  <p class="Paragraph">C++ is difficult to learn and coding, in general, takes longer, for example, in Java. The components must be built for every platform, that leads to a higher level of complexity during development and deployment.  </p>
  <h4 class="Head4"><a name="1_1_1_3_OpenOffice.org_Basic" />OpenOffice.org Basic</h4>
  <p class="Paragraph">OpenOffice.org Basic is the scripting language developed for and integrated directly into OpenOffice.org. It currently offers the best integration with OpenOffice.org, because you can insert code into documents, attach arbitrary office events, such as document loading, keyboard shortcuts or menu entries, to Basic code and use dialogs designed within the OpenOffice.org IDE. In Basic, calls are invoked on an object rather than on a specific interface. Interfaces, such as <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XPropertySet.html" title="see type com.sun.star.beans.XPropertySet">com.sun.star.beans.XPropertySet</a></span> are integrated as Basic object properties. Basic always runs in the office process and thus avoids costly interprocess calls.</p>
  <p class="Paragraph">The language is type unsafe, that is, only a minimal number of errors are found during compilation. Most errors appear at runtime, therefore it is not the best choice for large projects. The language is OpenOffice.org specific and only offers a small set of runtime functionality with little third-party support. All office functionality is used through UNO. UNO components cannot be implemented with Basic. The only UNO objects that can be implemented are listeners. Finally, Basic does not offer any thread support. </p>
  <h4 class="Head4"><a name="1_1_1_4_OLE_Automation_Bridge" />OLE Automation Bridge</h4>
  <p class="Paragraph">The OLE Automation bridge opens the UNO world to programming environments that support OLE automation, such as Visual Basic, JScript, Delphi or C++ Builder. Programmers working on the Windows platform can write programs for OpenOffice.org without leaving their language by learning a new API. These programmers have access to the libraries provided by their language. It is possible to implement UNO objects, if the programming language supports object implementation. </p>
  <p class="Paragraph">This bridge is only useful on a Win32 machine, thereby being a disadvantage . Scripts always run in a different process so that every UNO call has at least the usual interprocess overhead of 1 to 2 ms. Currently Automation UNO components cannot be implemented for the service manager, but this may change in the future. </p>
  <h4 class="Head4"><a name="1_1_1_5_Python" />Python</h4>
  <p class="Paragraph">A Python scripting bridge (PyUNO) is currently developed by Ralph Thomas. It is available in an experimental alpha state with known limitations. For details, see PyUNO on <span class="wwwftpemail">udk.openoffice.org</span>.</p>
  <h3 class="Head3"><a name="1_1_2_Use_Cases" />6.1.2  Use Cases</h3>
  <p class="Paragraph">The following list gives typical UNO applications for the various language environments. </p>
  <h4 class="Head4"><a name="1_1_2_1_Java" />Java</h4>
  <ul style="margin-left:0.5cm;">
   <li class="P4" style="margin-left:2.5cm;"><p class="P4" style="margin-left:0cm;">Servlets creating Office Documents on the fly, Java Server Pages </p></li>
   <li class="P4" style="margin-left:2.5cm;"><p class="P4" style="margin-left:0cm;">Server-Based Collaboration Platforms, Document Management Systems </p></li>
   <li class="P4" style="margin-left:2.5cm;"><p class="P4" style="margin-left:0cm;">Calc add-ins </p></li>
   <li class="P4" style="margin-left:2.5cm;"><p class="P4" style="margin-left:0cm;">Chart add-ins </p></li>
   <li class="P4" style="margin-left:2.5cm;"><p class="P4" style="margin-left:0cm;">Database Drivers </p></li>
  </ul>
  <h4 class="Head4"><a name="1_1_2_2_C_2B_2B" />C++</h4>
  <ul style="margin-left:0.5cm;">
   <li class="P5" style="margin-left:2.5cm;"><p class="P5" style="margin-left:0cm;">Filters reading document data and generating Office Documents through UNO calls </p></li>
   <li class="P5" style="margin-left:2.5cm;"><p class="P5" style="margin-left:0cm;">Database Drivers </p></li>
   <li class="P5" style="margin-left:2.5cm;"><p class="P5" style="margin-left:0cm;">Database Drivers </p></li>
   <li class="P5" style="margin-left:2.5cm;"><p class="P5" style="margin-left:0cm;">Calc add-ins </p></li>
   <li class="P5" style="margin-left:2.5cm;"><p class="P5" style="margin-left:0cm;">Chart add-ins </p></li>
  </ul>
  <h4 class="Head4"><a name="1_1_2_3_OpenOffice.org_Basic" />OpenOffice.org Basic</h4>
  <ul style="margin-left:0.5cm;">
   <li class="P6" style="margin-left:2.5cm;"><p class="P6" style="margin-left:0cm;">Office Automation </p></li>
   <li class="P6" style="margin-left:2.5cm;"><p class="P6" style="margin-left:0cm;">Event-driven data-aware forms </p></li>
  </ul>
  <h4 class="Head4"><a name="1_1_2_4_OLE_Automation" />OLE Automation</h4>
  <ul style="margin-left:0.5cm;">
   <li class="P7" style="margin-left:2.5cm;"><p class="P7" style="margin-left:0cm;">Office Automation, creating and controlling Office Documents from other applications and from Active Server Pages </p></li>
  </ul>
  <h4 class="Head4"><a name="1_1_2_5_Python" />Python</h4>
  <ul style="margin-left:0.5cm;">
   <li class="P8" style="margin-left:2.5cm;"><p class="P8" style="margin-left:0cm;">Calc add-ins </p></li>
  </ul>
  <h3 class="Head3"><a name="1_1_3_Recommendation" />6.1.3  Recommendation</h3>
  <p class="Paragraph">All languages have their advantages and disadvantages as previously discussed , but there is not one language for all purposes, depending on your use. Consider carefully before starting a new project and evaluate the language to use so that it saves you time. </p>
  <p class="Paragraph">Sometimes it may be useful to use multiple languages to gain the advantages of both languages. For instance, currently it is not possible to attach a keyboard event to a java method, therefore, write a small basic function, which forwards the event to a java component.  </p>
  <p class="Paragraph">The number of languages supported by UNO may increase and some of the limitations shown in the table above may disappear. </p>
  <h2 class="Head2"><a name="1_2_Language_Bindings" />6.2  Language Bindings</h2>
  <p class="Paragraph">UNO language bindings enable developers to use and implement UNO objects in arbitrary programming languages. Thus, the existing language bindings connect between implementation environments, such as Java, C++, OpenOffice.org Basic and OLE Automation. The connection is accomplished by <span class="Emphasis">bridges</span>. The following terms are used in our discussion about the implementation of language bindings.</p>
  <p class="Paragraph">In our context, the <span class="Emphasis">target language</span> or <span class="Emphasis">target environment</span> denotes the language or environment from which the UNO component model is accessed. <span class="T3">The </span><span class="Emphasis">bridging language</span> is the language used for writing the bridge code.</p>
  <p class="Paragraph">An object-oriented language determines the layout of its objects in memory. We call an object that is based on this layout a <span class="Emphasis">language object</span>. The layout along with everything that relates to it, such as creation, destruction, and interaction, is the <span class="Emphasis">object model </span>of a language<span class="Emphasis">. </span></p>
  <p class="Paragraph">A <span class="Emphasis">UNO </span><span class="Emphasis">proxy</span> (short: <span class="Emphasis">proxy</span>) is created by a bridge and it is a language object that represents a UNO object in the target language. It provides the same functionality as the original UNO object. There are two terms which further specialize a <span class="T4">UNO proxy.</span> <span class="T5">The </span>UNO<span class="Emphasis"> </span><span class="Emphasis">interface </span>proxy <span class="T5">is a</span> UNO proxy <span class="T5">representing exactly </span><span class="T6">one</span> <span class="T5">interface of a UNO object, whereas a </span>UNO<span class="Emphasis"> </span><span class="Emphasis">object </span>proxy <span class="T3">represents an uno object with </span><span class="T7">all</span> <span class="T3">its interfaces.</span> </p>
  <p class="Paragraph">An <span class="Emphasis">interface bridge</span> bridges one UNO interface to one interface of the target language, that is, to a UNO interface proxy. When the proxy is queried for another interface that is implemented by the UNO object, then another interface proxy is returned. In contrast, an <span class="Emphasis">object bridge</span> bridges entire UNO objects into UNO object proxies of the target language. The object proxy receives calls for all interfaces of the UNO object.</p>
  <h3 class="Head3"><a name="1_2_1_Implementing_UNO_Language_Bindings" />6.2.1  Implementing UNO Language Bindings</h3>
  <p class="Paragraph">This section introduces the basic steps to create a new language binding. The steps required depend on the target language. The section provides an overview of existing language bindings to help you to decide what is necessary for your case. It is recommended that you read the sources for available language bindings and transfer the solutions they offer to the new circumstances of your target language.  </p>
  <h4 class="Head4"><a name="1_2_1_1_Overview_of_Language_Bindings_and_Bridges" />Overview of Language Bindings and Bridges</h4>
  <p class="Paragraph">Creating a language binding for UNO involves the following tasks: </p>
  <h5 class="Head5"><a name="1_2_1_1_1_Language_Specification_and_UNO_Feature_Support" />Language Specification and UNO Feature Support</h5>
  <p class="Paragraph">When writing a language binding, consider how to map UNOIDL types to your target language, treat simple types and handle complex types, such as <span class="Codeintext">struct</span>, <span class="Codeintext">sequence</span>, <span class="Codeintext">interface</span> and <span class="Codeintext">any</span>. Furthermore, UNOIDL features, such as services, properties and exceptions must be matched to the capabilities of the target language and accommodated, if need be.</p>
  <h5 class="Head5"><a name="1_2_1_1_2_Code_Generator" />Code Generator</h5>
  <p class="Paragraph">If the target language requires type definitions at compile time, a code generator must translate UNOIDL type definitions to the target language type definitions according to the language specification, so that the types defined in UNOIDL can be used. </p>
  <h5 class="Head5"><a name="1_2_1_1_3_UNO_Bridge" />UNO Bridge</h5>
  <p class="Paragraph">UNO communication is based on calls to interfaces. Bridges supply the necessary means to use interfaces of UNO objects between implementation environments. The key for bridging is an intermediate environment called binary UNO,that consists of binary data formats for parameters and return values, and a C dispatch method used to call arbitrary operations on UNO interfaces. A bridge must be capable of the following tasks:</p>
  <ul style="margin-left:0.5cm;">
   <li class="P9" style="margin-left:2.5cm;"><p class="P9" style="margin-left:0cm;">Between the target language and OpenOffice.org:  </p></li>
   <li class="P10" style="margin-left:3.75cm;"><p class="P10" style="margin-left:0cm;">a) Converting operation parameters from the target language to binary UNO. </p></li>
   <li class="P10" style="margin-left:3.75cm;"><p class="P10" style="margin-left:0cm;">b) Transforming operation calls in the target language to calls in binary UNO in a different environment. </p></li>
   <li class="P10" style="margin-left:3.75cm;"><p class="P10" style="margin-left:0cm;">c) Transporting the operation call with its parameters to OpenOffice.org and the return values back to the target language. </p></li>
   <li class="P10" style="margin-left:3.75cm;"><p class="P10" style="margin-left:0cm;">d) Mapping return values from binary UNO to the target language. </p></li>
   <li class="P9" style="margin-left:2.5cm;"><p class="P9" style="margin-left:0cm;">Between OpenOffice.org and the target language, that is, during callbacks or when using a component in the target language:  </p></li>
   <li class="P10" style="margin-left:3.75cm;"><p class="P10" style="margin-left:0cm;">a) Converting operation parameters from binary UNO to the target language. </p></li>
   <li class="P10" style="margin-left:3.75cm;"><p class="P10" style="margin-left:0cm;">b) Transforming operation calls in binary UNO to calls in the target language. </p></li>
   <li class="P10" style="margin-left:3.75cm;"><p class="P10" style="margin-left:0cm;">c) Transporting the operation call with its parameters to the target language and the return values back to OpenOffice.org. </p></li>
   <li class="P10" style="margin-left:3.75cm;"><p class="P10" style="margin-left:0cm;">d) Converting return values from the target language to binary UNO. </p></li>
  </ul>
  <p class="Paragraph">The Reflection API delivers information about UNO types and is used by bridges to support type conversions (<span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/Converter.html" title="see type com.sun.star.script.Converter">com.sun.star.script.Converter</a></span>), and method invocations (<span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/Invocation.html" title="see type com.sun.star.script.Invocation">com.sun.star.script.Invocation</a></span> and <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XInvocation.html" title="see type com.sun.star.script.XInvocation">com.sun.star.script.XInvocation</a></span>). Furthermore, it supplies runtime type information and creates instances of certain UNO types, such as structs (<span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/CoreReflection.html" title="see type com.sun.star.reflection.CoreReflection">com.sun.star.reflection.CoreReflection</a></span>).</p>
  <h5 class="Head5"><a name="1_2_1_1_4_UNO_Component_Loader" />UNO Component Loader</h5>
  <p class="Paragraph">An  implementation loader is required to load and activate code produced by the target language if implementations in the target language are to be instantiated. This involves locating the component files produced by the target language, and mechanisms to load and execute the code produced by the target language, such as launching a runtime environment. Currently there are implementation loaders for jar files and locally shared libraries on the platforms supported by UNO.</p>
  <h5 class="Head5"><a name="1_2_1_1_5_Bootstrapping" />Bootstrapping</h5>
  <p class="Paragraph">A UNO language binding must prepare itself so that it can bridge to the UNO environments. It depends on the target environment how this is achieved. In Java, C++, and Python, a local service manager in the target environment is used to instantiate a <a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/bridge/UnoUrlResolver.html" title="see type com.sun.star.bridge.UnoUrlResolver">com.sun.star.bridge.UnoUrlResolver</a> that connects to OpenOffice.org. In the Automation bridge, the object com.sun.star.ServiceManager is obtained  from the COM runtime system and in OpenOffice.org Basic the service manager is available from a special method of the Basic runtime environment, <span class="Codeintext">getProcessServiceManager()</span>.</p>
  <h4 class="Head4"><a name="1_2_1_2_Implementation_Options" />Implementation Options</h4>
  <p class="Paragraph">There are two different approaches when creating a UNO language binding. </p>
  <ol style="margin-left:0.5cm;list-style-type:upper-alpha; ">
   <li class="P11" style="margin-left:2.5cm;"><p class="P11" style="margin-left:0cm;">Programming languages checking types at compile time. <br />Examples are the languages Java or C++. In these environments, it is necessary to query for interfaces at certain objects and then invoke calls compile-time-typesafe on these interfaces. </p></li>
   <li class="P11" style="margin-left:2.5cm;"><p class="P11" style="margin-left:0cm;">Programming languages checking types at runtime.<br />Examples are the languages StarBasic, Python or Perl. In these languages, the interfaces are not queried explicitly as there is no compiler to check the signature of a certain method. Instead, methods are directly invoked on objects. During execution, the runtime engine checks if a method is available at one of the exported interfaces, and if not, a runtime error is raised. Typically, such a binding has a slight performance disadvantage compared to the solution above.</p></li>
  </ol>
  <p class="Paragraph">You can achieve different levels of integration with both types of language binding. </p>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P12" style="margin-left:2.5cm;"><p class="P12" style="margin-left:0cm;">Call existing UNO interfaces implemented in different bindings.<br />This is the normal scripting use case, for example, connect to a remote running office, instantiate some services and invoke calls on these services (<span class="Emphasis">unidirectional binding</span>).</p></li>
   <li class="P12" style="margin-left:2.5cm;"><p class="P12" style="margin-left:0cm;">Implement UNO interfaces and let them be called from different bindings.<br />In addition to 1) above, a language binding is able to implement UNO interfaces, for example, for instance listener interfaces, so that your code is notified of certain events (<span class="Emphasis">limited bidirectional binding</span>).</p></li>
   <li class="P12" style="margin-left:2.5cm;"><p class="P12" style="margin-left:0cm;">Implement a UNO component that is instantiated on demand from any other language at the global service manager.<br />In addition to 2) above, a binding must provide the code which starts up the runtime engine of the target environment. For example, when a Java UNO component is instantiated by the OpenOffice.org process, the Java VM must be loaded and initialized, before the actual component is loaded (<span class="Emphasis">bidirectional binding</span>).</p></li>
  </ol>
  <p class="Paragraph">A language binding should always be bidirectional. That is, it should be possible to access UNO components implemented <span class="Emphasis">in the </span><span class="T4">target language</span> <span class="T5">from OpenOffice.org, as well as accessing UNO components that are implemented in a different language </span><span class="T6">from the ta</span><span class="T4">rget language. </span></p>
  <p class="Paragraph">The following table provides an overview about the capabilities of the different language bindings currently available for OpenOffice.org: </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table1"><colgroup><col width="215" /><col width="215" /><col width="164" /><col width="111" /></colgroup><tr><td style="text-align:left;width:4.717cm; " class="Table1A1">
      <p class="TableHead">Language </p>
     </td><td style="text-align:left;width:4.697cm; " class="Table1A1">
      <p class="TableHead">scripting <br /> (accessing office objects)</p>
     </td><td style="text-align:left;width:3.6cm; " class="Table1A1">
      <p class="TableHead">interface<br /> implementation</p>
     </td><td style="text-align:left;width:2.424cm; " class="Table1D1">
      <p class="TableHead">component<br /> development</p>
     </td></tr><tr><td style="text-align:left;width:4.717cm; " class="Table1A2">
     <p class="TextInTable">C++ (platform dependent) </p>
    </td><td style="text-align:left;width:4.697cm; " class="Table1A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:3.6cm; " class="Table1A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:2.424cm; " class="Table1D2">
     <p class="TextInTable">yes </p>
    </td></tr><tr><td style="text-align:left;width:4.717cm; " class="Table1A2">
     <p class="TextInTable">Java </p>
    </td><td style="text-align:left;width:4.697cm; " class="Table1A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:3.6cm; " class="Table1A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:2.424cm; " class="Table1D2">
     <p class="TextInTable">yes </p>
    </td></tr><tr><td style="text-align:left;width:4.717cm; " class="Table1A2">
     <p class="TextInTable">StarBasic </p>
    </td><td style="text-align:left;width:4.697cm; " class="Table1A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:3.6cm; " class="Table1A2">
     <p class="TextInTable">(only listener interfaces) </p>
    </td><td style="text-align:left;width:2.424cm; " class="Table1D2">
     <p class="TextInTable">no </p>
    </td></tr><tr><td style="text-align:left;width:4.717cm; " class="Table1A2">
     <p class="TextInTable">OLE automation <br />(Win32 only)</p>
    </td><td style="text-align:left;width:4.697cm; " class="Table1A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:3.6cm; " class="Table1A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:2.424cm; " class="Table1D2">
     <p class="TextInTable">no (maybe in the future) </p>
    </td></tr></table></div>
  <p class="Paragraph">The next section outlines the implementation of a C++ language binding. The C++ binding itself is extremely platform and compiler dependent, which provides a barrierwhen porting OpenOffice.org to a new platform. Although this chapter focuses on C++ topics, the chapter can be applied for other typesafe languages that store their code in a shared library, for instance, Delphi, because the same concepts apply.  </p>
  <p class="Paragraph">The section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml#1_2_3_UNO_Reflection_API" title="see chapter 6.2.3 Advanced UNO - Language Bindings - UNO Reflection API">6.2.3 Advanced UNO - Language Bindings - UNO Reflection API</a></span> considers the UNO reflection and invocation API, which offers generic functionality to inspect and call UNO objects. The section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml#1_2_4_XInvocation_Bridge" title="see chapter 6.2.4 Advanced UNO - Language Bindings - XInvocation Bridge">6.2.4 Advanced UNO - Language Bindings - XInvocation Bridge</a></span> explains how the Reflection API is used to implement a runtime type-checking language binding.</p>
  <p class="Paragraph">The final chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml#1_2_5_Implementation_Loader" title="see chapter 6.2.5 Advanced UNO - Language Bindings - Implementation Loader">6.2.5 Advanced UNO - Language Bindings - Implementation Loader</a></span> briefly describes the concept of <span class="T4">implementation loaders</span> that instantiates components on demand independently of the <span class="T5">client and the implementation language.The integration of a new programming language into the UNO component framework is completed once you have a loader.</span> </p>
  <h3 class="Head3"><a name="1_2_2_UNO_C_2B_2B_bridges" />6.2.2  UNO C++ bridges</h3>
  <p class="Paragraph">This chapter focuses on writing a UNO bridge locally, specifically writing a C++ UNO bridge to connect to code compiled with the C++ compiler. This is an introduction for bridge implementers.. It is assumed that the reader has a general understanding of compilers and a of 80x86 assembly language. Refer to the section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml#1_2_5_Implementation_Loader" title="see chapter 6.2.5 Advanced UNO - Language Bindings - Implementation Loader">6.2.5 Advanced UNO - Language Bindings - Implementation Loader</a></span> for additional information.</p>
  <h4 class="Head4"><a name="1_2_2_1_Binary_UNO_Interfaces" />Binary UNO Interfaces</h4>
  <p class="Paragraph">A primary goal when using a new compiler is to adjust the C++-UNO data type generator (<span class="wwwftpemail">cppumaker</span> tool) to produce binary compatible declarations for the target language. The tested cppu core functions can be used when there are similar sizes and alignment of UNO data types. The layout of C++ data types, as well as implementing C++-UNO objects is explained in <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_4_2_C_2B_2B_Language_Binding" title="see chapter 3.4.2 Professional UNO - UNO Language Bindings - C++ Language Binding">3.4.2 Professional UNO - UNO Language Bindings - C++ Language Binding</a></span>.</p>
  <p class="Paragraph">When writing C++ UNO objects, you are implementing UNO interfaces by inheriting from pure virtual C++ classes, that is, the generated cppumaker classes (see .<span class="wwwftpemail">hdl</span> files). When you provide an interface, you are providing a pure virtual class pointer. The following paragraph describes how the memory layout of a C++ object looks.</p>
  <p class="Paragraph">A C++-UNO interface pointer is always a pointer to a virtual function table (vftable), that is, a C++ <span class="Codeintext">this</span> pointer. The equivalent binary UNO interface is a pointer to a struct<span class="Codeintext"> _uno_Interface</span> that contains function pointers. This struct holds a function pointer to a <span class="Codeintext">uno_DispatchMethod()</span> and also a function pointer to <span class="Codeintext">acquire()</span> and <span class="Codeintext">release()</span>:</p>
  <p class="Code">// forward declaration of uno_DispatchMethod() </p>
  <p class="Code"> </p>
  <p class="Code">typedef void (SAL_CALL * uno_DispatchMethod)( </p>
  <p class="Code">         <span class="CodeEmphasis">struct _uno_Interface</span> * pUnoI, </p>
  <p class="Code">         const struct _typelib_TypeDescription * pMemberType,</p>
  <p class="Code">         void * pReturn,</p>
  <p class="Code">         void * pArgs[],</p>
  <p class="Code">         uno_Any ** ppException );</p>
  <p class="Code"> </p>
  <p class="Code">// Binary UNO interface </p>
  <p class="Code"> </p>
  <p class="Code">typedef <span class="CodeEmphasis">struct _uno_Interface</span> </p>
  <p class="Code">{ </p>
  <p class="Code">         /** Acquires uno interface.</p>
  <p class="Code">        </p>
  <p class="Code">            @param pInterface uno interface</p>
  <p class="Code">         */</p>
  <p class="Code">         void (SAL_CALL * <span class="CodeEmphasis">acquire</span> )( struct _uno_Interface * pInterface );</p>
  <p class="Code">         /** Releases uno interface.</p>
  <p class="Code">        </p>
  <p class="Code">            @param pInterface uno interface</p>
  <p class="Code">         */</p>
  <p class="Code">         void (SAL_CALL * <span class="CodeEmphasis">release</span> )( struct _uno_Interface * pInterface );</p>
  <p class="Code">         /** dispatch function</p>
  <p class="Code">         */</p>
  <p class="Code">         <span class="CodeEmphasis">uno_DispatchMethod pDispatcher</span> ;</p>
  <p class="Code">} uno_Interface; </p>
  <p class="Paragraph"> </p>
  <p class="Paragraph">Similar to <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XInterface.html" title="see type com.sun.star.uno.XInterface">com.sun.star.uno.XInterface</a></span>, the life-cycle of an interface is controlled using the <span class="Codeintext">acquire()</span> and <span class="Codeintext">release()</span> functions of the binary UNO interface. Any other method is called through the dispatch function pointer <span class="Codeintext">pDispatcher</span>. The dispatch function expects the binary UNO interface pointer (<span class="Codeintext">this</span>), the interface member type of the function to be called, an optional pointer for a return value, the argument list and finally a pointer to signal an exception has occurred.</p>
  <p class="Paragraph">The caller of the dispatch function provides memory for the return value and the exception holder (<span class="Codeintext">uno_Any</span>).</p>
  <p class="Paragraph">The <span class="Codeintext">pArgs</span> array provides pointers to binary UNO values, for example, a pointer to an interface reference (<span class="Codeintext">_uno_Interface **</span>) or a pointer to a SAL 32 bit integer (<span class="Codeintext">sal_Int32 *</span>).</p>
  <p class="Paragraph">A bridge to binary UNO maps interfaces from C++ to binary UNO and conversely. To achieve this, implement a mechanism to produce proxy interfaces for both ends of the bridge. </p>
  <h4 class="Head4"><a name="1_2_2_2_C_2B_2B_Proxy" />C++ Proxy</h4>
  <p class="Paragraph">A C++ interface proxy carries its interface type (reflection), as well as its destination binary UNO interface (<span class="Codeintext">this</span> pointer). The proxy's vftable pointer is patched to a generated vftable that is capable of determining the index that was called ,as well as the <span class="Codeintext">this</span> pointer of the proxy object to get the interface type.</p>
  <p class="Paragraph">The vftable requires an assembly code. The rest is programmed in C/C++. You are not allowed to trash the registers. On many compilers, the <span class="Codeintext">this </span>pointer and parameters are provided through stack space. The following provides an example of a Visual C++ 80x86:</p>
  <p class="Code"> </p>
  <p class="Code">vftable slot0: </p>
  <p class="Code">mov eax, 0 </p>
  <p class="Code">jmp cpp_vftable_call </p>
  <p class="Code">vftable slot0: </p>
  <p class="Code">mov eax, 1 </p>
  <p class="Code">jmp cpp_vftable_call </p>
  <p class="Code">vftable slot0: </p>
  <p class="Code">mov eax, 2 </p>
  <p class="Code">jmp cpp_vftable_call </p>
  <p class="Code">... </p>
  <p class="Code"> </p>
  <p class="Code">static __declspec(naked) void __cdecl cpp_vftable_call(void) </p>
  <p class="Code">{ </p>
  <p class="Code">__asm </p>
  <p class="Code">         {</p>
  <p class="Code">                  sub                  esp, 8                  // space for immediate return type</p>
  <p class="Code">                  push                  esp</p>
  <p class="Code">                  push                  eax                  // vtable index</p>
  <p class="Code">                  mov                  eax, esp</p>
  <p class="Code">                  add                  eax, 16</p>
  <p class="Code">                  push         eax                           // original stack ptr</p>
  <p class="Code">                  call                  cpp_mediate         // proceed in C/C++</p>
  <p class="Code">                  add                  esp, 12</p>
  <p class="Code">                  // depending on return value, fill registers</p>
  <p class="Code">                  cmp                  eax, typelib_TypeClass_FLOAT</p>
  <p class="Code">                  je                  Lfloat</p>
  <p class="Code">                  cmp                  eax, typelib_TypeClass_DOUBLE</p>
  <p class="Code">                  je                  Ldouble</p>
  <p class="Code">                  cmp                  eax, typelib_TypeClass_HYPER</p>
  <p class="Code">                  je                  Lhyper</p>
  <p class="Code">                  cmp                  eax, typelib_TypeClass_UNSIGNED_HYPER</p>
  <p class="Code">                  je                  Lhyper</p>
  <p class="Code">                  // rest is eax</p>
  <p class="Code">                  pop                  eax</p>
  <p class="Code">                  add                  esp, 4</p>
  <p class="Code">                  ret</p>
  <p class="Code">Lhyper:                  pop                  eax</p>
  <p class="Code">                  pop                  edx</p>
  <p class="Code">                  ret</p>
  <p class="Code">Lfloat:                  fld                  dword ptr [esp]</p>
  <p class="Code">                  add                  esp, 8</p>
  <p class="Code">                  ret</p>
  <p class="Code">Ldouble:                  fld                  qword ptr [esp]</p>
  <p class="Code">                  add                  esp, 8</p>
  <p class="Code">                  ret</p>
  <p class="Code">         }</p>
  <p class="Code">} </p>
  <p class="Paragraph">The vftable is filled with pointers to the different slot code (snippets). The snippet code recognizes the table index being called and calls <span class="Codeintext">cpp_vftable_call()</span>. That function calls a C/C++ function (<span class="Codeintext">cpp_mediate()</span>) and sets output registers upon return, for example, for floating point numbers depending on the return value type.</p>
  <p class="Paragraph">Remember that the vftable handling described above follows the Microsoft calling convention, that is, the <span class="Codeintext">this</span> pointer is always the first parameter on the stack. This is currently not the case for gcc that prepends a pointer to a complex return value before the this pointer on the stack if a method returns a struct. This complicates the (static) vftable treatment, because different vftable slots have to be generated for different interface types, adjusting the offset to the proxy <span class="Codeintext">this</span> pointer:</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table6"><colgroup><col width="705" /></colgroup><tr><td style="text-align:left;width:15.439cm; " class="Table6A1">
      <p class="TableHead">Microsoft Visual C++ call stack layout (esp offset [byte]): </p>
     </td></tr><tr><td style="text-align:left;width:15.439cm; " class="Table6A2">
     <p class="TextInTable">0: return address </p>
    </td></tr><tr><td style="text-align:left;width:15.439cm; " class="Table6A2">
     <p class="TextInTable">4: this pointer </p>
    </td></tr><tr><td style="text-align:left;width:15.439cm; " class="Table6A2">
     <p class="TextInTable">8: optional pointer, if return value is complex (i.e. struct to be copy-constructed) </p>
    </td></tr><tr><td style="text-align:left;width:15.439cm; " class="Table6A2">
     <p class="TextInTable">12: param0 </p>
    </td></tr><tr><td style="text-align:left;width:15.439cm; " class="Table6A2">
     <p class="TextInTable">16: param1 </p>
    </td></tr><tr><td style="text-align:left;width:15.439cm; " class="Table6A2">
     <p class="TextInTable">20: ... </p>
    </td></tr></table></div>
  <p class="Paragraph"> This is usually the hardest part for stack-oriented compilers. Afterwards proceed in C/C++ (<span class="Codeintext">cpp_mediate()</span>) to examine the proxy interface type, read out parameters from the stack and prepare the call on the binary UNO destination interface.</p>
  <p class="Paragraph">Each parameter is read from the stack and converted into binary UNO. Use cppu core functions if you have adjusted the <span class="wwwftpemail">cppumaker</span> code generation (alignment, sizes) to the binary UNO layout (see <span class="wwwftpemail">cppu/inc/uno/data.h</span>).</p>
  <p class="Paragraph">After calling the destination <span class="Codeintext">uno_dispatch()</span> method, convert any <span class="Codeintext">out/inout</span> and return the values back to C++-UNO, and return to the caller. If an exception is signalled (<span class="Codeintext">*ppException != 0</span>), throw the exception provided to you in <span class="Codeintext">ppException</span>. In most cases, you can utilize Runtime Type Information (RTTI) from your compiler framework to throw exceptions in a generic manner. Disassemble code throwing a C++ exception, and observe what the compiler generates.</p>
  <h4 class="Head4"><a name="1_2_2_3_Binary_UNO_Proxy" />Binary UNO Proxy</h4>
  <p class="Paragraph">The proxy code is simple for binary UNO. Convert any <span class="Codeintext">in/inout</span> parameters to C++-UNO values, preparing a call stack. Then perform a virtual function call that is similar to the following example for Microsoft Visual C++:</p>
  <p class="Code">void callVirtualMethod( </p>
  <p class="Code">         void * pThis, sal_Int32 nVtableIndex,</p>
  <p class="Code">         void * pRegisterReturn, typelib_TypeClass eReturnTypeClass,</p>
  <p class="Code">         sal_Int32 * pStackLongs, sal_Int32 nStackLongs )</p>
  <p class="Code">{ </p>
  <p class="Code">         // parameter list is mixed list of * and values</p>
  <p class="Code">         // reference parameters are pointers</p>
  <p class="Code"> </p>
  <p class="Code">__asm </p>
  <p class="Code">         {</p>
  <p class="Code">                  mov                  eax, nStackLongs</p>
  <p class="Code">                  test                  eax, eax</p>
  <p class="Code">                  je                  Lcall</p>
  <p class="Code">                  // copy values</p>
  <p class="Code">                  mov                  ecx, eax</p>
  <p class="Code">                  shl                  eax, 2                           // sizeof(sal_Int32) == 4</p>
  <p class="Code">                  add                  eax, pStackLongs          // params stack space</p>
  <p class="Code">Lcopy:                  sub                  eax, 4</p>
  <p class="Code">                  push                  dword ptr [eax]</p>
  <p class="Code">                  dec                  ecx</p>
  <p class="Code">                  jne                  Lcopy</p>
  <p class="Code">Lcall: </p>
  <p class="Code">                  // call</p>
  <p class="Code">                  mov                  ecx, pThis</p>
  <p class="Code">                  push                  ecx                           // this ptr</p>
  <p class="Code">                  mov                  edx, [ecx]                  // pvft</p>
  <p class="Code">                  mov                  eax, nVtableIndex</p>
  <p class="Code">                  shl                  eax, 2                           // sizeof(void *) == 4</p>
  <p class="Code">                  add                  edx, eax</p>
  <p class="Code">                  call                  [edx]                           // interface method call must be __cdecl!!!</p>
  <p class="Code"> </p>
  <p class="Code">                  // register return</p>
  <p class="Code">                  mov                  ecx, eReturnTypeClass</p>
  <p class="Code">                  cmp                  ecx, typelib_TypeClass_VOID</p>
  <p class="Code">                  je                  Lcleanup</p>
  <p class="Code">                  mov                  ebx, pRegisterReturn</p>
  <p class="Code">// int32 </p>
  <p class="Code">                  cmp                  ecx, typelib_TypeClass_LONG</p>
  <p class="Code">                  je                  Lint32</p>
  <p class="Code">                  cmp                  ecx, typelib_TypeClass_UNSIGNED_LONG</p>
  <p class="Code">                  je                  Lint32</p>
  <p class="Code">                  cmp                  ecx, typelib_TypeClass_ENUM</p>
  <p class="Code">                  je                  Lint32</p>
  <p class="Code">// int8 </p>
  <p class="Code">                  cmp                  ecx, typelib_TypeClass_BOOLEAN</p>
  <p class="Code">                  je                  Lint8</p>
  <p class="Code">                  cmp                  ecx, typelib_TypeClass_BYTE</p>
  <p class="Code">                  je                  Lint8</p>
  <p class="Code">// int16 </p>
  <p class="Code">                  cmp                  ecx, typelib_TypeClass_CHAR</p>
  <p class="Code">                  je                  Lint16</p>
  <p class="Code">                  cmp                  ecx, typelib_TypeClass_SHORT</p>
  <p class="Code">                  je                  Lint16</p>
  <p class="Code">                  cmp                  ecx, typelib_TypeClass_UNSIGNED_SHORT</p>
  <p class="Code">                  je                  Lint16</p>
  <p class="Code">// float </p>
  <p class="Code">                  cmp                  ecx, typelib_TypeClass_FLOAT</p>
  <p class="Code">                  je                  Lfloat</p>
  <p class="Code">// double </p>
  <p class="Code">                  cmp                  ecx, typelib_TypeClass_DOUBLE</p>
  <p class="Code">                  je                  Ldouble</p>
  <p class="Code">// int64 </p>
  <p class="Code">                  cmp                  ecx, typelib_TypeClass_HYPER</p>
  <p class="Code">                  je                  Lint64</p>
  <p class="Code">                  cmp                  ecx, typelib_TypeClass_UNSIGNED_HYPER</p>
  <p class="Code">                    je                  Lint64</p>
  <p class="Code">                  jmp                  Lcleanup // no simple type</p>
  <p class="Code">Lint8: </p>
  <p class="Code">                  mov                  byte ptr [ebx], al</p>
  <p class="Code">                  jmp                  Lcleanup</p>
  <p class="Code">Lint16: </p>
  <p class="Code">                  mov                  word ptr [ebx], ax</p>
  <p class="Code">                  jmp                  Lcleanup</p>
  <p class="Code">Lfloat: </p>
  <p class="Code">                  fstp                  dword ptr [ebx]</p>
  <p class="Code">                  jmp                  Lcleanup</p>
  <p class="Code">Ldouble: </p>
  <p class="Code">                  fstp                  qword ptr [ebx]</p>
  <p class="Code">                  jmp                  Lcleanup</p>
  <p class="Code">Lint64: </p>
  <p class="Code">                  mov                  dword ptr [ebx], eax</p>
  <p class="Code">                  mov                  dword ptr [ebx+4], edx</p>
  <p class="Code">                  jmp                  Lcleanup</p>
  <p class="Code">Lint32: </p>
  <p class="Code">                  mov                  dword ptr [ebx], eax</p>
  <p class="Code">                  jmp                  Lcleanup</p>
  <p class="Code">Lcleanup: </p>
  <p class="Code">                  // cleanup stack</p>
  <p class="Code">                  mov                  eax, nStackLongs</p>
  <p class="Code">                  shl                  eax, 2                           // sizeof(sal_Int32) == 4</p>
  <p class="Code">                  add                  eax, 4                           // this ptr</p>
  <p class="Code">                  add                  esp, eax</p>
  <p class="Code">         }</p>
  <p class="Code">} </p>
  <p class="Paragraph">First stack data is pushed to the stack., including a <span class="Codeintext">this</span> pointer, then the virtual function's pointer is retrieved and called. When the call returns, the return register values are copied back. It is also necessary to catch all exceptions generically and retrieve information about type and data of a thrown exception. In this case, look at your compiler framework functions also.</p>
  <h4 class="Head4"><a name="1_2_2_4_Additional_Hints" />Additional Hints</h4>
  <p class="Paragraph">Every local bridge is different, because of the compiler framework and code generation and register allocation. Before starting, look at your existing bridge code for the processor, compiler, and the platform in module <span class="wwwftpemail">bridges/source/cpp_uno</span> that is part of the OpenOffice.org source tree on <span class="wwwftpemail">www.openoffice.org</span>.</p>
  <p class="Paragraph">Also test your bridge code extensively and build the module <span class="wwwftpemail">cppu</span> with debug symbols before implementing the bridge, because cppu contains alignment and size tests for the compiler.</p>
  <p class="Paragraph">For quick development, use the executable build in <span class="wwwftpemail">cppu/test</span> raising your bridge library, doing lots of calls with all kinds of data on mapped interfaces.</p>
  <p class="P13">Also test your bridge in a non-debug build. Often, bugs in assembly code only occur in non-debug versions, because of trashed registers. In most cases, optimized code allocates or uses more processor registers than non-optimized (debug) code. </p>
  <h3 class="Head3"><a name="1_2_3_UNO_Reflection_API" />6.2.3  UNO Reflection API</h3>
  <p class="Paragraph">This section describes the UNO Reflection API. This API includes services and interfaces that can be used to get information about interfaces and objects at runtime. </p>
  <h4 class="Head4"><a name="1_2_3_1_XTypeProvider_Interface" />XTypeProvider Interface</h4>
  <p class="Paragraph">The interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XTypeProvider.html" title="see type com.sun.star.lang.XTypeProvider">com.sun.star.lang.XTypeProvider</a></span> allows the developer to retrieve all types provided by an object. These types are usually interface types and the <span class="Codeintext">XTypeProvider</span> interface can be used at runtime to detect which interfaces are supported by an object. This interface should be supported by every object to make it scriptable from OpenOffice.org Basic.</p>
  <h4 class="Head4"><a name="1_2_3_2_Converter_Service" />Converter Service</h4>
  <p class="Paragraph">The service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/Converter.html" title="see type com.sun.star.script.Converter">com.sun.star.script.Converter</a></span> supporting the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XTypeConverter.html" title="see type com.sun.star.script.XTypeConverter">com.sun.star.script.XTypeConverter</a></span> provides basic functionality that is important in the reflection context. It converts values to a particular type. For the method <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XTypeConverter.html#convertTo" title="see convertTo of type com.sun.star.script.XTypeConverter:convertTo">com.sun.star.script.XTypeConverter:convertTo</a>()</span>, the target type is specified as <span class="Codeintext">type</span>, allowing any type available in the UNO type system. The method <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XTypeConverter.html#convertToSimpleType" title="see convertToSimpleType of type com.sun.star.script.XTypeConverter:convertToSimpleType">com.sun.star.script.XTypeConverter:convertToSimpleType</a>()</span> converts a value into a simple type that is specified by the corresponding <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/TypeClass.html" title="see type com.sun.star.uno.TypeClass">com.sun.star.uno.TypeClass</a></span>. If the requested conversion is not feasible, both methods throw a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/CannotConvertException.html" title="see type com.sun.star.script.CannotConvertException">com.sun.star.script.CannotConvertException</a></span>. </p>
  <h4 class="Head4"><a name="1_2_3_3_CoreReflection_Service" />CoreReflection Service</h4>
  <p class="Paragraph">The service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/CoreReflection.html" title="see type com.sun.star.reflection.CoreReflection">com.sun.star.reflection.CoreReflection</a></span> supporting the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/XIdlReflection.html" title="see type com.sun.star.reflection.XIdlReflection">com.sun.star.reflection.XIdlReflection</a></span> is an important entry point for the Uno Reflection API. The <span class="Codeintext">XIdlReflection</span> interface has two methods that each return a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/XIdlClass.html" title="see type com.sun.star.reflection.XIdlClass">com.sun.star.reflection.XIdlClass</a></span> interface for a given name (method <span class="Codeintext">forName()</span>) or <span class="Codeintext">any</span> value (method <span class="Codeintext">getType()</span>).</p>
  <p class="Paragraph">The interface <span class="Codeintext">XIdlClass</span> is one of the central interfaces of the Reflection API. It provides information about types, especially about class or interface, and struct types. Besides general information, for example, to check type identity through the method <span class="Codeintext">equals()</span> or to determine a type or class name by means of the method <span class="Codeintext">getName()</span>, it is possible to ask for the fields or members, and methods supported by an interface type (method <span class="Codeintext">getFields()</span> returning a sequence of <span class="Codeintext">XIdlField</span> interfaces and method <span class="Codeintext">getMethods()</span> returning a sequence of <span class="Codeintext">XIdlMethod</span> interfaces). </p>
  <p class="Paragraph">The interface <span class="Codeintext">XIdlField</span> is deprecated and should not be used. Instead the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/XIdlField2.html" title="see type com.sun.star.reflection.XIdlField2">com.sun.star.reflection.XIdlField2</a></span> is available by querying it from an <span class="Codeintext">XIdlField</span> interface returned by an <span class="Codeintext">XIdlClass</span> method.</p>
  <p class="Paragraph">The interface <span class="Codeintext">XIdlField</span> or <span class="Codeintext">XIdlField2</span> represents a struct member of a struct or get or set accessor methods of an interface type. It provides information about the field (methods <span class="Codeintext">getType()</span> and <span class="Codeintext">getAccessMode()</span>) and reads and – if allowed by the access mode – modifies its value for a given instance of the corresponding type (methods <span class="Codeintext">get()</span> and <span class="Codeintext">set()</span>).</p>
  <p class="Paragraph">The interface <span class="Codeintext">XIdlMethod</span> represents a method of an interface type. It provides information about the method (methods <span class="Codeintext">getReturnType()</span>, <span class="Codeintext">getParameterTypes()</span>, <span class="Codeintext">getParameterInfos()</span>, <span class="Codeintext">getExceptionTypes()</span> and <span class="Codeintext">getMode()</span>) and invokes the method for a given instance of the corresponding type (method <span class="Codeintext">invoke()</span>).</p>
  <h5 class="Head5"><a name="1_2_3_3_1_Introspection" />Introspection</h5>
  <p class="Paragraph">The service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/Introspection.html" title="see type com.sun.star.beans.Introspection">com.sun.star.beans.Introspection</a></span> supporting the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XIntrospection.html" title="see type com.sun.star.beans.XIntrospection">com.sun.star.beans.XIntrospection</a></span> is used to inspect an object of interface or struct type to obtain information about its members and methods. Unlike the <span class="Codeintext">CoreReflection</span> service, and the <span class="Codeintext">XIdlClass</span> interface ,the inspection is not limited to one interface type but to all interfaces supported by an object. To detect the interfaces supported by an object, the <span class="Codeintext">Introspection</span> service queries for the <span class="Codeintext">XTypeProvider</span> interface. If an object does not support this interface, the introspection does not work correctly.</p>
  <p class="Paragraph">To inspect an object, pass it as an <span class="Codeintext">any</span> value to the <span class="Codeintext">inspect()</span> method of <span class="Codeintext">XIntrospection</span>. The result of the introspection process is returned as <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XIntrospectionAccess.html" title="see type com.sun.star.beans.XIntrospectionAccess">com.sun.star.beans.XIntrospectionAccess</a></span> interface. This interface is used to obtain information about the inspected object. All information returned refers to the complete object as a combination of several interfaces. When accessing an object through <span class="Codeintext">XIntrospectionAccess,</span> it is impossible to distinguish between the different interfaces.</p>
  <p class="Paragraph">The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XIntrospectionAccess.html" title="see type com.sun.star.beans.XIntrospectionAccess">com.sun.star.beans.XIntrospectionAccess</a></span> interface provides a list of all properties (method <span class="Codeintext">getProperties()</span>) and methods (method <span class="Codeintext">getMethods()</span>) supported by the object. The introspection maps methods matching the pattern </p>
  <p class="Code">FooType getFoo()  <br /> setFoo(FooType) </p>
  <p class="Paragraph">to a property <span class="Codeintext">Foo</span> of type <span class="Codeintext">FooType</span>.</p>
  <p class="Paragraph"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XIntrospectionAccess.html" title="see type com.sun.star.beans.XIntrospectionAccess">com.sun.star.beans.XIntrospectionAccess</a></span> also supports a categorization of properties and methods. For instance, it is possible to exclude "dangerous" methods ,such as the reference counting methods <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XInterface.html#acquire" title="see acquire of type com.sun.star.uno.XInterface:acquire">com.sun.star.uno.XInterface:acquire</a>()</span> and <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XInterface.html#release" title="see release of type com.sun.star.uno.XInterface:release">com.sun.star.uno.XInterface:release</a>() </span>from the set of methods returned by <span class="Codeintext">getMethods()</span>. When the <span class="Codeintext">Introspection</span> service is used to bind a new scripting language, it is useful to block the access to functionality that could crash the entire OpenOffice.org application when used in an incorrect manner.</p>
  <p class="Paragraph">The <span class="Codeintext">XIntrospectionAccess</span> interface does not allow the developer to invoke methods and access properties directly. To invoke methods, the <span class="Codeintext">invoke()</span> method of the <span class="Codeintext">XIdlMethod</span> interfaces returned by the methods <span class="Codeintext">getMethods()</span> and <span class="Codeintext">getMethod()</span> are used. To access properties, a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XPropertySet.html" title="see type com.sun.star.beans.XPropertySet">com.sun.star.beans.XPropertySet</a></span> interface is used that can be queried from the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XIntrospectionAccess.html#queryAdapter" title="see queryAdapter of type com.sun.star.beans.XIntrospectionAccess:queryAdapter">com.sun.star.beans.XIntrospectionAccess:queryAdapter</a>()</span> method. This method also provides adapter interfaces for other generic access interfaces like <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XNameAccess.html" title="see type com.sun.star.container.XNameAccess">com.sun.star.container.XNameAccess</a></span> and <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XIndexAccess.html" title="see type com.sun.star.container.XIndexAccess">com.sun.star.container.XIndexAccess</a></span>, if these interfaces are also supported by the original object.</p>
  <h5 class="Head5"><a name="1_2_3_3_2_Invocation" />Invocation</h5>
  <p class="P14">The service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/Invocation.html" title="see type com.sun.star.script.Invocation">com.sun.star.script.Invocation</a></span> supporting the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XSingleServiceFactory.html" title="see type com.sun.star.lang.XSingleServiceFactory">com.sun.star.lang.XSingleServiceFactory</a></span> provides a generic, high-level access (higher compared to the <span class="Codeintext">Introspection</span> service) to the properties and methods of an object. The object that should be accessed through <span class="Codeintext">Introspection</span> is passed to the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XSingleServiceFactory.html#createInstanceWithArguments" title="see createInstanceWithArguments of type com.sun.star.lang.XSingleServiceFactory:createInstanceWithArguments">com.sun.star.lang.XSingleServiceFactory:createInstanceWithArguments</a>()</span> method. The returned <span class="Codeintext">XInterface</span> can then be queried for <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XInvocation2.html" title="see type com.sun.star.script.XInvocation2">com.sun.star.script.XInvocation2</a></span> derived from <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XInvocation.html" title="see type com.sun.star.script.XInvocation">com.sun.star.script.XInvocation</a></span>. </p>
  <p class="Paragraph">The <span class="Codeintext">XInvocation</span> interface invokes methods and access properties directly by passing their names and additional parameters to the corresponding methods (method <span class="Codeintext">invoke()</span>, <span class="Codeintext">getValue()</span> and <span class="Codeintext">setValue()</span>). It is also possible to ask if a method or property exists with the methods <span class="Codeintext">hasMethod()</span> and <span class="Codeintext">hasProperty()</span>.</p>
  <p class="Paragraph">When invoking a method with <span class="Codeintext">invoke()</span>, the parameters are passed as a sequence of <span class="Codeintext">any</span> values. The <span class="Codeintext">Invocation</span> service automatically converts these arguments, if possible to the appropriate target types using the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/Converter.html" title="see type com.sun.star.script.Converter">com.sun.star.script.Converter</a></span> service that is further described below. The <span class="Codeintext">Introspection</span> functionality is suitable for binding scripting languages to UNO that are not or only weakly typed.</p>
  <p class="Paragraph">The <span class="Codeintext">XInvocation2</span> interface extends the <span class="Codeintext">Invocation</span> functionality by methods to ask for further information about the properties and methods of the object represented by the <span class="Codeintext">Invocation</span> instance. It is possible to ask for the names of all the properties and methods (method <span class="Codeintext">getMemberNames()</span>) and detailed information about them represented by the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/InvocationInfo.html" title="see type com.sun.star.script.InvocationInfo">com.sun.star.script.InvocationInfo</a></span> struct type (methods <span class="Codeintext">getInfo()</span> and <span class="Codeintext">getInfoForName()</span>).</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table7"><colgroup><col width="149" /><col width="556" /></colgroup><tr><td colspan="2" style="text-align:left;width:3.265cm; " class="Table7A1">
      <p class="TableHead">Members of struct <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/InvocationInfo.html" title="see type com.sun.star.script.InvocationInfo">com.sun.star.script.InvocationInfo</a></span></p>
     </td></tr><tr><td style="text-align:left;width:3.265cm; " class="Table7A2">
     <p class="TableCode">aName </p>
    </td><td style="text-align:left;width:12.174cm; " class="Table7B2">
     <p class="TextInTable">Name of the method or property. </p>
    </td></tr><tr><td style="text-align:left;width:3.265cm; " class="Table7A2">
     <p class="TableCode">eMemberType </p>
    </td><td style="text-align:left;width:12.174cm; " class="Table7B2">
     <p class="TextInTable">Kind of the member (method or property). </p>
    </td></tr><tr><td style="text-align:left;width:3.265cm; " class="Table7A2">
     <p class="TableCode">PropertyAttribute </p>
    </td><td style="text-align:left;width:12.174cm; " class="Table7B2">
     <p class="TextInTable">Only for property members: This field may contain zero or more constants of the com::sun::star::beans::PropertyAttribute constants group. It is not guaranteed that all necessary constants are set to describe the property completely, but a flag will be set if the corresponding characteristic really exists. For example,iIf the READONLY flag is set, the property is read only. If it is not set, the property nevertheless can be read only. This field is irrelevant for methods and is set to 0. </p>
    </td></tr><tr><td style="text-align:left;width:3.265cm; " class="Table7A2">
     <p class="TableCode">aType </p>
    </td><td style="text-align:left;width:12.174cm; " class="Table7B2">
     <p class="TextInTable">Type of the member, when referring to methods, the return type </p>
    </td></tr><tr><td style="text-align:left;width:3.265cm; " class="Table7A2">
     <p class="TableCode">aParamTypes </p>
    </td><td style="text-align:left;width:12.174cm; " class="Table7B2">
     <p class="TextInTable">Types of method parameters, for properties this sequence is empty </p>
    </td></tr><tr><td style="text-align:left;width:3.265cm; " class="Table7A2">
     <p class="TableCode">aParamModes </p>
    </td><td style="text-align:left;width:12.174cm; " class="Table7B2">
     <p class="TextInTable">Mode of method parameters (<span class="Codeintext">in, out, inout</span>), for properties this sequence is empty.</p>
    </td></tr></table></div>
  <p class="Paragraph">The <span class="Codeintext">Invocation</span> service is based on the <span class="Codeintext">Introspection</span> service. The <span class="Codeintext">XInvocation</span> interface has a method <span class="Codeintext">getIntrospection()</span> to ask for the corresponding <span class="Codeintext">XIntrospectionAccess</span> interface. The <span class="Codeintext">Invocation</span> implementation currently implemented in OpenOffice.org supports this, but in general, an implementation of <span class="Codeintext">XInvocation</span> does not provide access to an <span class="Codeintext">XInvocationAccess</span> interface. </p>
  <h5 class="Head5"><a name="1_2_3_3_3_InvocationAdapterFactory" />InvocationAdapterFactory</h5>
  <p class="Paragraph">The service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/InvocationAdapterFactory.html" title="see type com.sun.star.script.InvocationAdapterFactory">com.sun.star.script.InvocationAdapterFactory</a></span> supporting the interfaces <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XInvocationAdapterFactory.html" title="see type com.sun.star.script.XInvocationAdapterFactory">com.sun.star.script.XInvocationAdapterFactory</a></span> and <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XInvocationAdapterFactory2.html" title="see type com.sun.star.script.XInvocationAdapterFactory2">com.sun.star.script.XInvocationAdapterFactory2</a></span> are used to create adapters that map a generic <span class="Codeintext">XInvocation</span> interface to specific interfaces. This functionality is especially essential for creating scripting language bindings that do not only access UNO from the scripting language, but also to implement UNO objects using the scripting language. Without the <span class="Codeintext">InvocationAdapterFactory</span> functionality, this would only be possible if the scripting language supported the implementation of interfaces directly.</p>
  <p class="Paragraph">By means of the <span class="Codeintext">InvocationAdapterFactory</span> functionality it is only necessary to map the scripting language specific native invocation interface, for example, realized by an OLE <span class="Codeintext">IDispatch</span> interface, to the UNO <span class="Codeintext">XInvocation</span> interface. Then, any combination of interfaces needed to represent the services supported by a UNO object are provided as an adapter using the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XInvocationAdapterFactory2.html#createAdapter" title="see createAdapter of type com.sun.star.script.XInvocationAdapterFactory2:createAdapter">com.sun.star.script.XInvocationAdapterFactory2:createAdapter</a>()</span> method. </p>
  <p class="Paragraph">Another important use of the invocation adapter is to create listener interfaces that are passed to the corresponding <span class="Codeintext">add...Listener()</span> method of an UNO interface and maps to the methods of an interface to <span class="Codeintext">XInvocation</span>. In this case, usually the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XInvocationAdapterFactory.html#createAdapter" title="see createAdapter of type com.sun.star.script.XInvocationAdapterFactory:createAdapter">com.sun.star.script.XInvocationAdapterFactory:createAdapter</a>()</span> method is used.</p>
  <h5 class="Head5"><a name="1_2_3_3_4_XTypeDescription" />XTypeDescription</h5>
  <p class="P14">Internally, types in UNO are represented by the type <span class="Codeintext">type</span>. This type also has an interface representation <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/XTypeDescription.html" title="see type com.sun.star.reflection.XTypeDescription">com.sun.star.reflection.XTypeDescription</a></span>. A number of interfaces derived from <span class="Codeintext">XTypeDescription</span> represent types. These interfaces are:</p>
  <ul style="margin-left:0.5cm;">
   <li class="P15" style="margin-left:2.5cm;"><p class="P15" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/XArrayTypeDescription.html" title="see type com.sun.star.reflection.XArrayTypeDescription">com.sun.star.reflection.XArrayTypeDescription</a></span></p></li>
   <li class="P15" style="margin-left:2.5cm;"><p class="P15" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/XCompoundTypeDescription.html" title="see type com.sun.star.reflection.XCompoundTypeDescription">com.sun.star.reflection.XCompoundTypeDescription</a></span></p></li>
   <li class="P15" style="margin-left:2.5cm;"><p class="P15" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/XEnumTypeDescription.html" title="see type com.sun.star.reflection.XEnumTypeDescription">com.sun.star.reflection.XEnumTypeDescription</a></span></p></li>
   <li class="P15" style="margin-left:2.5cm;"><p class="P15" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/XIndirectTypeDescription.html" title="see type com.sun.star.reflection.XIndirectTypeDescription">com.sun.star.reflection.XIndirectTypeDescription</a></span></p></li>
   <li class="P15" style="margin-left:2.5cm;"><p class="P15" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/XUnionTypeDescription.html" title="see type com.sun.star.reflection.XUnionTypeDescription">com.sun.star.reflection.XUnionTypeDescription</a></span></p></li>
   <li class="P15" style="margin-left:2.5cm;"><p class="P15" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/XInterfaceTypeDescription.html" title="see type com.sun.star.reflection.XInterfaceTypeDescription">com.sun.star.reflection.XInterfaceTypeDescription</a></span></p></li>
   <li class="P15" style="margin-left:2.5cm;"><p class="P15" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/XInterfaceAttributeTypeDescription.html" title="see type com.sun.star.reflection.XInterfaceAttributeTypeDescription">com.sun.star.reflection.XInterfaceAttributeTypeDescription</a></span></p></li>
   <li class="P15" style="margin-left:2.5cm;"><p class="P15" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/XInterfaceMemberTypeDescription.html" title="see type com.sun.star.reflection.XInterfaceMemberTypeDescription">com.sun.star.reflection.XInterfaceMemberTypeDescription</a></span></p></li>
   <li class="P15" style="margin-left:2.5cm;"><p class="P15" style="margin-left:0cm;"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/XInterfaceMethodTypeDescription.html" title="see type com.sun.star.reflection.XInterfaceMethodTypeDescription">com.sun.star.reflection.XInterfaceMethodTypeDescription</a></span></p></li>
  </ul>
  <p class="P14">The corresponding services are <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/TypeDescriptionManager.html" title="see type com.sun.star.reflection.TypeDescriptionManager">com.sun.star.reflection.TypeDescriptionManager</a></span> and <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/TypeDescriptionProvider.html" title="see type com.sun.star.reflection.TypeDescriptionProvider">com.sun.star.reflection.TypeDescriptionProvider</a></span>. These services support <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XHierarchicalNameAccess.html" title="see type com.sun.star.container.XHierarchicalNameAccess">com.sun.star.container.XHierarchicalNameAccess</a></span> and asks for a type description interface by passing the fully qualified type name to the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XHierarchicalNameAccess.html#getByHierarchicalName" title="see getByHierarchicalName of type com.sun.star.container.XHierarchicalNameAccess:getByHierarchicalName">com.sun.star.container.XHierarchicalNameAccess:getByHierarchicalName</a>()</span> method.</p>
  <p class="P14">The <span class="Codeintext">TypeDescription</span> services and interfaces are listed here for completeness. Ordinarily this functionality would not be used when binding a scripting language to UNO, because the high-level services <span class="Codeintext">Invocation</span>, <span class="Codeintext">Introspection</span> and <span class="Codeintext">Reflection</span> provide all the functionality required. If the binding is implemented in C++, the type <span class="Codeintext">type</span> and the corresponding C API are used directly.</p>
  <p class="Paragraph">The following illustration provides an overview of how the described services and interfaces work together. Each arrow expresses a "uses" relationship. The interfaces listed for a service are not necessarily supported by the service directly, but contain interfaces that are strongly related to the services. </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table8"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table8A1">
      <div class="Paragraph"><div style="width: 10.968cm; " id="Rahmen3" class="fr3">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/Reflection1.png" title="link to the full-sized graphic &quot;./Reflection1.png&quot;"><img border="0" width="496" height="643" alt="UML diagram showing the a Scripting Language Binding" src="./6 Advanced UNO_files/Reflection1.png" class="fr4" /></a>Illustration <a name="refIllustration0">6.1</a> </div>
       </div> </div>
     </td></tr></table></div>
  <h3 class="Head3"><a name="1_2_4_XInvocation_Bridge" />6.2.4  XInvocation Bridge</h3>
  <h4 class="Head4"><a name="1_2_4_1_Scripting_Existing_UNO_Objects" />Scripting Existing UNO Objects</h4>
  <p class="Paragraph">This section describes UNO bridges for type-unsafe (scripting) programming languages. These bridges are based on the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/Invocation.html" title="see type com.sun.star.script.Invocation">com.sun.star.script.Invocation</a></span> service.</p>
  <p class="Paragraph">The most common starting point for a new scripting language binding is that you want to control OpenOffice.org from a script running externally. To accomplish this, you need to know what your scripting language offers to extend the language, for example, Python or Perl extend the language with a module concept using locally shared libraries.  </p>
  <p class="Paragraph">In general, your bridge must offer a static method that is called from a script. Within this method, bootstrap a UNO C++ component context as described in <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_9_4_Bootstrapping_a_Service_Manager" title="see chapter 4.9.4 Writing UNO Components - Deployment Options for Components - Bootstrapping a Service Manager">4.9.4 Writing UNO Components - Deployment Options for Components - Bootstrapping a Service Manager</a></span>.</p>
  <h5 class="Head5"><a name="1_2_4_1_1_Proxying_a_UNO_Object" />Proxying a UNO Object</h5>
  <p class="Paragraph">Next, this component context must be passed to the script programmer, so that you can instantiate a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/bridge/UnoUrlResolver.html" title="see type com.sun.star.bridge.UnoUrlResolver">com.sun.star.bridge.UnoUrlResolver</a></span> and connect to a running office within the script. </p>
  <p class="Paragraph">The component context can not be passed directly as a C++ UNO reference, because the scripting engine does not recognize it, therefore build a language dependent proxy object around the C++ object Reference.  </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table9"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table9A1">
      <div class="Paragraph"><div style="width: 11.462cm; " id="Rahmen31" class="fr5">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/xinvocation_bridge1.png" title="link to the full-sized graphic &quot;./xinvocation_bridge1.png&quot;"><img border="0" width="519" height="219" alt="A graphic showing a scripting call over a proxy instance" src="./6 Advanced UNO_files/xinvocation_bridge1.png" class="fr4" /></a>Illustration <a name="refIllustration1">6.2</a> </div>
       </div> </div>
     </td></tr></table></div>
  <p class="Paragraph">For example, Python offers an API to create a proxy. Typically calls invoked on the proxy from a script are narrowed into one single C function. The Python runtime passes method names and an array containing the arguments to this C function.  </p>
  <p class="Paragraph">If a proxy is implemented for a concrete interface, the method names that you received could in theory be compared to all method names offered by the UNO interface. This is not feasible, because of all the interfaces used in OpenOffice.org. The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/Invocation.html" title="see type com.sun.star.script.Invocation">com.sun.star.script.Invocation</a></span> service exists for this purpose. It offers a simple interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XSingleServiceFactory.html" title="see type com.sun.star.lang.XSingleServiceFactory">com.sun.star.lang.XSingleServiceFactory</a></span> that creates a proxy for an arbitrary UNO object using the <span class="Codeintext">createInstanceWithArguments()</span> method and passing the object the proxy acts for. Use the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XInvocation.html" title="see type com.sun.star.script.XInvocation">com.sun.star.script.XInvocation</a></span> interface that is exported by this proxy to invoke a method on the UNO object. </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table10"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table10A1">
      <div class="Paragraph"><div style="width: 11.22cm; " id="Rahmen4" class="fr5">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/xinvocation_bridge2.png" title="link to the full-sized graphic &quot;./xinvocation_bridge2.png&quot;"><img border="0" width="507" height="497" alt="a graphic showing a scripting call using over XInvocation" src="./6 Advanced UNO_files/xinvocation_bridge2.png" class="fr4" /></a>Illustration <a name="refIllustration2">6.3</a> </div>
       </div> </div>
     </td></tr></table></div>
  <h5 class="Head5"><a name="1_2_4_1_2_Argument_Conversion" />Argument Conversion</h5>
  <p class="Paragraph">In addition, argument conversion must be c onsidered by specifying how each UNO type should be mapped to your target language. </p>
  <p class="Paragraph">Convert the language dependent data types to UNO data types before calling <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XInvocation.html#invoke" title="see invoke of type com.sun.star.script.XInvocation:invoke">com.sun.star.script.XInvocation:invoke</a>()</span> and convert the UNO datatypes (return value and out parameters) to language dependent types after the call has been exectuted. The conversion routines are typically recursive functions, because data values are nested in complex types, such as <span class="Codeintext">struct</span> or <span class="Codeintext">any</span>. </p>
  <p class="Paragraph">When UNO object references are returned by method calls to UNO objects, create new language dependent proxies as discussed above. When passing a previously returned UNO object as a parameter to a new method call, the language binding must recognize that it is a proxied object and pass the original UNO object reference to the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XInvocation.html#invoke" title="see invoke of type com.sun.star.script.XInvocation:invoke">com.sun.star.script.XInvocation:invoke</a>()</span> call instead.</p>
  <p class="Paragraph">A special case for conversions are UNOIDL structs. You want to call a method that takes a struct as an argument. The first problem is the struct must be created by the bridge and the script programmer must be able to set members at the struct. One solution is that the bridge implementer creates a UNO struct using core C functions from the <span class="Codeintext">cppu</span> library, but this is complicated and results in a lot of difficulty. </p>
  <p class="Paragraph">Therefore, a solution has been created that accesses structs through the <span class="Codeintext">XInvocation</span> interface, as if they were UNO objects. This simplifies struct handling for bridge programmers. Refer to the reference documentation of <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/CoreReflection.html" title="see type com.sun.star.reflection.CoreReflection">com.sun.star.reflection.CoreReflection</a></span> and the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/Invocation.html" title="see type com.sun.star.script.Invocation">com.sun.star.script.Invocation</a></span> service and the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XMaterialHolder.html" title="see type com.sun.star.beans.XMaterialHolder">com.sun.star.beans.XMaterialHolder</a></span> interface.</p>
  <h5 class="Head5"><a name="1_2_4_1_3_Exception_Handling" />Exception Handling</h5>
  <p class="Paragraph">UNO method calls may throw exceptions and must be mapped to the desired target language appropriately, depending on the capabilities of your target language. Ideally, the target language supports an exception concept, but error handlers, such as in OpenOffice.org Basic can be used also. A third way and worst case scenario is to check after every API call if an exception has been thrown,. In case the UNO object throws an excception, the <span class="Codeintext">XInvocation</span> proxy throws a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/InvocationTargetException.html" title="see type com.sun.star.reflection.InvocationTargetException">com.sun.star.reflection.InvocationTargetException</a></span>. The exception has an additional <span class="Codeintext">any </span>member, that contains the exception that was really thrown.</p>
  <p class="Paragraph">Note that the <span class="Codeintext">XInvocation</span> proxy may throw a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/CannotConvertException.html" title="see type com.sun.star.script.CannotConvertException">com.sun.star.script.CannotConvertException</a></span> indicating that the arguments passed by the script programmer cannot be matched to the arguments of the desired function. For example, there are missing arguments or the types are incompatible. This must be reported as an error to the script programmer.</p>
  <h5 class="Head5"><a name="1_2_4_1_4_Property_Support" />Property Support</h5>
  <p class="Paragraph">The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/Invocation.html" title="see type com.sun.star.script.Invocation">com.sun.star.script.Invocation</a></span> has special <span class="Codeintext">getProperty()</span> and <span class="Codeintext">setProperty()</span> methods. These methods are used when the UNO object supports a property set and your target language, for example, supports something similar to the following: </p>
  <p class="Code">object.propname = 'foo';.  </p>
  <p class="Paragraph">Note that every property is also reachable by <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XInvocation.html#invoke" title="see invoke of type com.sun.star.script.XInvocation:invoke">com.sun.star.script.XInvocation:invoke</a>('setPropertyValue', ...)</span>, so these set or getProperty functions are optional.</p>
  <h4 class="Head4"><a name="1_2_4_2_Implementing_UNO_objects" />Implementing UNO objects</h4>
  <p class="Paragraph">When it is possible to implement classes in your target language, consider offering support for implementation of UNO objects. This is useful for callbacks, for example, event listeners. Another typical use case is to provide a datasource through a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/io/XInputStream.html" title="see type com.sun.star.io.XInputStream">com.sun.star.io.XInputStream</a></span>.</p>
  <p class="Paragraph">The script programmer determines which UNOIDL types the developed class implements, such as flagged by a special member name, for example, such as <span class="Codeintext">__supportedUnoTypes</span>. </p>
  <p class="Paragraph">When an instance of a class is passed as an argument to a call on an external UNO object, the bridge code creates a new language dependent proxy that additionally supports the <span class="Codeintext">XInvocation</span> interface. the bridge code hands the <span class="Codeintext">XInvocation</span> reference of the bridge's proxy to the called object. This works as long as the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XInvocation.html#invoke" title="see invoke of type com.sun.star.script.XInvocation:invoke">com.sun.star.script.XInvocation:invoke</a>()</span> method is used directly, for instance OpenOffice.org Basic, except if the called object expects an <span class="Codeintext">XInputStream</span>. </p>
  <p class="Paragraph">The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/InvocationAdapterFactory.html" title="see type com.sun.star.script.InvocationAdapterFactory">com.sun.star.script.InvocationAdapterFactory</a></span> service helps by creating a proxy for a certain object that implements <span class="Codeintext">XInvocation</span> and a set of interfaces, for example, given by the <span class="Codeintext">__supportedUnoTypes</span> variable. The proxy returned by the <span class="Codeintext">createAdapater()</span> method must be passed to the called object instead of the bridge's <span class="Codeintext">XInvocation</span> implementation. When the <span class="Codeintext">Adapter</span> is queried for one of the supported types, an appropriate proxy supporting that interface is created.</p>
  <p class="Paragraph">If a UNO object invokes a call on the object, the bridge proxy's<span class="Codeintext"> <a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/XInvocation.html#invoke" title="see invoke of type com.sun.star.script.XInvocation:invoke">com.sun.star.script.XInvocation:invoke</a>()</span> method is called. It converts the passed arguments from UNO types to language dependent types and conversely using the same routines you have for the other calling direction. Finally, it delegates the call to the implementation within the script.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table11"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table11A1">
      <div class="Paragraph"><div style="width: 12.326cm; " id="Rahmen5" class="fr5">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/xinvocation_bridge3.png" title="link to the full-sized graphic &quot;./xinvocation_bridge3.png&quot;"><img border="0" width="557" height="343" alt="A graphic showing a call sequence" src="./6 Advanced UNO_files/xinvocation_bridge3.png" class="fr4" /></a>Illustration <a name="refIllustration3">6.4</a> </div>
       </div> </div>
     </td></tr></table></div>
  <p class="Paragraph">It may become difficult if you do not want to start with an external scripting engine, but want to use the scripting engine inside the OpenOffice.org process instead. This must be supported by the target language. Often it is possible to load some library dynamically and access the scripting runtime engine through a C API. It should be implemented as a UNO C++ component. There are currently no generic UNO interfaces for this case, except for the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/loader/XImplementationLoader.html" title="see type com.sun.star.loader.XImplementationLoader">com.sun.star.loader.XImplementationLoader</a></span>. Define your own interfaces that best match your requirements. You might instantiate from Basic and retrieve an initial object or start a script. Future versions of OpenOffice.org may have a more comprehensive solution.</p>
  <h4 class="Head4"><a name="1_2_4_3_Example_3A_Python_Bridge_PyUNO" />Example: Python Bridge PyUNO</h4>
  <p class="Paragraph">This section provides an example of how the Python UNO bridge PyUNO bootstraps a service manager and how it makes use of the <span class="Codeintext">Invocation</span> service to realize method invocation. While some parts are implementation or Python specific, the example provides a general understanding of language bindings.</p>
  <p class="Paragraph">The Python bridge PyUNO uses the cppu helper library to bootstrap a local service manager that is asked for a <span class="Codeintext">UnoUrlResolver</span> service in Python.</p>
  <p class="Paragraph">In <span class="wwwftpemail">UNO.py</span>, Python calls <span class="Codeintext">PyUNO.bootstrap()</span> and receives a local component context. Note the parameter setup in that, it points to an ini file that configures the bootstrapped service manager with a type library. The file <span class="wwwftpemail">setup.ini</span> corresponds to the <span class="wwwftpemail">uno.ini</span> file that is used with the global service manager of the office.</p>
  <p class="Code">import PyUNO </p>
  <p class="Code">import os </p>
  <p class="Code"> </p>
  <p class="Code"><span class="CodeEmphasis">setup_ini = 'file:///%s/setup.ini' % os.getenv ('PWD')</span> </p>
  <p class="Code"> </p>
  <p class="Code">class UNO: </p>
  <p class="Code"> </p>
  <p class="Code">         def __init__ ( self, connection='socket,host=localhost,port=2083;urp', setup=setup_ini ):</p>
  <p class="Code">                  """ do the bootstrap </p>
  <p class="Code"> </p>
  <p class="Code">                           connection can be one or more of the following:</p>
  <p class="Code"> </p>
  <p class="Code">                           socket,</p>
  <p class="Code">                           host = localhost | &lt;hostname&gt; | &lt;ip-addr&gt;,</p>
  <p class="Code">                           port = &lt;port&gt;,</p>
  <p class="Code">                           service = soffice,</p>
  <p class="Code">                           user = &lt;username&gt;,</p>
  <p class="Code">                           password = &lt;password&gt;</p>
  <p class="Code">                           ;urp</p>
  <p class="Code">         </p>
  <p class="Code">                  """</p>
  <p class="Code"> </p>
  <p class="Code">                  self.XComponentContext = PyUNO.<span class="CodeEmphasis">bootstrap</span> ( <span class="CodeEmphasis">setup</span> )</p>
  <p class="Code">                  self.XUnoUrlResolver, o = \</p>
  <p class="Code">                           self.XComponentContext.ServiceManager.createInstanceWithContext (</p>
  <p class="Code">                                    'com.sun.star.bridge.UnoUrlResolver', self.XComponentContext )</p>
  <p class="Code">                  self.XNamingService, o = self.XUnoUrlResolver.resolve (</p>
  <p class="Code">                                    'uno:%s;StarOffice.NamingService' % connection )</p>
  <p class="Code">                  self.XMultiServiceFactory, o = self.XNamingService.getRegisteredObject (</p>
  <p class="Code">                                    'StarOffice.ServiceManager')</p>
  <p class="Code">                  self.XComponentLoader, o = \</p>
  <p class="Code">                           self.XMultiServiceFactory.createInstance ( 'com.sun.star.frame.Desktop' )</p>
  <p class="Code">                  ...</p>
  <p class="Paragraph">Python uses function tables to map Python to C functions. <span class="wwwftpemail">PyUNO_module.cc</span> defines a table with the mappings for the PyUNO object. As shown in the following example, <span class="Codeintext">PyUNO.bootstrap()</span> is mapped to the C function <span class="Codeintext">newBootstrapPyUNO()</span>:</p>
  <p class="Code">static struct PyMethodDef PyUNOModule_methods [] = </p>
  <p class="Code">  {</p>
  <p class="Code">    {"bootstrapPyUNO", bootstrapPyUNO, 1},</p>
  <p class="Code">    {"<span class="CodeEmphasis">bootstrap</span> ", <span class="CodeEmphasis">newBootstrapPyUNO</span> , 1}, </p>
  <p class="Code">    {"createIdlStruct", createIdlStruct, 1},</p>
  <p class="Code">    {"true", createTrueBool, 1},</p>
  <p class="Code">    {"false", createFalseBool, 1},</p>
  <p class="Code">    {NULL, NULL}</p>
  <p class="Code">  };</p>
  <p class="Paragraph">The function <span class="Codeintext">newBootstrapPyUNO()</span> calls <span class="Codeintext">Util::bootstrap()</span> in <span class="wwwftpemail">PyUNO_Util.cc</span> and passes the location of the <span class="wwwftpemail">setup.ini</span> file.</p>
  <p class="Code">static PyObject* newBootstrapPyUNO (PyObject* self, PyObject* args) </p>
  <p class="Code">{ </p>
  <p class="Code">  char* ini_file_location;</p>
  <p class="Code">  Reference&lt;XComponentContext&gt; tmp_cc;</p>
  <p class="Code">  Any a;</p>
  <p class="Code"> </p>
  <p class="Code">  if (!PyArg_ParseTuple (args, "s", &amp;ini_file_location))</p>
  <p class="Code">    return NULL;</p>
  <p class="Code">  tmp_cc = Util::<span class="CodeEmphasis">bootstrap</span> (ini_file_location);</p>
  <p class="Code">  ...</p>
  <p class="Paragraph"><span class="Codeintext">Util::bootstrap()</span> uses <span class="Codeintext">defaultBootstrap_InitialComponentContext(iniFile)</span> from <span class="wwwftpemail">cppuhelper/bootstrap.hxx</span> to create a local component context and its parameter <span class="Codeintext">iniFile</span> points to the <span class="wwwftpemail">setup.ini</span> file that configures the local service manager to use <span class="wwwftpemail">service.rdb</span> and <span class="wwwftpemail">types.rdb</span> (until 1.1.0 <span class="wwwftpemail">applicat.rdb</span>). This local component context instantiates services, such as the <span class="Codeintext">UnoUrlResolver</span>.</p>
  <p class="Code">  Reference&lt;XComponentContext&gt; bootstrap (char* ini_file_location)</p>
  <p class="Code">  {</p>
  <p class="Code">    Reference&lt;XComponentContext&gt; my_component_context;</p>
  <p class="Code">    try</p>
  <p class="Code">      {</p>
  <p class="Code">         my_component_context = <span class="CodeEmphasis">defaultBootstrap_InitialComponentContext</span> (</p>
  <p class="Code">                  OUString::createFromAscii (<span class="CodeEmphasis">ini_file_location</span> ));</p>
  <p class="Code">      }</p>
  <p class="Code">    catch (com::sun::star::uno::Exception e)</p>
  <p class="Code">      {</p>
  <p class="Code">         printf (OUStringToOString (e.Message, osl_getThreadTextEncoding ()).getStr ());</p>
  <p class="Code">      }</p>
  <p class="Code">    return my_component_context;</p>
  <p class="Code">  }</p>
  <p class="Paragraph">Now <span class="Codeintext">newBootstrapPyUNO()</span> continues to set up a UNO proxy. It creates local instances of <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/Invocation.html" title="see type com.sun.star.script.Invocation">com.sun.star.script.Invocation</a></span> and <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/Converter.html" title="see type com.sun.star.script.Converter">com.sun.star.script.Converter</a></span>, and calls <span class="Codeintext">PyUNO_new()</span>, passing the local <span class="Codeintext">ComponentContext</span>, a reference to the <span class="Codeintext">XSingleServiceFactory</span> interface of <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/Invocation.html" title="see type com.sun.star.script.Invocation">com.sun.star.script.Invocation</a></span> and a reference to the <span class="Codeintext">XTypeConverter</span> interface of <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/script/Converter.html" title="see type com.sun.star.script.Converter">com.sun.star.script.Converter</a></span>.</p>
  <p class="Code">static PyObject* newBootstrapPyUNO (PyObject* self, PyObject* args) </p>
  <p class="Code">{ </p>
  <p class="Code">  char* ini_file_location;</p>
  <p class="Code">  Reference&lt;XComponentContext&gt; tmp_cc;</p>
  <p class="Code">  Any a;</p>
  <p class="Code"> </p>
  <p class="Code">  if (!PyArg_ParseTuple (args, "s", &amp;ini_file_location))</p>
  <p class="Code">    return NULL;</p>
  <p class="Code">  tmp_cc = <span class="CodeEmphasis">Util::bootstrap (ini_file_location)</span> ;</p>
  <p class="Code">  Reference&lt;XMultiServiceFactory&gt; tmp_msf (tmp_cc-&gt;getServiceManager (), UNO_QUERY);</p>
  <p class="Code">  if (!tmp_msf.is ())</p>
  <p class="Code">    {</p>
  <p class="Code">      PyErr_SetString (PyExc_RuntimeError, "Couldn't bootstrap from inifile");</p>
  <p class="Code">      return NULL;</p>
  <p class="Code">    }</p>
  <p class="Code">  Reference&lt;XSingleServiceFactory&gt; tmp_ssf (tmp_msf-&gt;<span class="CodeEmphasis">createInstance</span> (</p>
  <p class="Code">         OUString (RTL_CONSTASCII_USTRINGPARAM ("<span class="CodeEmphasis">com.sun.star.script.Invocation</span> "))), UNO_QUERY);</p>
  <p class="Code">  Reference&lt;XTypeConverter&gt; tmp_tc (tmp_msf-&gt;<span class="CodeEmphasis">createInstance</span> (</p>
  <p class="Code">         OUString (RTL_CONSTASCII_USTRINGPARAM ("<span class="CodeEmphasis">com.sun.star.script.Converter</span> "))), UNO_QUERY);</p>
  <p class="Code">  if (!tmp_tc.is ())</p>
  <p class="Code">    {</p>
  <p class="Code">      PyErr_SetString (PyExc_RuntimeError, "Couldn't create XTypeConverter");</p>
  <p class="Code">      return NULL;</p>
  <p class="Code">    }</p>
  <p class="Code">  if (!tmp_ssf.is ())</p>
  <p class="Code">    {</p>
  <p class="Code">      PyErr_SetString (PyExc_RuntimeError, "Couldn't create XInvocation");</p>
  <p class="Code">      return NULL;</p>
  <p class="Code">    }</p>
  <p class="Code">  a &lt;&lt;= tmp_cc;</p>
  <p class="Code"> </p>
  <p class="Code">  return <span class="CodeEmphasis">PyUNO_new (a, tmp_ssf, tmp_tc)</span> ;</p>
  <p class="Code">  </p>
  <p class="Code">} </p>
  <p class="P14"><span class="Codeintext">PyUNO_new()</span> in <span class="wwwftpemail">PyUNO.cc</span> is the function responsible for building all Python proxies. The call to <span class="Codeintext">PyUNO_new()</span> here in <span class="Codeintext">newBootstrapPyUno()</span> builds the first local PyUNO proxy for the ComponentContext object <span class="Codeintext">a</span> which has been returned by <span class="Codeintext">Util::bootstrap()</span>. </p>
  <p class="P14">For this purpose, <span class="Codeintext">PyUNO_new()</span> uses the <span class="Codeintext">Invocation</span> service to retrieve an <span class="Codeintext">XInvocation2</span> interface to the <span class="Codeintext">ComponentContext</span> service passed in the parameter <span class="Codeintext">a</span>:</p>
  <p class="Code">// PyUNO_new </p>
  <p class="Code">// </p>
  <p class="Code">// creates Python object proxies for the given target UNO interfaces </p>
  <p class="Code">//    targetInterface         given UNO interface</p>
  <p class="Code">//    ssf                  XSingleServiceFactory interface of com.sun.star.script.Invocation service</p>
  <p class="Code">//    tc                           XTypeConverter interface of com.sun.star.script.Converter service</p>
  <p class="Code"> </p>
  <p class="Code">PyObject* <span class="CodeEmphasis">PyUNO_new</span> (Any targetInterface, </p>
  <p class="Code">                  Reference&lt;XSingleServiceFactory&gt; ssf, </p>
  <p class="Code">                  Reference&lt;XTypeConverter&gt; tc)</p>
  <p class="Code">  ...</p>
  <p class="Code">  Sequence&lt;Any&gt; arguments (1);</p>
  <p class="Code">  Reference&lt;XInterface&gt; tmp_interface;</p>
  <p class="Code">  ...</p>
  <p class="Code">  // put the target object into a sequence of Any for the call to </p>
  <p class="Code">  // ssf-&gt;createInstanceWithArguments()</p>
  <p class="Code">  // ssf is the XSingleServiceFactory interface of the com.sun.star.script.Invocation service</p>
  <p class="Code">  arguments[0] &lt;&lt;= targetInterface;</p>
  <p class="Code"> </p>
  <p class="Code">  // obtain com.sun.star.script.XInvocation2 for target object from Invocation</p>
  <p class="Code">  // let Invocation create an XInvocation object for the Any in arguments</p>
  <p class="Code">  tmp_interface = <span class="CodeEmphasis">ssf-&gt;createInstanceWithArguments</span> (arguments);</p>
  <p class="Code">  // query XInvocation2 interface</p>
  <p class="Code">  Reference&lt;<span class="CodeEmphasis">XInvocation2</span> &gt; tmp_invocation (tmp_interface, UNO_QUERY);</p>
  <p class="Code">  ...</p>
  <p class="P14">The Python proxy invokes methods, and creates and converts UNO types. This Python specific and involves the implementation of several functions according to the Python API. </p>
  <p class="P14">Finally <span class="Codeintext">__init__()</span> in <span class="wwwftpemail">UNO.py</span> in the above example uses the PyUNO object to obtain a local <span class="Codeintext">UnoUrlResolver</span> that retrieves the initial object from the office.</p>
  <h3 class="Head3"><a name="1_2_5_Implementation_Loader" />6.2.5  Implementation Loader</h3>
  <p class="Paragraph">When you are raising a service by name using the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/ServiceManager.html" title="see type com.sun.star.lang.ServiceManager">com.sun.star.lang.ServiceManager</a></span> service, the service manager decides an implementation name, code location and an appropriate loader to raise the code. It is commonly reading out of a persistent registry storage, for example, <span class="wwwftpemail">services.rdb</span> (until 1.1.0 <span class="wwwftpemail">applicat.rdb</span>), for this purpose. Previously, the <span class="wwwftpemail">regcomp</span> tool has registered components into that registry during the OpenOffice.org setup. The tool uses a service called <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/registry/ImplementationRegistration.html" title="see type com.sun.star.registry.ImplementationRegistration">com.sun.star.registry.ImplementationRegistration</a></span> for this task.</p>
  <p class="Paragraph">A loader knows how to load a component from a shared library, a .jar or script file and is able to obtain the service object factory for an implementation and retrieve information being written to the registry. A specific loader defines how a component implementer has to package code so that it is recognized by UNO. For instance in C++, a component is a shared library and in Java it is a .jar file. In a yet to be developed loader, the implementer of the loader has to decide, what a component is in that particular language – it  might as well be a single script file.</p>
  <p class="Paragraph">The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/loader/XImplementationLoader.html" title="see type com.sun.star.loader.XImplementationLoader">com.sun.star.loader.XImplementationLoader</a></span> interface looks like the following:</p>
  <p class="Code">interface XImplementationLoader: com::sun::star::uno::XInterface </p>
  <p class="Code">{  </p>
  <p class="Code"> </p>
  <p class="Code">         com::sun::star::uno::XInterface <span class="CodeEmphasis">activate</span> ( [in] string implementationName, </p>
  <p class="Code">                           [in] string implementationLoaderUrl, </p>
  <p class="Code">                           [in] string locationUrl, </p>
  <p class="Code">                           [in] com::sun::star::registry::XRegistryKey xKey ) </p>
  <p class="Code">                           raises( com::sun::star::loader::CannotActivateFactoryException ); </p>
  <p class="Code"> </p>
  <p class="Code">         boolean <span class="CodeEmphasis">writeRegistryInfo</span> ( [in] com::sun::star::registry::XRegistryKey xKey, </p>
  <p class="Code">                           [in] string implementationLoaderUrl, </p>
  <p class="Code">                           [in] string locationUrl ) </p>
  <p class="Code">                           raises( com::sun::star::registry::CannotRegisterImplementationException );  </p>
  <p class="Code">};  </p>
  <p class="Paragraph">The <span class="Codeintext">locationUrl</span> argument describes the location of the implementation file,for example, a jar file or a shared library. The <span class="Codeintext">implementationLoaderUrl</span> argument is not used and is obsolete. The registry key <span class="Codeintext">xKey</span> writes information about the implementations within a component into a persistent storage. Refer to <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_6_4_Write_Registration_Info_Using_Helper_Method" title="see chapter 4.6.4 Writing UNO Components - C++ Component - Write Registration Info Using Helper Method">4.6.4 Writing UNO Components - C++ Component - Write Registration Info Using Helper Method</a></span> for additional information.</p>
  <p class="Paragraph">The method <span class="Codeintext">writeRegistryMethod() </span>is called by the <span class="wwwftpemail">regcomp</span> tool to register a component into a registry.</p>
  <p class="Paragraph">The <span class="Codeintext">activate()</span> method returns a factory <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XSingleComponentFactory.html" title="see type com.sun.star.lang.XSingleComponentFactory">com.sun.star.lang.XSingleComponentFactory</a></span> for a concrete implementation name.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table12"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table12A1">
      <div class="Paragraph"><div style="width: 10.472cm; " id="Rahmen6" class="fr5">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/implloader.png" title="link to the full-sized graphic &quot;./implloader.png&quot;"><img border="0" width="473" height="418" alt="Implmentastion loaders" src="./6 Advanced UNO_files/implloader.png" class="fr4" /></a>Illustration <a name="refIllustration4">6.5</a> </div>
       </div> </div>
     </td></tr></table></div>
  <p class="Paragraph">The loader is often implemented in C/C++. When the loader is instantiated, it is responsible for starting up the language runtime, for example, Java VM, Python interpreter, through implementation. After starting up the runtime, the loader starts up the UNO language binding as discussed in the previous chapter, and bridge the <span class="Codeintext">XRegistryKey</span> interface and the initial factory interface.</p>
  <h4 class="Head4"><a name="1_2_5_1_Shared_Library_Loader" />Shared Library Loader</h4>
  <p class="Paragraph">This section discusses the loader for local components written in C++ that are loaded by the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/common/ref/com/sun/star/loader/SharedLibrary.html" title="see type com.sun.star.loader.SharedLibrary">com.sun.star.loader.SharedLibrary</a></span> service. Every type safe programming language that stores its code in shared libraries should implement the bridge with environments and mappings as discussed in chapters <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml#1_2_1_1_3_UNO_Bridge" title="see chapter 6.2.1 Advanced UNO - Language Bindings - Implementing UNO Language Bindings - Overview of Language Bindings and Bridges - UNO Bridge">6.2.1 Advanced UNO - Language Bindings - Implementing UNO Language Bindings - Overview of Language Bindings and Bridges - UNO Bridge</a></span> and <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml#1_2_2_UNO_C_2B_2B_Bridges" title="see chapter 6.2.2 Advanced UNO - Language Bindings - UNO C++ Bridges">6.2.2 Advanced UNO - Language Bindings - UNO C++ Bridges</a></span>. These programming languages can reuse the existing loader without creating a new one.</p>
  <p class="Paragraph">When the shared library is mapped into the running process, for example, using <span class="Codeintext">osl</span> <span class="Codeintext">_loadModule()</span>, the shared library loader retrieves defined C symbols out of the library to determine the compiler that built the code . This function symbol is called <span class="Codeintext">component_getImplementationEnvironment()</span>. When the code is compiled with the Microsoft Visual C++ compiler, it sets a pointer to a string called <span class="Codeintext">"msci"</span>, with gcc 3.0.1 a string <span class="Codeintext">"gcc3"</span> which is a UNO environment type name. A UNO environment is connected with the code that runs in it, for example, the code compiled with gcc3 runs in the UNO environment with type name gcc3.</p>
  <p class="Paragraph">In addition to the environment type name, a UNO environment defines a context pointer. The context pointer and environment type name define a unique UNO environment. Although the context pointer is mostly null, it is required to identify the environments apart for the same type, for example, to identify different Java virtual machine environments when running a UNO object in two different Java virtual machines within the same process. Both environments have the same type name <span class="Codeintext">"java"</span>, but different context pointers. In local (C++) code, the context pointer is irrelevant , that is, set to null.The type name determines the UNO runtime environment.</p>
  <p class="Paragraph">When the loader knows the environment the code comes from, it decides if bridging is required. Bridging is needed if the loader code is compiled with a different compiler, thus running in a different environment. In this case, the loader raises a bridge to speak UNO with the component code.  </p>
  <p class="Paragraph">The loader calls on two more functions related to the above <span class="Codeintext">XimplementationLoader</span> interface. All of these symbols are C functions and have the following signatures:</p>
  <p class="Code">extern "C" void SAL_CALL component_getImplementationEnvironment( </p>
  <p class="Code">         const sal_Char ** ppEnvTypeName, uno_Environment ** ppEnv );</p>
  <p class="Code">extern "C" sal_Bool SAL_CALL component_writeInfo( </p>
  <p class="Code">         void * pServiceManager, void * pRegistryKey );</p>
  <p class="Code">extern "C" void SAL_CALL component_getFactory( </p>
  <p class="Code">         const sal_Char * pImplName, void * pServiceManager, void * pRegistryKey );</p>
  <p class="Paragraph">The latter two functions expect incoming C++-UNO interfaces, therefore the loader needs to bridge interfaces before calling the functions as stated above. </p>
  <h4 class="Head4"><a name="1_2_5_2_Bridges" />Bridges</h4>
  <p class="Paragraph">The loader uses the cppu core runtime to map an interface, specifying the UNO runtime environment that needs the interface mapping. The cppu core runtime raises and connects the appropriate bridges, and provides a unidirectional mapping that uses underlying bidirectional bridges. Under Unix, the name of the bridge library follows the naming convention <span class="wwwftpemail">lib&lt;SourceEnvironment&gt;_&lt;TargetEnvironment&gt;., </span>Under Windows, <span class="wwwftpemail">&lt;SourceEnvironment&gt;_&lt;TargetEnvironment&gt;.dll</span> is used. For instance, <span class="wwwftpemail">libgcc3_uno.so</span> is the bridge library for mappings from gcc3 to binary UNO,and <span class="wwwftpemail">msci_uno.dll</span> maps from MS Visual C++ to binary UNO. The bridges mentioned above all bridge to binary UNO. Binary UNO is only used as an intermediate environment. In general, do not program binary UNO in clients. The purpose is to reduce the number of necessary bridge implementations. New bridges have to map only to binary UNO instead of all conceivable bridge combinations.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table5"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table5A1">
      <p class="Standard"> </p>
     </td></tr></table></div>
  <h3 class="Head3"><a name="1_2_6_Help_with_New_Language_Bindings" />6.2.6  Help with New Language Bindings</h3>
  <p class="Paragraph"><span class="T5">Every UNO language binding is different, therefore only most important points were stressed, that is, those that are likely to appear in almost every language binding implementation. Object issues, such as lifetime, object identity, </span><span class="T8">any</span> <span class="T5">handling, and bootstrapping were not discussed, because they are too language dependent. For more information on these issues, subscribe to the </span><span class="T9">dev@udk.openoffice.org</span><span class="T5"> mailing list to discuss these issues for your programming language.</span> </p>
  <h2 class="P16"><a name="1_3_Differences_Between_UNO_and_Corba" />6.3  Differences Between UNO and Corba</h2>
  <p class="Paragraph">This subsection discusses the differences between UNO and CORBA by providing the fundamental differences and if the different concepts could be mapped into the world of the other model. Consider the following feature comparison. The <span class="T5">column titled "</span>Mapping possible"<span class="T5"> states if a feature could be mapped by a (yet to be developed) generic bridge.</span> </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table2"><colgroup><col width="461" /><col width="80" /><col width="77" /><col width="88" /></colgroup><tr><td style="text-align:left;width:10.097cm; " class="Table2A1">
      <p class="TableHead"> </p>
     </td><td style="text-align:left;width:1.743cm; " class="Table2A1">
      <p class="TableHead">UNO </p>
     </td><td style="text-align:left;width:1.677cm; " class="Table2A1">
      <p class="TableHead">CORBA </p>
     </td><td style="text-align:left;width:1.923cm; " class="Table2D1">
      <p class="TableHead">Mapping possible </p>
     </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">multiple inheritance of interfaces </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">yes </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">inheritance of structs </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">yes </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">inheritance of exceptions </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">yes </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">mandatory base interface for all interfaces </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">yes </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">mandatory base exception for all exceptions </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">yes </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">context of methods </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">no </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">char </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">yes </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">8 bit string </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">yes </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">array </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">yes </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">union </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">yes </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">assigned values for enum </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">yes </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">meta type 'type' </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">yes </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">object identity </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">no </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">lifetime mechanism </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">no </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">succession of oneway calls </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">no </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">in process communication </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">no </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">thread identity </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">no </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">customized calls </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">yes </p>
    </td></tr><tr><td style="text-align:left;width:10.097cm; " class="Table2A2">
     <p class="TextInTable">less code generation </p>
    </td><td style="text-align:left;width:1.743cm; " class="Table2A2">
     <p class="TextInTable">yes </p>
    </td><td style="text-align:left;width:1.677cm; " class="Table2A2">
     <p class="TextInTable">no </p>
    </td><td style="text-align:left;width:1.923cm; " class="Table2D2">
     <p class="TextInTable">no </p>
    </td></tr></table></div>
  <ul style="margin-left:0.5cm;">
   <li class="P17" style="margin-left:2.5cm;"><p class="P17" style="margin-left:0cm;">Multiple Inheritance<br />CORBA supports multiple inheritance of interfaces, whereas UNO only supports single inheritance.<br />Mapping: Generates an additional interface with all methods and attributes of the inherited interfaces that must be implemented in addition to the other interfaces.</p></li>
   <li class="P17" style="margin-left:2.5cm;"><p class="P17" style="margin-left:0cm;">Inheritance of Structs<br />In contrast to CORBA, UNO supports inheritance of struct types. This is useful to define general types and more detailed subtypes.<br />Mapping: Generate a struct with all members, plus all members of the inherited structs.</p></li>
   <li class="P17" style="margin-left:2.5cm;"><p class="P17" style="margin-left:0cm;">Inheritance of Exceptions<br />CORBA does not support inheritance for exceptions, whereas UNO does. Inheritance of exceptions allows the specification of a complex exception concept. It is possible to make fine granular concepts using the detailed exceptions in the layer where they are useful and the base exception in higher levels. The UNO error handling is based on exceptions and with inheritance of exceptions it is possible to specify 'error classes' with a base exception and more detailed errors of the same 'error class' that inherit from this base exception. On higher level APIs it is enough to declare the base exception to specify the 'error class' and it is possible to support all errors of this 'error class'. <br />Mapping: Generates an exception with all members, plus all members of the inherited exceptions. This is the same solution as for structs.</p></li>
   <li class="P17" style="margin-left:2.5cm;"><p class="P17" style="margin-left:0cm;">Mandatory Base Interfaces<br />UNO specifies a mandatory base interface for all interfaces. This interface provides <span class="Codeintext">acquire()</span> and <span class="Codeintext">release()</span> functions for reference counting. The minimum life time of an object is managed by means of reference counting.</p></li>
   <li class="P17" style="margin-left:2.5cm;"><p class="P17" style="margin-left:0cm;">Mandatory Base Exception<br />UNO specifies a mandatory base exception for all exceptions. This base exception contains a string member <span class="Codeintext">Message</span>that describes the reason for the exception in readable format. The base exception makes it also possible to catch all UNO exceptions separately.</p></li>
   <li class="P17" style="margin-left:2.5cm;"><p class="P17" style="margin-left:0cm;">Method Context<br />CORBA supports a request context. This context consists of a name-value pair which is specified for methods in UNOIDL. The context is used for describing the current state of the caller object. A request context provides additional, operation-specific information that may affect the performance of a request.</p></li>
   <li class="P17" style="margin-left:2.5cm;"><p class="P17" style="margin-left:0cm;">Type <span class="Codeintext">char</span> <br />UNO does not support 8-bit characters. In UNO, <span class="Codeintext">char</span> represents a 16-bit unicode character.<br />Mapping: To support 8-bit characters it is possible to expand the <span class="Codeintext">TypeClass</span> enum to support 8-bit characters and strings. The internal representation does not change anything, the <span class="Codeintext">TypeClass</span> is only relevant for mapping.</p></li>
   <li class="P17" style="margin-left:2.5cm;"><p class="P17" style="margin-left:0cm;">8 bit string<br />UNO does not support 8-bit strings. In UNO, <span class="Codeintext">string</span> represents a 16-bit unicode string.<br />Mapping: The same possibility as for <span class="Codeintext">char.</span></p></li>
   <li class="P17" style="margin-left:2.5cm;"><p class="P17" style="margin-left:0cm;">Type <span class="Codeintext">array</span> <br />UNO does not support arrays at the moment, but is planned for the future.</p></li>
   <li class="P17" style="margin-left:2.5cm;"><p class="P17" style="margin-left:0cm;">Type <span class="Codeintext">union</span> <br />UNO does not support unions at the moment, but is planned for the future.</p></li>
   <li class="P18" style="margin-left:2.5cm;"><p class="P18" style="margin-left:0cm;">Assigned Values for <span class="Codeintext">enums</span> <br />UNO supports the assignment of values for enum values in IDL. This means that it is possible to use these values directly to specify or operate with the required enum value in target languages supporting this feature, for example, . C, C++.<br />Mapping: Possible by using the names of the values.</p></li>
  </ul>
  <h2 class="Head2"><a name="1_4_UNO_Design_Patterns_and_Coding_Styles" />6.4  UNO Design Patterns and Coding Styles</h2>
  <p class="Paragraph">This chapter discusses design patterns and coding recommendations for OpenOffice.org. Possible candidates are: </p>
  <ul style="margin-left:0.5cm;">
   <li class="P19" style="margin-left:2.5cm;"><p class="P19" style="margin-left:0cm;">Singleton: global service manager, Desktop, UCB </p></li>
   <li class="P19" style="margin-left:2.5cm;"><p class="P19" style="margin-left:0cm;">Factory: decouple specification and implementation, cross-environment instantiation, context-specific instances </p></li>
   <li class="P19" style="margin-left:2.5cm;"><p class="P19" style="margin-left:0cm;">Listener: eliminate polling </p></li>
   <li class="P19" style="margin-left:2.5cm;"><p class="P19" style="margin-left:0cm;">Element access: it is arguable if that is a design pattern or just an API </p></li>
   <li class="P19" style="margin-left:2.5cm;"><p class="P19" style="margin-left:0cm;">Properties: solves remote batch access, but incurs the problem of compile-time type indifference </p></li>
   <li class="P19" style="margin-left:2.5cm;"><p class="P19" style="margin-left:0cm;">UCB commands: universal dispatching of content specific operations </p></li>
   <li class="P19" style="margin-left:2.5cm;"><p class="P19" style="margin-left:0cm;">Dispatch commands: universal dispatching of object specific operations, chain of responsibility </p></li>
  </ul>
  <h3 class="Head3"><a name="1_4_1_Double-Checked_Locking" />6.4.1  Double-Checked Locking</h3>
  <p class="Paragraph">The double-checked locking idiom is sometimes used in C/C++ code to speed up creation of a single-instance resource. In a multi-threaded environment, typical C++ code that creates a single-instance resource might look like the following example:</p>
  <p class="Code">#include "osl/mutex.hxx" </p>
  <p class="Code"> </p>
  <p class="Code">T * getInstance1() </p>
  <p class="Code">{ </p>
  <p class="Code">    static T * pInstance = 0;</p>
  <p class="Code">    ::osl::MutexGuard aGuard(::osl::Mutex::getGlobalMutex());</p>
  <p class="Code">    if (pInstance == 0)</p>
  <p class="Code">    {</p>
  <p class="Code">        static T aInstance;</p>
  <p class="Code">        pInstance = &amp;aInstance;</p>
  <p class="Code">    }</p>
  <p class="Code">    return pInstance;</p>
  <p class="Code">} </p>
  <p class="Paragraph">A mutex guards against multiple threads simultaneously updating <span class="Codeintext">pInstance</span>, and the nested static <span class="Codeintext">aInstance</span> is guaranteed to be created only when first needed, and destroyed when the program terminates.</p>
  <p class="Paragraph">The disadvantage of the above function is that it must acquire and release the mutex every time it is called. The double-checked locking idiom was developed to reduce the need for locking, leading to the following modified function. Do not use.: </p>
  <p class="Code">#include "osl/mutex.hxx" </p>
  <p class="Code"> </p>
  <p class="Code">T * getInstance2() </p>
  <p class="Code">{ </p>
  <p class="Code">    static T * pInstance = 0;</p>
  <p class="Code">    if (pInstance == 0)</p>
  <p class="Code">    {</p>
  <p class="Code">        ::osl::MutexGuard aGuard(::osl::Mutex::getGlobalMutex());</p>
  <p class="Code">        if (pInstance == 0)</p>
  <p class="Code">        {</p>
  <p class="Code">            static T aInstance;</p>
  <p class="Code">            pInstance = &amp;aInstance;</p>
  <p class="Code">        }</p>
  <p class="Code">    }</p>
  <p class="Code">    return pInstance;</p>
  <p class="Code">} </p>
  <p class="Paragraph">This version needs to acquire and release the mutex only when <span class="Codeintext">pInstance</span> has not yet been initialized, resulting in a possible performance improvement. The mutex is still needed to avoid race conditions when multiple threads simultaneously see that <span class="Codeintext">pInstance</span> is not yet initialized, and all want to update it at the same time. The problem with <span class="Codeintext">getInstance2</span> is that it does not work.</p>
  <p class="Paragraph">Assume that thread 1 calls <span class="Codeintext">getInstance2</span> first, finding <span class="Codeintext">pInstance</span> uninitialized. It acquires the mutex, creates <span class="Codeintext">aInstance</span> that results in writing data into <span class="Codeintext">aInstance</span>'s memory, updates <span class="Codeintext">pInstance</span> that results in writing data into <span class="Codeintext">pIntance</span>'s memory, and releases the mutex. Some hardware memory models a write the operations that transfer <span class="Codeintext">aInstance</span>'s and <span class="Codeintext">pInstance</span>'s data to main memory to be re-ordered by the processor executing thread 1. Now, if thread 2 enters <span class="Codeintext">getInstance2</span> when <span class="Codeintext">pInstance</span>'s data has already been written to main memory by thread 1, but <span class="Codeintext">aInstance</span>'s data has not been written yet (remember that write operations may be done out of order), then thread 2 sees that <span class="Codeintext">pInstance</span> has already been initialized and exits from <span class="Codeintext">getInstance2</span> directly. Thread 2 dereferences <span class="Codeintext">pInstance</span> thereafter, accessing <span class="Codeintext">aInstance</span>'s memory that has not yet been written into. Anything may happen in this situation.</p>
  <p class="Paragraph">In Java, double-checked locking can never be used, because it is broken and cannot be fixed. </p>
  <p class="Paragraph">In C and C++, the problem can be solved, but only by using platform-specific instructions, typically some sort of memory-barrier instructions. There is a macro <span class="Codeintext">OSL_DOUBLE_CHECKED_LOCKING_MEMORY_BARRIER</span> in <span class="wwwftpemail">osl/doublecheckedlocking.h</span> that uses the double-checked locking idiom in a way that actually works in C and C++.</p>
  <p class="Code">#include "osl/doublecheckedlocking.h" </p>
  <p class="Code">#include "osl/mutex.hxx" </p>
  <p class="Code"> </p>
  <p class="Code">T * getInstance3() </p>
  <p class="Code">{ </p>
  <p class="Code">    static T * p = 0;</p>
  <p class="Code">    T * pInstance = p;</p>
  <p class="Code">    if (p == 0)</p>
  <p class="Code">    {</p>
  <p class="Code">        ::osl::MutexGuard aGuard(osl::Mutex::getGlobalMutex());</p>
  <p class="Code">        p = pInstance;</p>
  <p class="Code">        if (p == 0)</p>
  <p class="Code">        {</p>
  <p class="Code">            static T aInstance;</p>
  <p class="Code">            p = &amp;aInstance;</p>
  <p class="Code">            OSL_DOUBLE_CHECKED_LOCKING_MEMORY_BARRIER();</p>
  <p class="Code">            pInstance = p;</p>
  <p class="Code">        }</p>
  <p class="Code">    }</p>
  <p class="Code">    else</p>
  <p class="Code">        OSL_DOUBLE_CHECKED_LOCKING_MEMORY_BARRIER();</p>
  <p class="Code">    return p;</p>
  <p class="Code">} </p>
  <p class="Paragraph">The first (inner) use of <span class="Codeintext">OSL_DOUBLE_CHECKED_LOCKING_MEMORY_BARRIER</span> ensures that <span class="Codeintext">aInstance</span>'s data has been written to main memory before <span class="Codeintext">pInstance</span>'s data is written, therefore a thread can not see <span class="Codeintext">pInstance</span> to be initialized when <span class="Codeintext">aInstance</span>'s data has not yet reached main memory. This solves the problem described above. </p>
  <p class="Paragraph">The second (outer) usage of <span class="Codeintext">OSL_DOUBLE_CHECKED_LOCKING_MEMORY_BARRIER</span> is required to solve a problem concerning the reordering on Alpha processors. </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table4"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table4A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./6 Advanced UNO_files/interesting.gif" class="fr2" /></div>
     </td><td style="text-align:left;width:15.529cm; " class="Table4B1">
      <p class="TextInTable">For more information about this problem, see <a href="http://replay.waybackmachine.org/20090421193405/http://api.openoffice.org/docs/DevelopersGuide/OfficeDev/%EF%BB%BFhttp://www.cs.umd.edu/~pugh/java/memoryModel/AlphaReordering.html"><span class="wwwftpemail">Reordering on an Alpha processor</span></a><span class="wwwftpemail"> </span>by Bill Pugh (<span class="wwwftpemail">www.cs.umd.edu/~pugh/java/memoryModel/AlphaReordering.htm</span>l) and <span class="Citation">Pattern-Oriented Software Architecture, Volume 2: Patterns for Concurrent and Networked Objects</span></p></td></tr></table></div></body></html>