<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><title>Writing UNO Components</title><link rel="stylesheet" type="text/css" href="./4 Writing UNO Components_files/Components.css" /><meta name="generator" content="StarOffice/OpenOffice XSLT (http://xml.openoffice.org/sx2ml)" /><meta name="author" content="Dietrich Schulten" /><meta name="created" content="2002-04-22T14:03:36" /><meta name="changedby" content="JÃ¼rgen Schmidt" /><meta name="changed" content="2007-07-04T16:21:40" /><base href="." />
</head><body dir="ltr"><div id="wm-ipp" style="position: relative; padding-top: 0px; padding-right: 5px; padding-bottom: 0px; padding-left: 5px; min-height: 70px; min-width: 800px; z-index: 9000; display: none; ">
<div id="wm-ipp-inside" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(http://static.waybackmachine.org/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="http://waybackmachine.org/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="./4 Writing UNO Components_files/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0" /></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="http://waybackmachine.org/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml" style="width:400px;font-size:11px;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20090427181406" /><input type="submit" value="Go" style="font-size:11px;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;margin-left:5px;" /><span id="wm_tb_options" style="display:block;" /></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:&apos;Helvetica&apos;,&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20090327124015/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="27 Mar 2009"><strong>MAR</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: rgb(0, 0, 0); font-size: 11px !important; font-weight: bold; text-transform: uppercase; width: 34px; height: 15px; padding-top: 1px; text-align: center; color: rgb(255, 255, 0); background-position: initial initial; background-repeat: initial initial; " title="You are here: 18:14:06 Apr 27, 2009">Apr</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20090529064536/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="29 May 2009"><strong>MAY</strong></a>
		                
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20090327124015/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml" title="12:40:15 Mar 27, 2009" style="background-color:transparent;border:none;"><img src="./4 Writing UNO Components_files/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: rgb(0, 0, 0); width: 34px; height: 24px; padding-top: 2px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; text-align: center; font-size: 24px; font-weight: bold; color: rgb(255, 255, 0); background-position: initial initial; background-repeat: initial initial; " title="You are here: 18:14:06 Apr 27, 2009">27</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20090529064536/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml" title="6:45:36 May 29, 2009" style="background-color:transparent;border:none;"><img src="./4 Writing UNO Components_files/wm_tb_nxt_on.png" alt="Next capture" width="14" height="16" border="0" /></a>
		                
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="http://replay.waybackmachine.org/20080406071343/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="6 Apr 2008"><strong>2008</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: rgb(0, 0, 0); font-size: 11px !important; font-weight: bold; padding-top: 1px; width: 34px; height: 13px; text-align: center; color: rgb(255, 255, 0); background-position: initial initial; background-repeat: initial initial; " title="You are here: 18:14:06 Apr 27, 2009">2009</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2010
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="http://waybackmachine.org/20090427181406*/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>78 captures</strong></a>
           <div style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">10 Mar 06 - 29 May 09</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:400px;height:27px;" href="http://replay.waybackmachine.org/19970515000000/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml" id="wm-graph-anchor">
       <div id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:400px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;" onmouseover="showTrackers(&apos;inline&apos;);" onmouseout="showTrackers(&apos;none&apos;);" onmousemove="trackMouseMove(event,this)" alt="sparklines" width="400" height="27" border="0" src="./4 Writing UNO Components_files/graph.jsp" />
			<img id="wbMouseTrackYearImg" style="position: absolute; z-index: 9010; left: 25px; display: none; " width="25" height="27" border="0" src="./4 Writing UNO Components_files/transp-yellow-pixel.png" />
			<img id="wbMouseTrackMonthImg" style="position: absolute; z-index: 9011; left: 34px; display: none; " width="2" height="27" border="0" src="./4 Writing UNO Components_files/transp-red-pixel.png" />
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById(&apos;wm-ipp&apos;).style.display=&apos;none&apos;;" style="display:block;padding-right:18px;background:url(http://static.waybackmachine.org/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.waybackmachine.org/" style="display:block;padding-right:18px;background:url(http://static.waybackmachine.org/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:&apos;Lucida Grande&apos;,&apos;Arial&apos;,sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<!-- BEGIN WAYBACK TOOLBAR INSERT -->

<script type="text/javascript" src="./4 Writing UNO Components_files/disclaim-element.js" />
<script type="text/javascript" src="./4 Writing UNO Components_files/graph-calc.js" />
<script type="text/javascript" src="./4 Writing UNO Components_files/jquery.min.js" />
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1325375999999;
var wbPrefix = "http://replay.waybackmachine.org/";
var wbCurrentUrl = "http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml";

var curYear = -1;
var curMonth = -1;
var yearCount = 16;
var firstYear = 1996;
var imgWid]]><![CDATA[th=400;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "27";
var displayMonth = "Apr";
var displayYear = "2009";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>

<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->
<p style="text-align:center;"><small>[ <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml" title="Link to previous document">Previous document</a> | <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/DevelopersGuide.xhtml" title="Link to the Content Table">Content Table</a> | <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml" title="Link to next document">Next document</a> ]</small></p>
  
  
  
  <h1 style="margin-left:2.54cm;" class="Head1"><a name="1_Writing_UNO_Components" />4Â Â Writing UNO Components</h1>
  <p class="Under_Head1">Â </p>
  <p class="Paragraph">OpenOffice.org can be extended by UNO components. UNO components are shared libraries or jar files with the ability to instantiate objects that can integrate themselves into the UNO environment. A UNO component can access existing features of OpenOffice.org, and it can be used from within OpenOffice.org through the object communication mechanisms provided by UNO. </p>
  <p class="Paragraph">OpenOffice.org provides many entry points for these extensions.Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P3" style="margin-left:2.5cm;"><p class="P3" style="margin-left:0cm;">Arbitrary objects written in Java or C++ can be called from the user interface, display their own GUI, and work with the entire application.Â </p></li>
   <li class="P3" style="margin-left:2.5cm;"><p class="P3" style="margin-left:0cm;">Calc Add-Ins can be used to create new formula sets that are presented in the formula autopilot.Â </p></li>
   <li class="P3" style="margin-left:2.5cm;"><p class="P3" style="margin-left:0cm;">Chart Add-Ins can insert new Chart types into the charting tool.Â </p></li>
   <li class="P3" style="margin-left:2.5cm;"><p class="P3" style="margin-left:0cm;">New database drivers can be installed into the office to extend data access.Â </p></li>
   <li class="P3" style="margin-left:2.5cm;"><p class="P3" style="margin-left:0cm;">Entire application modules are exchangeable, for instance the linguistics module.Â </p></li>
   <li class="P3" style="margin-left:2.5cm;"><p class="P3" style="margin-left:0cm;">It is possible to create new document types and add them to the office. For instance, a personal information manager could add message, calendar, task and journal document components, or a project manager could support a new project document.Â </p></li>
   <li class="P3" style="margin-left:2.5cm;"><p class="P3" style="margin-left:0cm;">Developers can leverage the OpenOffice.org XML file format to read and write new file formats through components.Â </p></li>
  </ul>
  <p class="Paragraph">From OpenOffice.org 1.1.0 there is comprehensive support for component extensions. The entire product cycle of a component is now covered:Â </p>
  <p class="P4">The design and development of components has been made easier by adding wizards for components to the NetBeans IDE. You can find more detailed info under <a href="http://replay.waybackmachine.org/20090427181406/http://wiki.services.openoffice.org/wiki/OpenOffice_NetBeans_Integration">http://wiki.services.openoffice.org/wiki/OpenOffice_NetBeans_Integration</a>. </p>
  <p class="P4">Components can integrate themselves into the user interface, using simple configuration files. You can add new menus, toolbar items, and help items for a component simply by editing XML configuration files.Â </p>
  <p class="P4">Components are deployed with the Extension Manager. See chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#1_Extensions" title="see chapter 5 Extensions">5 Extensions</a></span>.</p>
  <p class="Paragraph">Last but not least, this is not the only way to add features to the office. Learning how to write components and how to use the OpenOffice.org API at the same time teaches you the techniques used in the OpenOffice.org code base, thus enabling you to work with the existing OpenOffice.org source code, extend it or introduce bug fixes.Â </p>
  <p class="Paragraph">Components are the basis for all of these extensions. This chapter teaches you how to write UNO components. It assumes that you have at least read the chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/FirstSteps.xhtml#1_First_Steps" title="see chapter 2 First Steps">2 First Steps</a></span> andâdepending on your target languageâthe section about the Java or C++ language binding in <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_Professional_UNO" title="see chapter 3 Professional UNO">3 Professional UNO</a></span>.</p>
  <h2 class="Head2"><a name="1_1_Required_Files" />4.1Â Â Required Files</h2>
  <p class="TitledListHead">OpenOffice.org Software Development Kit (SDK) </p>
  <p class="TitledListBody">The SDK provides a build environment for your projects, separate from the OpenOffice.org build environment. It contains the necessary tools for UNO development, C and C++ libraries, JARs , UNO type definitions and example code. But most of the necessary libraries and files are shared with an existing OpenOffice.org installation which is a prerequisite for a SDK.Â </p>
  <p class="TitledListBody">The SDK development tools (executables) contained in the SDK are used in the following chapter. Become familiar with the following table that lists the executables from the SDK. These executables are found in the platform specific bin folder of the SDK installation. In Windows, they are in the folder <span class="wwwftpemail">&lt;SDK&gt;\windows\bin</span>, on Linux they are stored in <span class="wwwftpemail">&lt;SDK&gt;/linux/bin</span> and on Solaris in <span class="wwwftpemail">&lt;SDK&gt;/solaris/bin</span>.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table6"><colgroup><col width="124" /><col width="558" /></colgroup><tr><td style="text-align:left;width:2.722cm; " class="Table6A1">
      <p class="TableHead">ExecutableÂ </p>
     </td><td style="text-align:left;width:12.218cm; " class="Table6B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:2.722cm; " class="Table6A2">
     <p class="TextInTable"><span class="wwwftpemail">idlc</span> </p>
    </td><td style="text-align:left;width:12.218cm; " class="Table6B2">
     <p class="TextInTable">The UNOIDL compiler that creates binary type description files with the extension .urd for registry database files.Â </p>
    </td></tr><tr><td style="text-align:left;width:2.722cm; " class="Table6A2">
     <p class="TextInTable"><span class="wwwftpemail">idlcpp</span> </p>
    </td><td style="text-align:left;width:12.218cm; " class="Table6B2">
     <p class="TextInTable">The idlc preprocessor used by idlc.Â </p>
    </td></tr><tr><td style="text-align:left;width:2.722cm; " class="Table6A2">
     <p class="TextInTable"><span class="wwwftpemail">cppumaker</span> </p>
    </td><td style="text-align:left;width:12.218cm; " class="Table6B2">
     <p class="TextInTable">The C++ UNO maker that generates headers with UNO types mapped from binary type descriptions to C++ from binary type descriptions.Â </p>
    </td></tr><tr><td style="text-align:left;width:2.722cm; " class="Table6A2">
     <p class="TextInTable"><span class="wwwftpemail">javamaker</span> </p>
    </td><td style="text-align:left;width:12.218cm; " class="Table6B2">
     <p class="TextInTable">Java maker that generates interface and class definitions for UNO types mapped from binary type descriptions to Java from binary type descriptions.Â </p>
    </td></tr><tr><td style="text-align:left;width:2.722cm; " class="Table6A2">
     <p class="TextInTable"><span class="wwwftpemail">xml2cmp</span> </p>
    </td><td style="text-align:left;width:12.218cm; " class="Table6B2">
     <p class="TextInTable">XML to Component that can extract type names from XML object descriptions for use with cppumaker and javamaker, creates functions.Â </p>
    </td></tr><tr><td style="text-align:left;width:2.722cm; " class="Table6A2">
     <p class="TextInTable"><span class="wwwftpemail">regmerge</span> </p>
    </td><td style="text-align:left;width:12.218cm; " class="Table6B2">
     <p class="TextInTable">The registry merge that merges binary type descriptions into registry files.Â </p>
    </td></tr><tr><td style="text-align:left;width:2.722cm; " class="Table6A2">
     <p class="TextInTable"><span class="wwwftpemail">regcomp</span> </p>
    </td><td style="text-align:left;width:12.218cm; " class="Table6B2">
     <p class="TextInTable">The register component that tells a registry database file that there is a new component and where it can be found.Â </p>
    </td></tr><tr><td style="text-align:left;width:2.722cm; " class="Table6A2">
     <p class="TextInTable"><span class="wwwftpemail">unopkg</span> </p>
    </td><td style="text-align:left;width:12.218cm; " class="Table6B2">
     <p class="TextInTable">The command line tool of the extension manager.Â </p>
    </td></tr><tr><td style="text-align:left;width:2.722cm; " class="Table6A2">
     <p class="TextInTable"><span class="wwwftpemail">regview</span> </p>
    </td><td style="text-align:left;width:12.218cm; " class="Table6B2">
     <p class="TextInTable">The registry view that outputs the content of a registry database file in readable format.Â </p>
    </td></tr><tr><td style="text-align:left;width:2.722cm; " class="Table6A2">
     <p class="TextInTable"><span class="wwwftpemail">autodoc</span> </p>
    </td><td style="text-align:left;width:12.218cm; " class="Table6B2">
     <p class="TextInTable">The automatic documentation tool that evaluates Javadoc style comments in idl files and generates documentation from them.Â </p>
    </td></tr><tr><td style="text-align:left;width:2.722cm; " class="Table6A2">
     <p class="TextInTable"><span class="wwwftpemail">rdbmaker</span> </p>
    </td><td style="text-align:left;width:12.218cm; " class="Table6B2">
     <p class="TextInTable">The registry database maker that creates registry files with selected types and their dependencies.Â </p>
    </td></tr><tr><td style="text-align:left;width:2.722cm; " class="Table6A2">
     <p class="TextInTable"><span class="wwwftpemail">uno</span> </p>
    </td><td style="text-align:left;width:12.218cm; " class="Table6B2">
     <p class="TextInTable">The UNO executable. It is a standalone UNO environment which is able to run UNO components supporting the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XMain.html" title="see type com.sun.star.lang.XMain">com.sun.star.lang.XMain</a></span> interface, one possible use is: <br />$ <span class="SourceText">uno -s ServiceName -r MyRegistry.rdb -- MyMainClass arg1</span> </p>
    </td></tr></table></div>
  <p class="TitledListHead">GNU Make</p>
  <p class="TitledListBody">The makefiles in the SDK assume that the GNU <span class="wwwftpemail">make </span>is used. Documentation for GNU <span class="wwwftpemail">make</span> command line options and syntax are available at www.gnu.org. In Windows, not every GNU make seems stable, notably some versions of Cygwin <span class="wwwftpemail">make</span> were reported to have problems with the SDK makefiles. Other GNU <span class="wwwftpemail">make</span> binaries, such as the one from <span class="wwwftpemail">unixutils.sourceforge.net</span> work well even on the Windows command line. The package UnxUtils comes with a <span class="wwwftpemail">zsh</span> shell and numerous utilities, such as <span class="wwwftpemail">find</span>, <span class="wwwftpemail">sed</span>. To install UnxUtils, download and unpack the archive, and add <span class="wwwftpemail">&lt;UnxUtils&gt;\usr\local\wbin</span> to the PATH environment variable. Now launch <span class="wwwftpemail">sh.exe</span> from <span class="wwwftpemail">&lt;UnxUtils&gt;\bin</span> and issue the command <span class="wwwftpemail">make</span> from within <span class="wwwftpemail">zsh</span> or use the Windows command line to run <span class="wwwftpemail">make</span>. For further information about <span class="wwwftpemail">zsh</span>, go to <span class="wwwftpemail">zsh.sunsite.dk</span>.</p>
  <h2 class="Head2"><a name="1_2_Using_UNOIDL_to_Specify_New_Components" />4.2Â Â Using UNOIDL to Specify New Components</h2>
  <p class="Paragraph">Component development does not necessarily start with the declaration of new interfaces or new types. Try to use the interfaces and types already defined in the OpenOffice.org API. If existing interfaces cover your requirements and you need to know how to implement them in your own component, go to section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_3_Component_Architecture" title="see chapter 4.3 Writing UNO Components - Component Architecture">4.3 Writing UNO Components - Component Architecture</a></span>. The following describes how to declare your own interfaces and other types you might need.</p>
  <p class="Paragraph">UNO uses its own meta language <span class="Emphasis">UNOIDL</span> (UNO Interface Definition Language) to specify types. Using a meta language for this purpose enables you to generate language specific code, such as header files and class definitions, to implement objects in any target language supported by UNO. UNOIDL keeps the foundations of UNO language independent and takes the burden of mechanic language adaptation from the developer's shoulders when implementing UNO objects.</p>
  <p class="Paragraph">To define a new interface, service or other entity, write its specification in UNOIDL, then compile it with the UNOIDL compiler <span class="Emphasis">idlc</span>. After compilation, merge the resulting binary type description into a type library that is used during the make process to create necessary language dependent type representations, such as header or Java class files. The chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_Professional_UNO" title="see chapter 3 Professional UNO">3 Professional UNO</a></span> provides the various type mappings used by <span class="CODEKeyWord">cppumaker</span> and <span class="CODEKeyWord">javamaker</span> in the language binding sections. Refer to the section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_9_2_1_UNO_Type_Library" title="see chapter 4.9.2 Writing UNO Components - Deployment Options for Components - Background: UNO Registries - UNO Type Library">4.9.2 Writing UNO Components - Deployment Options for Components - Background: UNO Registries - UNO Type Library</a></span> for details about type information in the registry-based type library.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle1"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.596cm; " class="Tabelle1A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./4 Writing UNO Components_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.454cm; " class="Tabelle1B1">
      <p class="TipInTable">When writing your own specifications, please consult the chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Appendix/IDLDesignGuide/IDLDesignGuide.xhtml#1_IDL_Design_Guide" title="see chapter A IDL Design Guide">A IDL Design Guide</a></span> which treats design principles and conventions used in API specifications. Follow the rules for universality, orthogonality, inheritance and uniformity of the API as described in the Design Guide.</p>
     </td></tr></table></div>
  <h3 class="Head3"><a name="1_2_1_Writing_the_Specification" />4.2.1Â Â Writing the Specification</h3>
  <p class="P5">There are similarities between C++, CORBA IDL and UNOIDL, especially concerning the syntax and the general usage of the compiler. If you are familiar with reading C++ or CORBA IDL, you will be able to understand much of UNOIDL, as well.Â </p>
  <p class="P5">As a first example, consider the IDL specification for the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/bridge/XUnoUrlResolver.html" title="see type com.sun.star.bridge.XUnoUrlResolver">com.sun.star.bridge.XUnoUrlResolver</a></span> interface. An idl file usually starts with a number of preprocessor directives, followed by module instructions and a type definition:</p>
  <p class="Code">#ifndef __com_sun_star_bridge_XUnoUrlResolver_idl__ Â </p>
  <p class="Code">#define __com_sun_star_bridge_XUnoUrlResolver_idl__ Â </p>
  <p class="Code">Â </p>
  <p class="Code">#include &lt;com/sun/star/uno/XInterface.idl&gt; Â </p>
  <p class="Code">#include &lt;com/sun/star/lang/IllegalArgumentException.idl&gt; Â </p>
  <p class="Code">#include &lt;com/sun/star/connection/ConnectionSetupException.idl&gt; Â </p>
  <p class="Code">#include &lt;com/sun/star/connection/NoConnectException.idl&gt; Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â </p>
  <p class="Code">module com { Â module sun { Â module star { Â module bridge {</p>
  <p class="Code">Â </p>
  <p class="Code">Â </p>
  <p class="Code">/** service &lt;type scope="com::sun::star::bridge"&gt;UnoUrlResolver&lt;/type&gt; Â </p>
  <p class="Code">Â  Â  Â  Â  implements this interface.</p>
  <p class="Code">Â */</p>
  <p class="Code">published interface XUnoUrlResolver: com::sun::star::uno::XInterfaceÂ </p>
  <p class="Code">{ Â </p>
  <p class="Code">Â  Â  // method com::sun::star::bridge::XUnoUrlResolver::resolve</p>
  <p class="Code">Â  Â  /** resolves an object, on the UNO URL.</p>
  <p class="Code">Â  Â  Â */</p>
  <p class="Code">Â  Â  com::sun::star::uno::XInterface <span class="CodeEmphasis">resolve</span>( [in] string sUnoUrl ) </p>
  <p class="Code">Â  Â  Â  Â  raises (com::sun::star::connection::NoConnectException, </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com::sun::star::connection::ConnectionSetupException, </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com::sun::star::lang::IllegalArgumentException); </p>
  <p class="Code">}; Â </p>
  <p class="Code">Â </p>
  <p class="Code">}; }; }; };Â </p>
  <p class="Code">Â </p>
  <p class="Code">#endif Â </p>
  <p class="Paragraph">We will discuss this idl file step by step below, and we will write our own UNOIDL specification as soon as possible. The file specifying <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/bridge/XUnoUrlResolver.html" title="see type com.sun.star.bridge.XUnoUrlResolver">com.sun.star.bridge.XUnoUrlResolver</a></span> is locatedin the <span class="wwwftpemail">idl</span> folder of your SDK installation, <span class="wwwftpemail">&lt;SDK&gt;/idl/com/sun/star/bridge/XUnoUrlResolver.idl</span>. </p>
  <p class="Paragraph">UNOIDL definition file names have the extension <span class="Emphasis">.</span> <span class="wwwftpemail">idl</span> by convention. The descriptions must use the US ASCII character set without special characters and separate symbols by whitespace, i.e. blanks, tabs or linefeeds. </p>
  <h4 class="Head4"><a name="1_2_1_1_Preprocessing" />Preprocessing</h4>
  <p class="Paragraph">Just like a C++ compiler, the UNOIDL compiler <span class="Emphasis">idlc</span> can only use types it already knows. The idlc knows 15 <span class="T2">simple type</span>s such as boolean, int or string (they are summarized below). Whenever a type other than a <span class="T2">simple type</span> is used in the idl file, its declaration has to be included first. For instance, to derive an interface from the interface <span class="Codeintext">XInterface</span>, include the corresponding file <span class="T3">XInterface.idl.</span> Including means telling the preprocessor to read a given file and execute the instructions found in it.</p>
  <p class="P6">#include &lt;com/sun/star/uno/XInterface.idl&gt; // searched in include path given in -I parameterÂ </p>
  <p class="P6">#include "com/sun/star/uno/XInterface.idl" // searched in current path, then in include pathÂ </p>
  <p class="Paragraph">There are two ways to include idl files. A file name in <span class="T2">angled bracket</span>s is searched on the include path passed to <span class="Emphasis">idlc</span> <span class="T4">using its -I option</span>. File names in double quotes are first searched on the current path and then on the include path.</p>
  <p class="Paragraph">The <span class="Codeintext">XUnoUrlResolver</span> definition above includes <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XInterface.html" title="see type com.sun.star.uno.XInterface">com.sun.star.uno.XInterface</a></span> and the three exceptions thrown by the method <span class="Codeintext">resolve()</span>, <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/IllegalArgumentException.html" title="see type com.sun.star.lang.IllegalArgumentException">com.sun.star.lang.IllegalArgumentException</a></span>, <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/connection/ConnectionSetupException.html" title="see type com.sun.star.connection.ConnectionSetupException">com.sun.star.connection.ConnectionSetupException</a></span> and <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/connection/NoConnectException.html" title="see type com.sun.star.connection.NoConnectException">com.sun.star.connection.NoConnectException</a></span>. </p>
  <p class="Paragraph">In OpenOffice.orgÂ 2.0, it is no longer necessary to explicitly state that an interface type derives from <span class="Codeintext">XInterface</span>âif an interface type derives from no other interface type, it is implicitly taken to derive from <span class="Codeintext">XInterface</span>. However, even in such situations it is important to explicitly include the file <span class="Codeintext">XInterface.idl</span>.</p>
  <p class="Paragraph">Furthermore, to avoid warnings about redefinition of already included types, use <span class="CODEKeyWord">#ifndef</span> and <span class="CODEKeyWord">#define</span> as shown above. Note how the entire definition for <span class="Codeintext">XUnoUrlResolver</span> is enclosed between <span class="CODEKeyWord">#ifndef </span>and <span class="CODEKeyWord">#endif</span>. The first thing the preprocessor does is to check if the flag <span class="Codeintext">__com_sun_star_bridge_XUnoUrlResolver_idl__</span> has already been defined. If not, the flag is defined and <span class="wwwftpemail">idlc</span> continues with the definition of <span class="Codeintext">XUnoUrlResolver</span>.</p>
  <p class="Paragraph">Adhere to the naming scheme for include flags used by the OpenOffice.org developers: Use the file name of the IDL file that is to be included, add double underscores at the beginning and end of the macro, and replace all slashes and dots by underscores.Â </p>
  <p class="Paragraph">For other preprocessing instructions supported by <span class="wwwftpemail">idlc</span> refer to Bjarne Stroustrup: <a href="http://replay.waybackmachine.org/20090427181406/http://www.research.att.com/~bs/3rd.html" class="Internetlink">The C++ Programming Language</a>. </p>
  <h4 class="Head4"><a name="1_2_1_2_Grouping_Definitions_in_Modules" />Grouping Definitions in Modules</h4>
  <p class="Paragraph">To avoid name clashes and allow for a better API structure, UNOIDL supports naming scopes. The corresponding instruction is <span class="CODEKeyWord">module</span>:</p>
  <p class="Code">module mymodule {Â </p>
  <p class="Code">};Â </p>
  <p class="Paragraph">Instructions are only known inside the module <span class="CODEKeyWord">mymodule</span> for every type defined within the pair of <span class="T2">brace</span>s of this <span class="T5">module</span> <span class="T6">{}</span> <span class="Codeintext">.</span> Within each module, the type identifiers are unique. This makes an UNOIDL module similar to a Java package or a C++ namespace.</p>
  <p class="Paragraph">Modules may be nested. The following code shows the interface <span class="Codeintext">XUnoUrlResolver</span> contained in the module <span class="Codeintext">bridge</span> that is contained in the module <span class="Codeintext">star</span>, which is in turn contained in the module <span class="Codeintext">sun</span> of the module <span class="Codeintext">com</span>.</p>
  <p class="Code">module com { Â module sun { Â module star { Â module bridge {</p>
  <p class="Code">Â  Â  // interface XUnoUrlResolver in module com::sun::star::bridge</p>
  <p class="Code">}; }; }; };Â </p>
  <p class="Paragraph">It is customary to write module names in lower case letters. Use your own module hierarchy for your IDL types. To contribute code to OpenOffice.org, use the <span class="Codeintext">org::openoffice</span> namespace or <span class="Codeintext">com::sun::star</span>. Discuss the name choice with the leader of the API project on <span class="wwwftpemail">www.openoffice.org</span> to add to the latter modules. The <span class="Codeintext">com::sun::star</span> namespace mirrors the historical roots of OpenOffice.org in StarOffice and will probably be kept for compatibility purposes.</p>
  <p class="Paragraph">Types defined in UNOIDL modules have to be referenced using full-type or scoped names, that is, you must enter all modules your type is contained in and separate the modules by the scope operator <span class="Codeintext">::</span>. For instance, to reference <span class="Codeintext">XUnoUrlResolver</span> in another idl definition file, write <span class="Codeintext">com::sun::star::bridge::XUnoUrlResolver</span>.</p>
  <p class="Paragraph">Besides, modules have an advantage Â when it comes to generating language specific files. The tools <span class="Emphasis">cppumaker</span> and <span class="Emphasis">javamaker </span><span class="T4">automatically </span>create subdirectories for every referenced <span class="Codeintext">module</span>, if required. Headers and class definitions are kept in their own folders without any further effort.</p>
  <p class="Paragraph">One potential source of confusion is that UNOIDL and C++ use â<span class="Codeintext">::</span>â to separate the individual identifiers within a name, whereas UNO itself (e.g., in methods like <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XMultiComponentFactory.html#createInstanceWithContext" title="see createInstanceWithContext of type com.sun.star.lang.XMultiComponentFactory:createInstanceWithContext">com.sun.star.lang.XMultiComponentFactory:createInstanceWithContext</a></span>) and Java useÂ â<span class="Codeintext">.</span>â.</p>
  <h4 class="Head4"><a name="1_2_1_3_Simple_Types" />Simple Types</h4>
  <p class="Paragraph">Before we can go about defining our first interface, you need to know the <span class="T2">simple type</span>s you may use in your interface definition. You should already be familiar with the <span class="T2">simple</span> UNO types from the chapters <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/FirstSteps/FirstSteps.xhtml#1_First_Steps" title="see chapter 2 First Steps">2 First Steps</a></span> and <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_Professional_UNO" title="see chapter 3 Professional UNO">3 Professional UNO</a></span>. Since we have to use them in idl definition files, we repeat the type keywords and their meaning here.</p>
  <p class="P7">Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table10"><colgroup><col width="235" /><col width="470" /></colgroup><tr><td style="text-align:left;width:5.138cm; " class="Table10A1">
      <p class="TableHead"><span class="T7">simple</span> UNO type</p>
     </td><td style="text-align:left;width:10.301cm; " class="Table10B1">
      <p class="TableHead">Type descriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:5.138cm; " class="Table10A2">
     <p class="TextInTable"><span class="Codeintext">char</span> </p>
    </td><td style="text-align:left;width:10.301cm; " class="Table10A2">
     <p class="TextInTable">16-bit unicode character type Â </p>
    </td></tr><tr><td style="text-align:left;width:5.138cm; " class="Table10A2">
     <p class="TextInTable"><span class="Codeintext">boolean</span> </p>
    </td><td style="text-align:left;width:10.301cm; " class="Table10A2">
     <p class="TextInTable">boolean type; true and false Â </p>
    </td></tr><tr><td style="text-align:left;width:5.138cm; " class="Table10A2">
     <p class="TextInTable"><span class="Codeintext">byte</span> </p>
    </td><td style="text-align:left;width:10.301cm; " class="Table10A2">
     <p class="TextInTable">8-bit ordinal integer type Â </p>
    </td></tr><tr><td style="text-align:left;width:5.138cm; " class="Table10A2">
     <p class="TextInTable"><span class="Codeintext">short</span> </p>
    </td><td style="text-align:left;width:10.301cm; " class="Table10A2">
     <p class="TextInTable">signed 16-bit ordinal integer type Â </p>
    </td></tr><tr><td style="text-align:left;width:5.138cm; " class="Table10A2">
     <p class="TextInTable"><span class="Codeintext">unsigned short</span> </p>
    </td><td style="text-align:left;width:10.301cm; " class="Table10A2">
     <p class="TextInTable">unsigned 16-bit ordinal integer type (deprecated)Â </p>
    </td></tr><tr><td style="text-align:left;width:5.138cm; " class="Table10A2">
     <p class="TextInTable"><span class="Codeintext">long</span> </p>
    </td><td style="text-align:left;width:10.301cm; " class="Table10A2">
     <p class="TextInTable">signed 32-bit ordinal integer type Â </p>
    </td></tr><tr><td style="text-align:left;width:5.138cm; " class="Table10A2">
     <p class="TextInTable"><span class="Codeintext">unsigned long</span> </p>
    </td><td style="text-align:left;width:10.301cm; " class="Table10A2">
     <p class="TextInTable">unsigned 32-bit integer type (deprecated)Â </p>
    </td></tr><tr><td style="text-align:left;width:5.138cm; " class="Table10A2">
     <p class="TextInTable"><span class="Codeintext">hyper</span> </p>
    </td><td style="text-align:left;width:10.301cm; " class="Table10A2">
     <p class="TextInTable">signed 64-bit ordinal integer type Â </p>
    </td></tr><tr><td style="text-align:left;width:5.138cm; " class="Table10A2">
     <p class="TextInTable"><span class="Codeintext">unsigned hyper</span> </p>
    </td><td style="text-align:left;width:10.301cm; " class="Table10A2">
     <p class="TextInTable">unsigned 64-bit ordinal integer type (deprecated)Â </p>
    </td></tr><tr><td style="text-align:left;width:5.138cm; " class="Table10A2">
     <p class="TextInTable"><span class="Codeintext">float</span> </p>
    </td><td style="text-align:left;width:10.301cm; " class="Table10A2">
     <p class="TextInTable">processor dependent floatÂ </p>
    </td></tr><tr><td style="text-align:left;width:5.138cm; " class="Table10A2">
     <p class="TextInTable"><span class="Codeintext">double</span> </p>
    </td><td style="text-align:left;width:10.301cm; " class="Table10A2">
     <p class="TextInTable">processor dependent double Â </p>
    </td></tr><tr><td style="text-align:left;width:5.138cm; " class="Table10A2">
     <p class="TextInTable"><span class="Codeintext">string</span> </p>
    </td><td style="text-align:left;width:10.301cm; " class="Table10A2">
     <p class="TextInTable">string of 16-bit unicode charactersÂ </p>
    </td></tr><tr><td style="text-align:left;width:5.138cm; " class="Table10A2">
     <p class="TextInTable"><span class="Codeintext">any</span> </p>
    </td><td style="text-align:left;width:10.301cm; " class="Table10A2">
     <p class="TextInTable">universal type, takes every <span class="T8">simple</span> or compound UNO type, similar to Variant in other environments or Object in Java</p>
    </td></tr><tr><td style="text-align:left;width:5.138cm; " class="Table10A2">
     <p class="TextInTable"><span class="Codeintext">void</span> </p>
    </td><td style="text-align:left;width:10.301cm; " class="Table10A2">
     <p class="TextInTable">Indicates that a method does not provide a return valueÂ </p>
    </td></tr></table></div>
  <h4 class="Head4"><a name="1_2_1_4_Defining_an_Interface" />Defining an Interface</h4>
  <p class="Paragraph">Interfaces describe aspects of objects. To specify a new behavior for the component, start with an interface definition that comprises the methods offering the new behavior. Define a pair of plain get and set methods in a single step using the <span class="CODEKeyWord">attribute</span> instruction. Alternatively, choose to define your own <span class="Emphasis">operations</span> with arbitrary arguments and exceptions by writing the method signature, and the exceptions the operation throws. We will first write a small interface definition with <span class="Codeintext">attribute</span> instructions, then consider the <span class="Codeintext">resolve()</span> method in <span class="Codeintext">XUNoUrlResolver</span>.</p>
  <p class="Paragraph">Let us assume we want to contribute an <span class="Codeintext">ImageShrink</span> component to OpenOffice.org to create thumbnail images for use in OpenOffice.org tables. There is already a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/document/XFilter.html" title="see type com.sun.star.document.XFilter">com.sun.star.document.XFilter</a></span> interface offering methods supporting file conversion. In addition, a method is required to get and set the source and target directories, and the size of the thumbnails to create. It is common practice that a service and its prime interface have corresponding names, so our component shall have an <span class="Codeintext">org::openoffice::test::XImageShrink</span> interface with methods to do so through get and set operations. </p>
  <h5 class="Head5"><a name="1_2_1_4_1_Attributes" />Attributes</h5>
  <p class="Paragraph">The <span class="Codeintext">attribute</span> instruction creates these operations for the experimental interface definition:</p>
  <p class="P8">Look at the specification for our <span class="Codeintext">XImageShrink</span> interface: (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/Thumbs/org/openoffice/test/XImageShrink.idl" title="goto source Components/Thumbs/org/openoffice/test/XImageShrink.idl">Components/Thumbs/org/openoffice/test/XImageShrink.idl</a>)</p>
  <p class="Code">#ifndef __org_openoffice_test_XImageShrink_idl__Â </p>
  <p class="Code">#define __org_openoffice_test_XImageShrink_idl__Â </p>
  <p class="Code">#include &lt;com/sun/star/uno/XInterface.idl&gt;Â </p>
  <p class="Code">#include &lt;com/sun/star/awt/Size.idl&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">module org { module openoffice { module test {Â </p>
  <p class="Code">Â </p>
  <p class="Code">interface XImageShrink : com::sun::star::uno::XInterface Â </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  [attribute] string SourceDirectory;</p>
  <p class="Code">Â  Â  [attribute] string DestinationDirectory;</p>
  <p class="Code">Â  Â  [attribute] com::sun::star::awt::Size Dimension;</p>
  <p class="Code">};Â </p>
  <p class="Code">Â </p>
  <p class="Code">}; }; };Â </p>
  <p class="Code">Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Paragraph">We protect the interface from being redefined using <span class="CODEKeyWord">#ifndef</span>, then added <span class="CODEKeyWord">#include</span> <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XInterface.html" title="see type com.sun.star.uno.XInterface">com.sun.star.uno.XInterface</a></span> and the struct <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/Size.html" title="see type com.sun.star.awt.Size">com.sun.star.awt.Size</a></span>. These were found in the API reference using its global index. Our interface will be known in the <span class="Codeintext">org::openoffice::test</span> module, so it is nested in the corresponding <span class="CODEKeyWord">module</span> instructions.</p>
  <p class="Paragraph">Define an interface using the <span class="CODEKeyWord">interface</span> instruction. It opens with the keyword <span class="CODEKeyWord">interface</span>, gives an interface name and derives the new interface from a parent interface (also called super interface). It then defines the interface body in <span class="T2">brace</span>s. The <span class="CODEKeyWord">interface</span> instruction concludes with a semicolon.</p>
  <p class="Paragraph">In this case, the introduced interface is <span class="Codeintext">XImageShrink</span>. By convention, all interface identifiers start with an X. Every interface must inherit from the base interface for all UNO interfaces <span class="Codeintext">XInterface</span> or from one of its derived interfaces. The simple case of single inheritance is expressed by a colon <span class="Codeintext">:</span> followed by the <span class="Emphasis">fully qualified name</span> of the parent type. The fully qualified name of a UNOIDL type is its identifier, including all containing modules separated by the scope operator <span class="Codeintext">::</span>. Here we derive from <span class="Codeintext">com::sun::star::uno::XInterface</span> directly. If you want to declare a new interface that inherits from multiple interfaces, you do not use the colon notation, but instead list all inherited interfaces within the body of the new interface:</p>
  <p class="Code">interface XMultipleInheritance {<br /> Â  Â interface XBase1;</p>
  <p class="Code">Â  Â  interface XBase2;<br />};</p>
  <p class="Paragraph">Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table7"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.596cm; " class="Table7A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./4 Writing UNO Components_files/important.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.454cm; " class="Table7B1">
      <p class="TipInTable">UNOIDL allows forward declaration of interfaces used as parameters, return values or struct members. However, an interface you want to derive from must be a fully defined interface.Â </p>
     </td></tr></table></div>
  <p class="Paragraph">After the super interface the interface body begins. It may contain attribute and method declarations, and, in the case of a multiple-inheritance interface, the declaration of inherited interfaces. Consider the interface body of <span class="Codeintext">XImageShrink</span>. It contains three attributes and no methods. Interface methods are discussed below.</p>
  <p class="Paragraph">An <span class="Codeintext">attribute</span> declaration opens with the keyword <span class="CODEKeyWord">attribute</span> in square brackets, then it gives a known type and an identifier for the attribute, and concludes with a semicolon.</p>
  <p class="Paragraph">In our example, the <span class="CODEKeyWord">string</span> attributes named <span class="Codeintext">SourceDirectory</span> and <span class="Codeintext">DestinationDirectory</span> and a <span class="Codeintext">com::sun::star::awt::Size</span> attribute known as <span class="Codeintext">Dimension</span> were defined:</p>
  <p class="Code">Â  Â  [attribute] string SourceDirectory;</p>
  <p class="Code">Â  Â  [attribute] string DestinationDirectory;</p>
  <p class="Code">Â  Â  [attribute] com::sun::star::awt::Size Dimension;</p>
  <p class="P8">During code generation in Java and C++, the <span class="CODEKeyWord">attribute</span> declaration leads to pairs of get and set methods. For instance, the Java interface generated by <span class="wwwftpemail">javamaker</span> from this type description contains the following six methods:</p>
  <p class="P6">Â  Â  // from attribute SourceDir</p>
  <p class="P9">Â  Â  public String <span class="CodeEmphasis">getSourceDirectory</span>();</p>
  <p class="P9">Â  Â  public void <span class="CodeEmphasis">setSourceDirectory</span>(String _sourcedir);</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  // from attribute DestinationDir</p>
  <p class="P10">Â  Â  public String <span class="CodeEmphasis">getDestinationDirectory</span>();</p>
  <p class="P10">Â  Â  public void <span class="CodeEmphasis">setDestinationDirectory</span>(String _destinationdir);</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  // from attribute Dimension</p>
  <p class="P10">Â  Â  public com.sun.star.awt.Size <span class="CodeEmphasis">getDimension</span>();</p>
  <p class="P10">Â  Â  public void <span class="CodeEmphasis">setDimension</span>(com.sun.star.awt.Size _dimension);</p>
  <p class="Paragraph">As an option, define that an attribute cannot be changed from the outside using a <span class="CODEKeyWord">readonly</span> flag. To set this flag, write <span class="CODEKeyWord">[attribute, readonly]</span>. The effect is that only a <span class="Codeintext">get()</span> method is created during code generation, but not a <span class="Codeintext">set()</span> method. Another option is to mark an attribute as <span class="Codeintext">bound</span>; that flag is of interest when mapping interface attributes to properties, see <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_5_6_Storing_the_Service_Manager_for_Further_Use" title="see chapter 4.5.6 Writing UNO Components - Simple Component in Java - Storing the Service Manager for Further Use">4.5.6 Writing UNO Components - Simple Component in Java - Storing the Service Manager for Further Use</a></span> and <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_6_C_2B_2B_Component" title="see chapter 4.6 Writing UNO Components - C++ Component">4.6 Writing UNO Components - C++ Component</a></span>.</p>
  <p class="Paragraph">Since OpenOffice.orgÂ 2.0, there can be exception specifications for attributes, individually for the operations of getting and setting an attribute:Â </p>
  <p class="Code">Â  Â  [attribute] long Age {<br /> Â  Â  Â  Â get raises (DatabaseException); Â  Â  Â  // raised when retrieving the age from the database fails</p>
  <p class="Code">Â  Â  Â  Â  set raises (IllegalArgumentException, // raised when the new age is negative</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  DatabaseException); Â  Â  Â  // raised when storing the new age in the database fails<br /> Â  Â };</p>
  <p class="Paragraph">If no exception specification is given, only runtime exceptions may be thrown.Â </p>
  <h5 class="Head5"><a name="1_2_1_4_2_Methods" />Methods</h5>
  <p class="Paragraph">When writing a real component, define the <span class="Emphasis">methods</span> by providing their signature and the exceptions they throw in the idl file. Our <span class="Codeintext">XUnoUrlResolver</span> example above features a <span class="Codeintext">resolve()</span> method taking a UNO URL and throwing three exceptions.</p>
  <p class="Code">interface XUnoUrlResolver: com::sun::star::uno::XInterfaceÂ </p>
  <p class="Code">{ Â </p>
  <p class="Code">Â  Â  com::sun::star::uno::XInterface resolve( <span class="CodeEmphasis">[in]</span> string sUnoUrl ) </p>
  <p class="Code">Â  Â  Â  Â  <span class="CODEEmphasis">raises</span> (com::sun::star::connection::NoConnectException, </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com::sun::star::connection::ConnectionSetupException, </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com::sun::star::lang::IllegalArgumentException); </p>
  <p class="Code">}; Â </p>
  <p class="Paragraph">The basic structure of a method is similar to C++ functions or Java methods. The method is defined giving a known return type, the operation name, an argument list in brackets <span class="Codeintext">()</span> and if necessary, a list of the exceptions the method may throw. The argument list, the exception clause <span class="CODEKeyWord">raises</span> <span class="Codeintext">()</span> and an optional <span class="Codeintext">[</span> <span class="CODEKeyWord">oneway</span> <span class="Codeintext">]</span> flag preceding the operation are special in UNOIDL. </p>
  <ul style="margin-left:0.5cm;">
   <li class="P11" style="margin-left:2.5cm;"><p class="P11" style="margin-left:0cm;"><span class="T9">Each</span> <span class="T10">argument in the argument list must commence with </span><span class="T9">one of the direction flags </span><span class="T11">[</span> <span class="T12">in</span> <span class="T11">]</span> <span class="T9">, </span><span class="T13">[</span> <span class="T14">out</span> <span class="T13">]</span> <span class="T9">or </span><span class="T13">[</span> <span class="T14">inout</span> <span class="Codeintext">]</span> before a<span class="T10"> known type and </span>identifier for the argument is given. The direction flag specifies how the operation may use the argument:</p></li>
  </ul>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table13"><colgroup><col width="139" /><col width="544" /></colgroup><tr><td style="text-align:left;width:3.036cm; " class="Table13A1">
      <p class="TableHead">Direction Flags for MethodsÂ </p>
     </td><td style="text-align:left;width:11.904cm; " class="Table13B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:3.036cm; " class="Table13A2">
     <p class="TextInTable"><span class="CODEKeyWord">in</span> </p>
    </td><td style="text-align:left;width:11.904cm; " class="Table13B2">
     <p class="TextInTable"><span class="T9">Specifies that t</span> <span class="T10">he method shall evaluate the argument as input parameter, but it cannot change it.</span> </p>
    </td></tr><tr><td style="text-align:left;width:3.036cm; " class="Table13A2">
     <p class="TextInTable"><span class="CODEKeyWord">out</span> </p>
    </td><td style="text-align:left;width:11.904cm; " class="Table13B2">
     <p class="TextInTable"><span class="T9">Specifies that t</span> <span class="T10">he argument does not parameterize the method, instead the method uses the argument as output parameter.</span> </p>
    </td></tr><tr><td style="text-align:left;width:3.036cm; " class="Table13A2">
     <p class="TextInTable"><span class="CODEKeyWord">inout</span> </p>
    </td><td style="text-align:left;width:11.904cm; " class="Table13B2">
     <p class="TextInTable"><span class="T9">Specifies that the</span> <span class="T10">operation is parameterized by the argument and that the method uses the argument as output parameter as well.</span> </p>
    </td></tr></table></div>
  <ul style="margin-left:0.5cm;">
   <li class="P12" style="margin-left:2.5cm;"><p class="P12" style="margin-left:0cm;"><span class="T9">Try to avoid the [</span> <span class="T13">inout</span> <span class="T9">] and [</span> <span class="T13">out</span> <span class="T9">] qualifiers, as they are awkward to handle in certain language bindings, like the Java language binding.</span> <span class="T9">The argument list can be empty. Multiple arguments must be separated by commas.</span><span class="Codeintext"> </span></p></li>
  </ul>
  <ul style="margin-left:0.5cm;">
   <li class="P13" style="margin-left:2.5cm;"><p class="P13" style="margin-left:0cm;"><span class="T9">Exceptions are given through an optional </span><span class="T14">raises</span> <span class="T13">()</span> <span class="T9">clause containing a comma-separated list of known exceptions given by their full name. </span>The presence of a <span class="T14">raises()</span> clause means that only the listed exceptions, <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/RuntimeException.html" title="see type com.sun.star.uno.RuntimeException">com.sun.star.uno.RuntimeException</a></span> and their descendants may be thrown by the implementation. By specifying exceptions for metnods, the implementer of your interface can return information to the caller, thus avoiding possible error conditions.</p></li>
  </ul>
  <p class="Paragraph"><span class="T9">If you prepend a </span><span class="T13">[</span> <span class="T14">oneway</span> <span class="T13">] </span><span class="T9">flag to an operation, the operation </span><span class="Codeintext"><span class="T9">can be executed asynchronously if the underlying method invocation system does support this feature. For example, a UNO Remote Protocol (URP) bridge is such a system that supports oneway calls. </span></span><span class="T9">A </span><span class="T14">oneway</span> <span class="T9">operation can not have a return value, or out or inout parameters. It must not throw other exceptions than com.sun.star.uno.RuntimeException.</span> </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table75"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.596cm; " class="Table75A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./4 Writing UNO Components_files/important.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.454cm; " class="Table75B1">
      <p class="TipInTable">Although there are no general problems with the specification and the implementation of the UNO oneway feature, there are several API remote usage scenarios where oneway calls cause deadlocks in OpenOffice.org. Therefore it is not recommended to introduce new oneway methods with new OpenOffice.org UNO APIs. Â </p>
     </td></tr></table></div>
  <p class="Paragraph">Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table11"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.596cm; " class="Table11A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./4 Writing UNO Components_files/important.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.454cm; " class="Table11B1">
      <p class="TipInTable">You can not override an attribute or a method inherited from a parent interface, that would not make sense in an abstract specification anyway. Furthermore, overloading is not possible. The qualified interface identifier in conjunction with the name of the method creates a unique method name.Â </p>
     </td></tr></table></div>
  <h4 class="Head4"><a name="1_2_1_5_Defining_a_Service" />Defining a Service</h4>
  <p class="Paragraph">UNOIDL Services combine interfaces and properties to specify a certain functionality. In addition, old-style services can include other services. For these purposes, <span class="CODEKeyWord">interface</span>, <span class="CODEKeyWord">property</span> and <span class="CODEKeyWord">service</span> declarations are used within service specifications. Usually services are the basis for an object implementation, although there are old-style services in the OpenOffice.org API that only serve as foundation or addition to other services, but are not meant to be implemented by themselves. </p>
  <p class="Paragraph">We are ready to assemble our <span class="Codeintext">ImageShrink</span> service. Our service will read image files from a source directory and write shrinked versions of the found images to a destination directory. Our <span class="Codeintext">XImageShrink</span> interface offers the needed capabilities, together with the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/document/XFilter.html" title="see type com.sun.star.document.XFilter">com.sun.star.document.XFilter</a></span> that supports two methods:</p>
  <p class="MethodSignatures">boolean <span class="CODEEmphasis">filter</span>( [in] sequence&lt; com::sun::star::beans::PropertyValue &gt; aDescriptor)</p>
  <p class="MethodSignatures">void <span class="CODEEmphasis">cancel</span>()</p>
  <p class="Paragraph">A new-style service can only encompass one interface, so we need to combine <span class="Codeintext">XImageShrink</span> and <span class="Codeintext">XFilter</span> in a single, multiple-inheritance interface:</p>
  <p class="Code">#ifndef __org_openoffice_test_XImageShrinkFilter_idl__<br />#define __org_openoffice_test_XImageShrinkFilter_idl__</p>
  <p class="Code">#include &lt;com/sun/star/document/XFilter.idl&gt;Â </p>
  <p class="Code">#include &lt;org/openoffice/test/XImageShrink.idl&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">module org { module openoffice { module test {Â </p>
  <p class="Code">Â </p>
  <p class="Code">interface XImageShrinkFilter {Â </p>
  <p class="Code">Â  Â  interface XImageShrink;</p>
  <p class="Code">Â  Â  interface com::sun::star::document::XFilter;</p>
  <p class="Code">};Â </p>
  <p class="Code">Â </p>
  <p class="Code">}; }; };Â </p>
  <p class="Code"><br />#endif</p>
  <p class="Paragraph">The following code shows the <span class="Codeintext">ImageShrink</span> service specification: (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/Thumbs/org/openoffice/test/ImageShrink.idl" title="goto source Components/Thumbs/org/openoffice/test/ImageShrink.idl">Components/Thumbs/org/openoffice/test/ImageShrink.idl</a>)</p>
  <p class="Code">#ifndef __org_openoffice_test_ImageShrink_idl__Â </p>
  <p class="Code">#define __org_openoffice_test_ImageShrink_idl__Â </p>
  <p class="Code">#include &lt;org/openoffice/test/XImageShrinkFilter.idl&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">module org { module openoffice { module test {Â </p>
  <p class="Code">Â </p>
  <p class="Code">service ImageShrink: XImageShrinkFilter;Â </p>
  <p class="Code">Â </p>
  <p class="Code">}; }; };Â </p>
  <p class="Code">Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Paragraph">Define a service using the <span class="CODEKeyWord">service</span> declaration. A new-style service opens with the keyword <span class="CODEKeyWord">service</span>, followed by a service name, a colon, the name of the interface supported by the service, and is terminated by a semicolon. The first letter of a service name should be an upper-case letter.</p>
  <p class="Paragraph">An old-style service is much more complex. It opens with the keyword <span class="Codeintext">service</span>, followed by a service name and the service body in <span class="T2">brace</span>s. The <span class="CODEKeyWord">service</span> instruction concludes with a semicolon. The body of a service can reference interfaces and services using <span class="CODEKeyWord">interface</span> and <span class="CODEKeyWord">service</span> instructions, and it can identify properties supported by the service through <span class="Codeintext">[property]</span> instructions.</p>
  <ul style="margin-left:0.5cm;">
   <li class="P14" style="margin-left:2.5cm;"><p class="P14" style="margin-left:0cm;"><span class="CODEKeyWord">Interface</span> keywords followed by interface names in a service body indicates that the service supports these interfaces. By default, the <span class="CODEKeyWord">interface</span> forces the developer to implement this interface. To suggest an interface for a certain service, prepend an <span class="Codeintext">[optional]</span> flag in front of the keyword <span class="CODEKeyWord">interface. </span>This weakens the specification to a permission. An optional interface can be implemented. Use one <span class="CODEKeyWord">interface</span> Â declaration for each supported interface or give a comma-separated list of interfaces to be exported by a service. You must terminate the <span class="CODEKeyWord">interface</span> instruction using a semicolon.</p></li>
   <li class="P14" style="margin-left:2.5cm;"><p class="P14" style="margin-left:0cm;"><span class="CODEKeyWord">service</span> instructions in a service body include other services. The effect is that all interface and property definitions of the other services become part of the current service. A service reference can be optional using the <span class="Codeintext">[optional]</span> flag in front of the <span class="CODEKeyWord">service</span> keyword. Use one declaration per service or a comma-separated list for the services to reference. The <span class="CODEKeyWord">service</span> Â declaration ends with a semicolon.</p></li>
   <li class="P15" style="margin-left:2.5cm;"><p class="P15" style="margin-left:0cm;"><span class="Codeintext">[property]</span> Â declaration s describe qualities of a service that can be reached from the outside under a particular name and type. As opposed to interface attributes, these qualities are not considered to be a structural part of a service. Refer to the section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_3_4_Properties" title="see chapter 3.3.4 Professional UNO - UNO Concepts - Properties">3.3.4 Professional UNO - UNO Concepts - Properties</a></span> in the chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_Professional_UNO" title="see chapter 3 Professional UNO">3 Professional UNO</a></span> to determine when to use interface attributes and when to introduce properties in a service . The <span class="CODEKeyWord">property</span> Â keyword must be enclosed in square brackets, and continue with a known type and a property identifier. Just like a service and an interface, make a property non-mandatory writing <span class="Codeintext">[property, optional]</span>. Besides <span class="CODEKeyWord">optional,</span>there is a number of other flags to use with properties. The following table shows all flags that can be used with <span class="Codeintext">[property]</span>:</p></li>
  </ul>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table9"><colgroup><col width="159" /><col width="523" /></colgroup><tr><td style="text-align:left;width:3.48cm; " class="Table9A1">
      <p class="TableHead">Property FlagsÂ </p>
     </td><td style="text-align:left;width:11.46cm; " class="Table9B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:3.48cm; " class="Table9A2">
     <p class="TextInTable"><span class="CODEKeyWord">optional</span> </p>
    </td><td style="text-align:left;width:11.46cm; " class="Table9B2">
     <p class="TextInTable">Property is non-mandatory.Â </p>
    </td></tr><tr><td style="text-align:left;width:3.48cm; " class="Table9A2">
     <p class="TextInTable"><span class="T15">readonly</span> </p>
    </td><td style="text-align:left;width:11.46cm; " class="Table9B2">
     <p class="TextInTable"><span class="T16">The value of the property cannot be changed using the setter methods for properties, such as </span><span class="T17">setPropertyValue(string name).</span> </p>
    </td></tr><tr><td style="text-align:left;width:3.48cm; " class="Table9A2">
     <p class="TextInTable"><span class="CODEKeyWord">bound</span> </p>
    </td><td style="text-align:left;width:11.46cm; " class="Table9B2">
     <p class="TextInTable">Changes of values are broadcast to <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XPropertyChangeListener.html" title="see type com.sun.star.beans.XPropertyChangeListener">com.sun.star.beans.XPropertyChangeListener</a>s</span> registered with the component.</p>
    </td></tr><tr><td style="text-align:left;width:3.48cm; " class="Table9A2">
     <p class="TextInTable"><span class="CODEKeyWord">constrained</span> </p>
    </td><td style="text-align:left;width:11.46cm; " class="Table9B2">
     <p class="TextInTable">The component must broadcast an event before a value changes, listeners can veto.Â </p>
    </td></tr><tr><td style="text-align:left;width:3.48cm; " class="Table9A2">
     <p class="TextInTable"><span class="CODEKeyWord">maybeambiguous</span> </p>
    </td><td style="text-align:left;width:11.46cm; " class="Table9B2">
     <p class="TextInTable">The value cannot be determined in some cases, for example, in multiple selections.Â </p>
    </td></tr><tr><td style="text-align:left;width:3.48cm; " class="Table9A2">
     <p class="TextInTable"><span class="CODEKeyWord">maybedefault</span> </p>
    </td><td style="text-align:left;width:11.46cm; " class="Table9B2">
     <p class="TextInTable">The value might come from a style or the application environment instead of from the object itself.Â </p>
    </td></tr><tr><td style="text-align:left;width:3.48cm; " class="Table9A2">
     <p class="TextInTable"><span class="CODEKeyWord">maybevoid</span> </p>
    </td><td style="text-align:left;width:11.46cm; " class="Table9B2">
     <p class="TextInTable">The property type determines the range of possible values, but sometimes there may be situations where there is no information available. Instead of defining special values for each type denoting that there are no meaningful values, the UNO type <span class="CODEKeyWord">void</span> can be used. Its meaning is comparable to <span class="Codeintext">null</span> in relational databases.</p>
    </td></tr><tr><td style="text-align:left;width:3.48cm; " class="Table9A2">
     <p class="TextInTable"><span class="CODEKeyWord">removable</span> </p>
    </td><td style="text-align:left;width:11.46cm; " class="Table9B2">
     <p class="TextInTable">The property is removable. If a property is made removable, you must check for the existence of a property using <span class="Codeintext">hasPropertyByName() </span>at the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XPropertySetInfo.html" title="see type com.sun.star.beans.XPropertySetInfo">com.sun.star.beans.XPropertySetInfo</a></span> and consider providing the capability to add or remove properties using <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XPropertyContainer.html" title="see type com.sun.star.beans.XPropertyContainer">com.sun.star.beans.XPropertyContainer</a></span>.</p>
    </td></tr><tr><td style="text-align:left;width:3.48cm; " class="Table9A2">
     <p class="TextInTable"><span class="CODEKeyWord">transient</span> </p>
    </td><td style="text-align:left;width:11.46cm; " class="Table9B2">
     <p class="TextInTable">The property will not be stored if the object is serialized (made persistent).Â </p>
    </td></tr></table></div>
  <ul style="margin-left:0.5cm;">
   <li class="P16" style="margin-left:2.5cm;"><p class="P16" style="margin-left:0cm;">Several properties of the same type can be listed in one <span class="CODEKeyWord">property</span> declaration. Remember to add a semicolon at the end. Implement the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XPropertySet.html" title="see type com.sun.star.beans.XPropertySet">com.sun.star.beans.XPropertySet</a></span> when putting properties in your service, otherwise the properties specified will not work for others using the component.</p></li>
  </ul>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table26"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.596cm; " class="Table26A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./4 Writing UNO Components_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.454cm; " class="Table26B1">
      <p class="TipInTable">Some old-style services, which specify no interfaces at all, only properties, are used as a sequence of <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/PropertyValue.html" title="see type com.sun.star.beans.PropertyValue">com.sun.star.beans.PropertyValue</a></span> in OpenOffice.org, for example, <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/document/MediaDescriptor.html" title="see type com.sun.star.document.MediaDescriptor">com.sun.star.document.MediaDescriptor</a></span>.</p>
     </td></tr></table></div>
  <p class="Paragraph">The following UNOIDL snippet shows the service, the interfaces and the properties supported by the old-style service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/text/TextDocument.html" title="see type com.sun.star.text.TextDocument">com.sun.star.text.TextDocument</a></span> as defined in UNOIDL. Note the optional interfaces and the optional and read-only properties.</p>
  <p class="P17">service TextDocumentÂ </p>
  <p class="P10">{Â </p>
  <p class="P10">Â  Â  service com::sun::star::document::OfficeDocument;</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  interface com::sun::star::text::XTextDocument;</p>
  <p class="P10">Â  Â  interface com::sun::star::util::XSearchable;</p>
  <p class="P10">Â  Â  interface com::sun::star::util::XRefreshable;</p>
  <p class="P10">Â  Â  interface com::sun::star::util::XNumberFormatsSupplier;</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  [optional] interface com::sun::star::text::XFootnotesSupplier;</p>
  <p class="P10">Â  Â  [optional] interface com::sun::star::text::XEndnotesSupplier;</p>
  <p class="P10">Â  Â  [optional] interface com::sun::star::util::XReplaceable;</p>
  <p class="P10">Â  Â  [optional] interface com::sun::star::text::XPagePrintable;</p>
  <p class="P10">Â  Â  [optional] interface com::sun::star::text::XReferenceMarksSupplier;</p>
  <p class="P10">Â  Â  [optional] interface com::sun::star::text::XLineNumberingSupplier;</p>
  <p class="P10">Â  Â  [optional] interface com::sun::star::text::XChapterNumberingSupplier;</p>
  <p class="P10">Â  Â  [optional] interface com::sun::star::beans::XPropertySet;</p>
  <p class="P10">Â  Â  [optional] interface com::sun::star::text::XTextGraphicObjectsSupplier;</p>
  <p class="P10">Â  Â  [optional] interface com::sun::star::text::XTextEmbeddedObjectsSupplier;</p>
  <p class="P10">Â  Â  [optional] interface com::sun::star::text::XTextTablesSupplier;</p>
  <p class="P10">Â  Â  [optional] interface com::sun::star::style::XStyleFamiliesSupplier;</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  [optional, property] com::sun::star::lang::Locale CharLocale;</p>
  <p class="P10">Â  Â  [optional, property] string WordSeparator;</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  [optional, readonly, property] long CharacterCount;</p>
  <p class="P10">Â  Â  [optional, readonly, property] long ParagraphCount;</p>
  <p class="P10">Â  Â  [optional, readonly, property] long WordCount;</p>
  <p class="P10">Â </p>
  <p class="P10">};Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table8"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.596cm; " class="Table8A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./4 Writing UNO Components_files/important.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.454cm; " class="Table8B1">
      <p class="TipInTable"><span class="T18">You might encounter two more keywords in old-style service bodies. The keyword </span><span class="T19">observes</span> <span class="T18">can stand in front of interface references and means that the given interfaces must be "observed". Since the </span><span class="T19">observes</span> <span class="T18">concept is disapproved of, no further explanation is provided.</span> </p>
      <p class="P18">If a service references another service using the keyword <span class="T19">needs</span> in front of the reference, then this service depends on the availability of the needed service at runtime. Services should not use <span class="T19">needs</span> as it is considered too implementation specific.</p>
     </td></tr></table></div>
  <h4 class="Head4"><a name="1_2_1_6_Defining_a_Sequence" />Defining a Sequence</h4>
  <p class="P8">A sequence in UNOIDL is an array containing a variable number of elements of the same UNOIDL type. The following is an example of a <span class="Codeintext">sequence</span> term:</p>
  <p class="Code">// this term could occur in a UNOIDL definition block somewhereÂ </p>
  <p class="Code">sequence&lt; com::sun::star::uno::XInterface &gt;Â </p>
  <p class="P8">It starts with the keyword <span class="CODEKeyWord">sequence</span> and gives the element type enclosed in <span class="T2">angle bracket</span>s &lt;&gt;. The element type must be a known type. A sequence type can be used as parameter, return value, property or struct member just like any other type. Sequences can also be nested, if necessary.</p>
  <p class="Code">// this could be a nested sequence definitionÂ </p>
  <p class="Code">sequence&lt; sequence&lt; long &gt; &gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">// this could be an operation using sequences in some interface definition Â </p>
  <p class="Code">sequence&lt; string &gt; <span class="CODEEmphasis">getNamesOfIndex</span>(sequence&lt; long &gt; indexes);</p>
  <h4 class="Head4"><a name="1_2_1_7_Defining_a_Struct" />Defining a Struct</h4>
  <p class="Paragraph">A <span class="Codeintext">struct</span> is a compound type which puts together arbitrary UNOIDL types to form a new data type. Its member data are not encapsulated, rather they are publicly available. Structs are frequently used to handle related data easily, and the event structs broadcast to event listeners.</p>
  <p class="Paragraph">A plain struct instruction opens with the keyword <span class="T20">struct</span>, gives an identifier for the new struct type and has a struct body in <span class="T2">brace</span>s. It is terminated by a semicolon. The struct body contains a list of struct member declarations that are defined by a known type and an identifier for the struct member. The member declarations must end with a semicolon, as well.</p>
  <p class="Code">#ifndef __com_sun_star_reflection_ParamInfo_idl__ Â </p>
  <p class="Code">#define __com_sun_star_reflection_ParamInfo_idl__ Â </p>
  <p class="Code">Â </p>
  <p class="Code">#include &lt;com/sun/star/reflection/ParamMode.idl&gt; Â </p>
  <p class="Code">Â </p>
  <p class="Code">module com { Â module sun { Â module star { Â module reflection {</p>
  <p class="Code">Â </p>
  <p class="Code">interface XIdlClass; // forward interface declarationÂ </p>
  <p class="Code">Â </p>
  <p class="Code"><span class="CODEEmphasis">struct</span> ParamInfo </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  string aName; </p>
  <p class="Code">Â  Â  ParamMode aMode; </p>
  <p class="Code">Â  Â  XIdlClass aType; </p>
  <p class="Code">}; Â </p>
  <p class="Code">Â </p>
  <p class="Code">}; }; }; }; Â </p>
  <p class="Code">Â </p>
  <p class="Code">#endif Â </p>
  <p class="Paragraph">UNOIDL supports inheritance of <span class="Codeintext">struct</span> types. Inheritance is expressed by a colon <span class="Codeintext">:</span> followed by the <span class="Emphasis">full name</span> of the parent type. A struct type recursively inherits all members of the parent <span class="Codeintext">struct</span> and their parents. For instance, derive from the struct <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/EventObject.html" title="see type com.sun.star.lang.EventObject">com.sun.star.lang.EventObject</a></span> to put additional information about new events into customized event objects to send to event listeners.</p>
  <p class="Code">// com.sun.star.beans.PropertyChangeEvent inherits from com.sun.star.lang.EventObjectÂ </p>
  <p class="Code">// and adds property-related information to the event objectÂ </p>
  <p class="Code">struct PropertyChangeEvent : com::sun::star::lang::EventObject Â </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  string PropertyName;</p>
  <p class="Code">Â  Â  boolean Further;</p>
  <p class="Code">Â  Â  long PropertyHandle;</p>
  <p class="Code">Â  Â  any OldValue;</p>
  <p class="Code">Â  Â  any NewValue;</p>
  <p class="Code">};Â </p>
  <p class="Paragraph">A new feature of OpenOffice.orgÂ 2.0 are <span class="Emphasis">polymorphic struct types</span>. A polymorphic struct type <span class="Emphasis">template</span> is similar to a plain struct type, but it has one or more <span class="Emphasis">type parameters</span> enclosed in <span class="T2">angle bracket</span>s <span class="Codeintext">&lt;&gt;</span>, and its members can have these parameters as types:</p>
  <p class="Code">// A polymorphic struct type template with two type parameters:<br />struct Poly&lt;T,U&gt; {</p>
  <p class="Code">Â  Â  T member1;</p>
  <p class="Code">Â  Â  T member2;</p>
  <p class="Code">Â  Â  U member3;</p>
  <p class="Code">Â  Â  long member4;<br />};</p>
  <p class="Paragraph">A polymorphic struct type template is not itself a UNO typeâit has to be instantiated with actual <span class="Emphasis">type arguments</span> to be used as a type:</p>
  <p class="Code">// Using an instantiation of Poly as a type in UNOIDL:<br />interface XIfc { Poly&lt;boolean, any&gt; fn(); };</p>
  <h4 class="Head4"><a name="1_2_1_8_Defining_an_Exception" />Defining an Exception</h4>
  <p class="Paragraph">An <span class="CODEKeyWord">exception</span> type is a type that contains information about an error . If an operation detects an error that halts the normal process flow, it must raise an exception and send information about the error back to the caller through an <span class="Codeintext">exception</span> object. This causes the caller to interrupt its normal program flow as well and react according to the information received in the exception object. For details about exceptions and their implementation, refer to the chapters <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_4_UNO_Language_Bindings" title="see chapter 3.4 Professional UNO - UNO Language Bindings">3.4 Professional UNO - UNO Language Bindings</a></span> and <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_3_7_Exception_Handling" title="see chapter 3.3.7 Professional UNO - UNO Concepts - Exception Handling">3.3.7 Professional UNO - UNO Concepts - Exception Handling</a></span>.</p>
  <p class="Paragraph">There are a number of exceptions to use. The exceptions should be sufficient in many cases, because a message string can be sent back to the caller. When defining an exception, do it in such a way that other developers could reuse it in their contexts.Â </p>
  <p class="Paragraph">An exception declaration opens with the keyword <span class="T20">exception</span>, gives an identifier for the new exception type and has an exception body in <span class="T2">brace</span>s. It is terminated by a semicolon. The exception body contains a list of exception member declarations that are defined by a known type and an identifier for the exception member. The member declarations must end with a semicolon, as well.</p>
  <p class="Paragraph">Exceptions must be based on <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/Exception.html" title="see type com.sun.star.uno.Exception">com.sun.star.uno.Exception</a></span> or <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/RuntimeException.html" title="see type com.sun.star.uno.RuntimeException">com.sun.star.uno.RuntimeException</a></span>, directly or indirectly through derived exceptions of these two exceptions. <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/Exception.html" title="see type com.sun.star.uno.Exception">com.sun.star.uno.Exception</a>s</span> can only be thrown in operations specified to raise them while <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/RuntimeException.html" title="see type com.sun.star.uno.RuntimeException">com.sun.star.uno.RuntimeException</a>s</span> can always occur. Inheritance is expressed by a colon <span class="Codeintext">:</span>, followed by the <span class="Emphasis">full name</span> of the parent type.</p>
  <p class="Code">// com.sun.star.uno.Exception is the base exception for all exceptionsÂ </p>
  <p class="Code">exception <span class="CODEEmphasis">Exception</span> {</p>
  <p class="Code">Â  Â  string Message;</p>
  <p class="Code">Â  Â  XInterface Context;</p>
  <p class="Code">};Â </p>
  <p class="Code">Â </p>
  <p class="Code">// com.sun.star.lang.IllegalArgumentException tells the caller which Â </p>
  <p class="Code">// argument caused troubleÂ </p>
  <p class="Code">exception <span class="CODEEmphasis">IllegalArgumentException</span>: com::sun::star::uno::Exception</p>
  <p class="Code">{ Â </p>
  <p class="Code">Â  Â  /** identifies the position of the illegal argument. </p>
  <p class="Code">Â  Â  Â  Â  &lt;p&gt;This field is -1 if the position is not known.&lt;/p&gt;</p>
  <p class="Code">Â  Â  Â */</p>
  <p class="Code">Â  Â  short ArgumentPosition; </p>
  <p class="Code">Â </p>
  <p class="Code">}; Â </p>
  <p class="Code">Â </p>
  <p class="Code">// com.sun.star.uno.RuntimeException is the base exception for serious errorsÂ </p>
  <p class="Code">// usually caused by programming errors or problems with the runtime environmentÂ </p>
  <p class="Code">exception <span class="CODEEmphasis">RuntimeException</span> : com::sun::star::uno::Exception {</p>
  <p class="Code">};Â </p>
  <p class="Code">Â </p>
  <p class="Code">// com.sun.star.uno.SecurityException is a more specific RuntimeException Â </p>
  <p class="Code">exception <span class="CODEEmphasis">SecurityException</span> : com::sun::star::uno::RuntimeException {</p>
  <p class="Code">};Â </p>
  <h4 class="Head4"><a name="1_2_1_9_Predefining_Values" />Predefining Values</h4>
  <p class="Paragraph">Predefined values can be provided, so that implementers do not have to use cryptic numbers or other literal values. There are two kinds of predefined values, constants and enums. Constants can contain values of any basic UNO type, except <span class="Codeintext">void</span>. The enums are automatically numbered <span class="Codeintext">long</span> values.</p>
  <h5 class="Head5"><a name="1_2_1_9_1_Const_and_Constants" />Const and Constants</h5>
  <p class="Paragraph">The <span class="Codeintext">constants</span> type is a container for <span class="Codeintext">const</span> types. A <span class="Codeintext">constants</span> instruction opens with the keyword <span class="T20">constants</span>, gives an identifier for the new group of <span class="Codeintext">const</span> values and has the body in <span class="T2">brace</span>s. It terminates with a semicolon. The <span class="Codeintext">constants</span> body contains a list of <span class="CODEKeyWord">const</span> definitions that define the values of the members starting with the keyword <span class="Codeintext">const</span> followed by a known type name and the identifier for the <span class="Codeintext">const</span> in uppercase letters. Each <span class="Codeintext">const</span> definition must assign a value to the <span class="Codeintext">const</span> using an equals sign. The value must match the given type and can be an integer or floating point number, or a character, or a suitable <span class="Codeintext">const</span> value or an arithmetic term based on the operators in the table below. The <span class="Codeintext">const</span> definitions must end with a semicolon, as well.</p>
  <p class="P17">#ifndef __com_sun_star_awt_FontWeight_idl__Â </p>
  <p class="P10">#define __com_sun_star_awt_FontWeight_idl__Â </p>
  <p class="P10">Â </p>
  <p class="P10">module com { Â module sun { Â module star { Â module awt {</p>
  <p class="P10">Â </p>
  <p class="P10">constants FontWeightÂ </p>
  <p class="P10">{Â </p>
  <p class="P10">Â  Â  const float DONTKNOW = 0.000000; </p>
  <p class="P10">Â  Â  const float THIN = 50.000000; </p>
  <p class="P10">Â  Â  const float ULTRALIGHT = 60.000000; </p>
  <p class="P10">Â  Â  const float LIGHT = 75.000000; </p>
  <p class="P10">Â  Â  const float SEMILIGHT = 90.000000; </p>
  <p class="P10">Â  Â  const float NORMAL = 100.000000; </p>
  <p class="P10">Â  Â  const float SEMIBOLD = 110.000000; </p>
  <p class="P10">Â  Â  const float BOLD = 150.000000; </p>
  <p class="P10">Â  Â  const float ULTRABOLD = 175.000000; </p>
  <p class="P10">Â  Â  const float BLACK = 200.000000; Â </p>
  <p class="P10">};Â </p>
  <p class="P10">Â </p>
  <p class="P10">}; }; }; };Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table15"><colgroup><col width="245" /><col width="460" /></colgroup><tr><td style="text-align:left;width:5.366cm; " class="Table15A1">
      <p class="TableHead">Operators Allowed in<span class="Codeintext"> const</span> </p>
     </td><td style="text-align:left;width:10.074cm; " class="Table15B1">
      <p class="TableHead">MeaningÂ </p>
     </td></tr><tr><td style="text-align:left;width:5.366cm; " class="Table15A2">
     <p class="TextInTable"><span class="Codeintext">+</span> </p>
    </td><td style="text-align:left;width:10.074cm; " class="Table15B2">
     <p class="TextInTable">additionÂ </p>
    </td></tr><tr><td style="text-align:left;width:5.366cm; " class="Table15A2">
     <p class="TextInTable"><span class="Codeintext">-</span> </p>
    </td><td style="text-align:left;width:10.074cm; " class="Table15B2">
     <p class="TextInTable">subtractionÂ </p>
    </td></tr><tr><td style="text-align:left;width:5.366cm; " class="Table15A2">
     <p class="TextInTable"><span class="Codeintext">*</span> </p>
    </td><td style="text-align:left;width:10.074cm; " class="Table15B2">
     <p class="TextInTable">multiplicationÂ </p>
    </td></tr><tr><td style="text-align:left;width:5.366cm; " class="Table15A2">
     <p class="TextInTable"><span class="Codeintext">/</span> </p>
    </td><td style="text-align:left;width:10.074cm; " class="Table15B2">
     <p class="TextInTable">divisionÂ </p>
    </td></tr><tr><td style="text-align:left;width:5.366cm; " class="Table15A2">
     <p class="TextInTable"><span class="Codeintext">%</span> </p>
    </td><td style="text-align:left;width:10.074cm; " class="Table15B2">
     <p class="TextInTable">modulo divisionÂ </p>
    </td></tr><tr><td style="text-align:left;width:5.366cm; " class="Table15A2">
     <p class="TextInTable"><span class="Codeintext">-</span> </p>
    </td><td style="text-align:left;width:10.074cm; " class="Table15B2">
     <p class="TextInTable">negative signÂ </p>
    </td></tr><tr><td style="text-align:left;width:5.366cm; " class="Table15A2">
     <p class="TextInTable"><span class="Codeintext">+</span> </p>
    </td><td style="text-align:left;width:10.074cm; " class="Table15B2">
     <p class="TextInTable">positive signÂ </p>
    </td></tr><tr><td style="text-align:left;width:5.366cm; " class="Table15A2">
     <p class="TextInTable"><span class="Codeintext">|</span> </p>
    </td><td style="text-align:left;width:10.074cm; " class="Table15B2">
     <p class="TextInTable">bitwise orÂ </p>
    </td></tr><tr><td style="text-align:left;width:5.366cm; " class="Table15A2">
     <p class="TextInTable"><span class="Codeintext">^</span> </p>
    </td><td style="text-align:left;width:10.074cm; " class="Table15B2">
     <p class="TextInTable">bitwise xorÂ </p>
    </td></tr><tr><td style="text-align:left;width:5.366cm; " class="Table15A2">
     <p class="TextInTable"><span class="Codeintext">&amp;</span> </p>
    </td><td style="text-align:left;width:10.074cm; " class="Table15B2">
     <p class="TextInTable">bitwise andÂ </p>
    </td></tr><tr><td style="text-align:left;width:5.366cm; " class="Table15A2">
     <p class="TextInTable"><span class="Codeintext">~</span> </p>
    </td><td style="text-align:left;width:10.074cm; " class="Table15B2">
     <p class="TextInTable"><span class="T1">bitwise</span> not</p>
    </td></tr><tr><td style="text-align:left;width:5.366cm; " class="Table15A2">
     <p class="TextInTable"><span class="Codeintext">&gt;&gt;</span> <span class="Codeintext">&lt;&lt;</span> </p>
    </td><td style="text-align:left;width:10.074cm; " class="Table15B2">
     <p class="TextInTable">bitwise shift right, shift leftÂ </p>
    </td></tr></table></div>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle6"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Tabelle6A1">
      <div class="TableContents"><img width="39" height="39" alt="Tip graphics marks a hint section in the text" src="./4 Writing UNO Components_files/tip.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Tabelle6B1">
      <p class="TipInTable">Use <span class="Codeintext">constants</span> to group <span class="Codeintext">const</span> types. In the Java language, binding a <span class="Codeintext">constants</span> group leads to one class for all <span class="Codeintext">const</span> members, whereas a single <span class="Codeintext">const</span> is mapped to an entire class.</p>
     </td></tr></table></div>
  <h5 class="Head5"><a name="1_2_1_9_2_Enum" />Enum</h5>
  <p class="Paragraph">An <span class="Codeintext">enum</span> type holds a group of predefined <span class="Codeintext">long</span> values and maps them to meaningful symbols. It is equivalent to the enumeration type in C++. An <span class="Codeintext">enum</span> instruction opens with the keyword <span class="T20">enum</span>, gives an identifier for the new group of <span class="Codeintext">enum</span> values and has an <span class="Codeintext">enum</span> body in <span class="T2">brace</span>s. It terminates with a semicolon. The <span class="Codeintext">enum</span> body contains a comma-separated list of symbols in uppercase letters that are automatically mapped to <span class="Codeintext">long</span> values counting from zero, by default.</p>
  <p class="Code">#ifndef __com_sun_star_style_ParagraphAdjust_idl__ Â </p>
  <p class="Code">#define __com_sun_star_style_ParagraphAdjust_idl__ Â </p>
  <p class="Code">Â </p>
  <p class="Code">module com { Â module sun { Â module star { Â module style {</p>
  <p class="Code">Â </p>
  <p class="Code">enum ParagraphAdjustÂ </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  LEFT,</p>
  <p class="Code">Â  Â  RIGHT,</p>
  <p class="Code">Â  Â  BLOCK,</p>
  <p class="Code">Â  Â  CENTER,</p>
  <p class="Code">Â  Â  STRETCH</p>
  <p class="Code">};Â </p>
  <p class="Code">Â </p>
  <p class="Code">}; }; }; };Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Paragraph">In this example, <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/style/ParagraphAdjust.html#LEFT" title="see LEFT of type com.sun.star.style.ParagraphAdjust:LEFT">com.sun.star.style.ParagraphAdjust:LEFT</a></span> corresponds to 0, ParagraphAdjust.RIGHT corresponds to 1 and so forth.</p>
  <p class="Paragraph">An <span class="Codeintext">enum</span> member can also be set to a <span class="Codeintext">long</span> value using the equals sign. All the following <span class="Codeintext">enum</span> values are then incremented starting from this value. If there is another assignment later in the code, the counting starts with that assignment:</p>
  <p class="Code">enum Error {Â </p>
  <p class="Code">Â  Â  SYSTEM = 10, // value 10</p>
  <p class="Code">Â  Â  RUNTIME, Â  Â  // value 11</p>
  <p class="Code">Â  Â  FATAL, Â  Â  Â  // value 12</p>
  <p class="Code">Â  Â  USER = 30, Â  // value 30</p>
  <p class="Code">Â  Â  SOFT Â  Â  Â  Â  // value 31</p>
  <p class="Code">};Â </p>
  <p class="Standard">Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table34"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.596cm; " class="Table34A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./4 Writing UNO Components_files/important.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.454cm; " class="Table34B1">
      <p class="TipInTable">The explicit use of <span class="Codeintext">enum</span> values is deprecated and should not be used. It is a historical characteristic of the <span class="Codeintext">enum</span> type but it makes not really sense and makes, for example language bindings unnecessarily complicated. </p>
     </td></tr></table></div>
  <h4 class="Head4"><a name="1_2_1_10_Using_Comments" />Using Comments</h4>
  <p class="Paragraph">Comments are code sections ignored by <span class="wwwftpemail">idlc</span>. In UNOIDL, use C++ style comments. A double slash <span class="Codeintext">//</span> marks the rest of the line as comment. Text enclosed between <span class="Codeintext">/*</span> and <span class="Codeintext">*/</span> is a comment that may span over multiple lines.</p>
  <p class="Code">service ImageShrink Â </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  // the following lines define interfaces:</p>
  <p class="Code">Â  Â  interface org::openoffice::test::XImageShrink; // our home-grown interface</p>
  <p class="Code">Â  Â  interface com::sun::star::document::XFilter;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  /* we could reference other interfaces, services and properties here.</p>
  <p class="Code">Â  Â  Â  Â However, the keywords uses and needs are deprecated</p>
  <p class="Code">Â  Â  */</p>
  <p class="Code">};Â </p>
  <p class="Paragraph">Based on the above, there are documentation comments that are extracted when idl files are processed with <span class="wwwftpemail">autodoc</span>, the UNOIDL documentation generator. Instead of writing <span class="Codeintext">/*</span> or <span class="Codeintext">//</span>to mark a plain comment, write <span class="Codeintext">/**</span> or <span class="Codeintext">///</span> to create a documentation comment.</p>
  <p class="Code">/** Don't repeat asterisks within multiple line comments, Â </p>
  <p class="Code">Â  * &lt;- as shown here</p>
  <p class="Code">Â  */</p>
  <p class="Code">Â </p>
  <p class="Code">/// Don't write multiple line documentation comments using triple slashes, Â </p>
  <p class="Code">/// since only this last line will make it into the documentationÂ </p>
  <p class="Paragraph">Our <span class="Codeintext">XUnoUrlResolver</span> sample idl file contains plain comments and documentation comments. </p>
  <p class="Code">/** service &lt;type scope="com::sun::star::bridge"&gt;UnoUrlResolver&lt;/type&gt; Â </p>
  <p class="Code">Â  Â  implements this interface.</p>
  <p class="Code">Â */</p>
  <p class="Code">interface XUnoUrlResolver: com::sun::star::uno::XInterfaceÂ </p>
  <p class="Code">{ Â </p>
  <p class="Code">Â  Â  // method com::sun::star::bridge::XUnoUrlResolver::resolve</p>
  <p class="Code">Â  Â  /** resolves an object, on the UNO URL.</p>
  <p class="Code">Â  Â  Â */</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  ...</p>
  <p class="Code">}Â </p>
  <p class="Paragraph">Note the additional <span class="Codeintext">&lt;type/&gt;</span> tag in the documentation comment pointing out that the service <span class="Codeintext">UnoUrlResolver</span> implements the interface <span class="Codeintext">XUnoUrlResolver</span>. This tag becomes a hyperlink in HTML documentation generated from this file. The chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Appendix/IDLDocumentationGuide/IDLDocumentationGuide.xhtml#1_IDL_Documentation_Guide" title="see chapter B IDL Documentation Guide">B IDL Documentation Guide</a></span> provides a comprehensive description for UNOIDL documentation comments.</p>
  <h4 class="Head4"><a name="1_2_1_11_Singleton" />Singleton</h4>
  <p class="Paragraph">A <span class="Codeintext">singleton</span> declaration defines a global name for a UNO object and determines that there can only be one instance of this object that must be reachable under this name. The singleton instance can be retrieved from the component context using the name of the <span class="Codeintext">singleton</span>. If the <span class="Codeintext">singleton</span> has not been instantiated yet, the component context creates it. A <span class="Emphasis">new-style</span> singleton declaration, that binds a singleton name to an object with a certain interface type, looks like this:</p>
  <p class="Code">singleton thePackageManagerFactory: com::sun::star::depoyment::XPackageManager;Â </p>
  <p class="Paragraph">There are also <span class="Emphasis">old-style</span> singletons, which reference (old-style) services instead of interfaces.</p>
  <h4 class="Head4"><a name="1_2_1_12_Reserved_Types" />Reserved Types</h4>
  <p class="Paragraph">There are types in UNOIDL which are reserved for future use. The <span class="wwwftpemail">idlc</span> will refuse to compile the specifications if they are tried.</p>
  <h5 class="Head5"><a name="1_2_1_12_1_Array" />Array</h5>
  <p class="Paragraph">The keyword <span class="Codeintext">array</span> is reserved, but it cannot be used in UNOIDL. There will be sets containing a fixed number of elements, as opposed to sequences, that can have an arbitrary number of elements.</p>
  <h5 class="Head5"><a name="1_2_1_12_2_Union" />Union</h5>
  <p class="Paragraph">There is also a reserved keyword for <span class="Codeintext">union</span> types that cannot be used in UNOIDL. A <span class="Codeintext">union</span> will look at a variable value from more than one perspective. For instance, a union for a long value is defined and this same value is accessed as a whole, or accessed by its high and low part separately through a union.</p>
  <h4 class="Head4"><a name="1_2_1_13_Published_Entities" />Published Entities</h4>
  <p class="Paragraph">A new feature of OpenOffice.orgÂ 2.0 is the UNOIDL <span class="Codeintext">published</span> keyword. If you mark a declaration (of a struct, interface, service, etc.) as published, you give the guarantee that you will not change the declaration in the future, so that clients of your API can depend on that. On the other hand, leaving a declaration unpublished is like a warning to your clients that the declared entity may change or even vanish in a future version of your API. The <span class="wwwftpemail">idlc</span> will give an error if you try to use an unpublished entity in the declaration of a published one, as that would not make sense.</p>
  <p class="Paragraph">The OpenOffice.org API has always been intended to never change in incompatible ways. This is now reflected formally by publishing all those entities of the OpenOffice.orgÂ 2.0 API that were already available in previous API versions. Some new additions to the API have been left unpublished, however, to document that they are probably not yet in their final form. When using such additions, keep in mind that you might need to adapt your code to work with future versions of OpenOffice.org. Generally, each part of the OpenOffice.org API should stabilize over time, however, and so each addition should eventually be published. Consider this as a means in attempting to make new functionality available as early as possible, and at the same time ensure that no APIs are fixed prematurely, before they have matured to a truly useful form.Â </p>
  <h3 class="Head3"><a name="1_2_2_Generating_Source_Code_from_UNOIDL_Definitions" />4.2.2Â Â Generating Source Code from UNOIDL Definitions</h3>
  <p class="Paragraph">The type description provided in .idl files is used in the subsequent process to create type information for the service manager and to generate header and class files. Processing the UNOIDL definitions is a three-step process. </p>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P19" style="margin-left:2.5cm;"><p class="P19" style="margin-left:0cm;">Compile the <span class="wwwftpemail">.idl</span> files using <span class="wwwftpemail">idlc</span> . The result are .<span class="wwwftpemail">urd</span> files (UNO reflection data) containing binary type descriptions. </p></li>
   <li class="P19" style="margin-left:2.5cm;"><p class="P19" style="margin-left:0cm;">Merge the .<span class="wwwftpemail">urd</span> files into a registry database using <span class="wwwftpemail">regmerge</span> . The registry database files have the extension .<span class="wwwftpemail">rdb </span>(registry database). They contain binary data describing types in a tree-like structure starting with / as the root. The default key for type descriptions is the /UCR key (UNO core reflection).</p></li>
   <li class="P19" style="margin-left:2.5cm;"><p class="P19" style="margin-left:0cm;">Generate sources from registry files using <span class="wwwftpemail">javamaker</span> <span class="wwwftpemail">or </span><span class="wwwftpemail">cppumaker</span> <span class="wwwftpemail">. </span>The tools <span class="wwwftpemail">javamaker</span> and <span class="wwwftpemail">cppumaker</span> map UNOIDL types to Java and C++ as described in the chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_4_UNO_Language_Bindings" title="see chapter 3.4 Professional UNO - UNO Language Bindings">3.4 Professional UNO - UNO Language Bindings</a></span>. The registries used by these tools must contain all types to map to the programming language used, including all types referenced in the type descriptions. Therefore, javamaker and cppumaker need the registry that was merged, but the entire office registry as well. OpenOffice.org comes with a complete registry database providing all types used by UNO at runtime. The SDK uses the database (type library) of an existing OpenOffice.org installation. </p></li>
  </ol>
  <p class="Paragraph">The following shows the necessary commands to create Java class files and C++ headers from <span class="wwwftpemail">.idl</span> files in a simple setup under Linux. We assume the jars from <span class="wwwftpemail">&lt;OFFICE_PROGRAM_PATH&gt;/classes</span> have been added to your CLASSPATH, the SDK is installed in <span class="wwwftpemail">/home/sdk</span>, and <span class="wwwftpemail">/home/sdk/linux/bin</span> is in the PATH environment variable, so that the UNO tools can be run directly. The project folder is <span class="wwwftpemail">/home/sdk/Thumbs</span> and it contains the above .<span class="wwwftpemail">idl</span> file <span class="wwwftpemail">XImageShrink.idl.</span> </p>
  <p class="Output"># make project folder the current directoryÂ </p>
  <p class="Output">cd /home/sdk/ThumbsÂ </p>
  <p class="Output">Â </p>
  <p class="Output"># compile XImageShrink.idl using idlc Â </p>
  <p class="Output"># Â  usage: idlc [-options] file_1.idl ... file_n.idl</p>
  <p class="Output"># Â  -C adds complete type information including services</p>
  <p class="Output"># Â  -I includepath tells idlc where to look for include files</p>
  <p class="Output">#Â </p>
  <p class="Output"># idlc writes the resulting urds to the current folder by defaultÂ </p>
  <p class="Output"><span class="CODEEmphasis">idlc</span> -C -I../idl XImageShrink.idl</p>
  <p class="Output">Â </p>
  <p class="Output"># create registry database (.rdb) file from UNO registry data (.urd) using regmergeÂ </p>
  <p class="Output"># Â  usage: regmerge mergefile.rdb mergeKey regfile_1.urd ... regfile_n.urd</p>
  <p class="Output"># Â  mergeKey entry in the tree-like rdb structure where types from .urd should be recorded, the tree </p>
  <p class="Output"># Â  starts with the root / and UCR is the default key for type descriptions</p>
  <p class="Output">#Â </p>
  <p class="Output"># regmerge writes the rdb to the current folder by defaultÂ </p>
  <p class="Output"><span class="CodeEmphasis">regmerge</span> thumbs.rdb /UCR XImageShrink.urd</p>
  <p class="Output">Â </p>
  <p class="Output"># generate Java class files for new types from rdbÂ </p>
  <p class="Output"># Â  -B base node to look for types, in this case UCR</p>
  <p class="Output"># Â  -T type to generate Java files for</p>
  <p class="Output"># Â  -nD do not generate sources for dependent types, they are available in the Java UNO jar files</p>
  <p class="Output">#Â </p>
  <p class="Output"># javamaker creates a directory tree for the output files according to Â </p>
  <p class="Output"># the modules the given types were placed in. The tree is created in the current folder by defaultÂ </p>
  <p class="Output"><span class="CodeEmphasis">javamaker</span> -BUCR -Torg.openoffice.test.XImageShrink -nD &lt;OFFICE_PROGRAM_PATH&gt;/types.rdb thumbs.rdb</p>
  <p class="Output">Â </p>
  <p class="Output"># generate C++ header files (hpp and hdl) for new types and their dependencies from rdbÂ </p>
  <p class="Output"># Â  -B base node to look for types, in this case UCR</p>
  <p class="Output"># Â  -T type to generate Java files for</p>
  <p class="Output">#Â </p>
  <p class="Output"># cppumaker creates a directory tree for the output files according toÂ </p>
  <p class="Output"># the modules the given types were placed in. The tree is created in the current folder by defaultÂ </p>
  <p class="Output"><span class="CodeEmphasis">cppumaker</span> -BUCR -Torg.openoffice.test.XImageShrink &lt;OFFICE_PROGRAM_PATH&gt;/types.rdb thumbs.rdb</p>
  <p class="Output">Â </p>
  <p class="Paragraph">After issuing these commands you have a registry database <span class="wwwftpemail">thumbs.rdb</span> and a Java class file <span class="wwwftpemail">XImageShrink.class</span>. (In versions of OpenOffice.org prior to 2.0, <span class="wwwftpemail">javamaker</span> produced Java source files instead of class files; you therefore had to call <span class="wwwftpemail">javac</span> on the source files in an additional step.) You can run <span class="wwwftpemail">regview</span> against <span class="wwwftpemail">thumbs.rdb to</span> see what regmerge has accomplished.</p>
  <p class="Output"><span class="CODEEmphasis">regview</span> thumbs.rdb</p>
  <p class="Paragraph">The result for our interface <span class="Codeintext">XImageShrink</span> looks like this:</p>
  <p class="Output">Registry "file:///home/sdk/Thumbs/thumbs.rdb":Â </p>
  <p class="Output">Â </p>
  <p class="Output">/Â </p>
  <p class="Output">Â / UCR</p>
  <p class="Output">Â  Â / org</p>
  <p class="Output">Â  Â  Â / openoffice</p>
  <p class="Output">Â  Â  Â  Â / test</p>
  <p class="Output">Â  Â  Â  Â  Â / <span class="CODEEmphasis">XImageShrink</span> </p>
  <p class="Output">Â  Â  Â  Â  Â  Â Value: Type = RG_VALUETYPE_BINARY</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Size = 316</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Data = minor version: 0</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â major version: 1</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â type: 'interface'</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â uik: { 0x00000000-0x0000-0x0000-0x00000000-0x00000000 }</p>
  <p class="Output">Â </p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <span class="CODEEmphasis">name: 'org/openoffice/test/XImageShrink'</span> </p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â super name: 'com/sun/star/uno/XInterface'</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Doku: ""</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â IDL source file: "/home/sdk/Thumbs/XImageShrink.idl"</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â number of fields: 3</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <span class="CODEEmphasis">field #0:</span> </p>
  <p class="Output"><span class="CODEEmphasis">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â name='SourceDirectory'</span> </p>
  <p class="Output"><span class="CODEEmphasis">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â type='string'</span> </p>
  <p class="Output"><span class="CODEEmphasis">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â access=READWRITE</span> </p>
  <p class="Output">Â </p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Doku: ""</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â IDL source file: ""</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <span class="CODEEmphasis">field #1:</span> </p>
  <p class="Output"><span class="CODEEmphasis">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â name='DestinationDirectory'</span> </p>
  <p class="Output"><span class="CODEEmphasis">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â type='string'</span> </p>
  <p class="Output"><span class="CODEEmphasis">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â access=READWRITE</span> </p>
  <p class="Output">Â </p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Doku: ""</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â IDL source file: ""</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <span class="CODEEmphasis">field #2:</span> </p>
  <p class="Output"><span class="CODEEmphasis">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â name='Dimension'</span> </p>
  <p class="Output"><span class="CODEEmphasis">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â type='com/sun/star/awt/Size'</span> </p>
  <p class="Output"><span class="CODEEmphasis">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â access=READWRITE</span> </p>
  <p class="Output">Â </p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Doku: ""</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â IDL source file: ""</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â number of methods: 0</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â number of references: 0</p>
  <p class="Paragraph">Source generation can be fully automated with makefiles. For details, see the sections <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_5_9_Running_and_Debugging_Java_Components" title="see chapter 4.5.9 Writing UNO Components - Simple Component in Java - Running and Debugging Java Components">4.5.9 Writing UNO Components - Simple Component in Java - Running and Debugging Java Components</a></span> and <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_6_10_Building_and_Testing_C_2B_2B_Components" title="see chapter 4.6.10 Writing UNO Components - C++ Component - Building and Testing C++ Components">4.6.10 Writing UNO Components - C++ Component - Building and Testing C++ Components</a></span> below. You are now ready to implement your own types and interfaces in a UNO component. The next section discusses the UNO core interfaces to implement in UNO components.</p>
  <h2 class="Head2"><a name="1_3_Component_Architecture" />4.3Â Â Component Architecture</h2>
  <p class="Paragraph">UNO components are archive files or dynamic link libraries with the ability to instantiate objects which can integrate themselves into the UNO environment. For this purpose, components must contain certain static methods (Java) or export functions (C++) to be called by a UNO service manager. In the following, these methods are called component operations.</p>
  <p class="Paragraph">There must be a method to supply single-service factories for each object implemented in the component. Through this method, the service manager can get a single factory for a specific object and ask the factory to create the object contained in the component. Furthermore, there has to be a method which writes registration information about the component, which is used when a component is registered with the service manager. In C++, an additional function is necessary that informs the component loader about the compiler used to build the component.Â </p>
  <p class="Paragraph">The component operations are always necessary in components and they are language specific. Later, when Java and C++ are discussed, we will show how to write them.Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table22"><colgroup><col width="870" /></colgroup><tr><td style="text-align:left;width:19.05cm; " class="Table22A1">
      <div class="Paragraph"><div style="width: 14.342cm; " id="Frame2" class="fr3">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/ComponentOverview2.png" title="link to the full-sized graphic &quot;./ComponentOverview2.png&quot;"><img border="0" width="651" height="525" alt="Overview graphic of an UNO component" src="./4 Writing UNO Components_files/ComponentOverview2.png" class="fr4" /></a>Illustration <a name="refIllustration0">1</a>: A Component implementing three UNO objects</div>
       </div> </div>
     </td></tr></table></div>
  <p class="P5">The illustration shows a component which contains three implemented objects. Two of them, srv1 and srv2 implement a single service specification (Service1 and Service2), whereas srv3_4 supports two services at once (Service3 and Service4).Â </p>
  <p class="Paragraph">The objects implemented in a component must support a number of core UNO interfaces to be fully usable from all parts of the OpenOffice.org application. These core interfaces are discussed in the next section. The individual functionality of the objects is covered by the additional interfaces they export. Usually these interfaces are enclosed in a service specification.Â </p>
  <h2 class="Head2"><a name="1_4_Core_Interfaces_to_Implement" />4.4Â Â Core Interfaces to Implement</h2>
  <p class="Paragraph">It is important to know where the interfaces to implement are located. The interfaces here are located at the object implementations in the component. When writing UNO components, the desired methods have to be implemented into the application and also, the core interfaces used to enable communication with the UNO environment. Some of them are mandatory, but there are others to choose from.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table16"><colgroup><col width="118" /><col width="118" /><col width="118" /><col width="118" /><col width="118" /><col width="117" /></colgroup><tr class="Table161"><td style="text-align:left;width:2.575cm; " class="Table16A1">
      <p class="TableHead">InterfaceÂ </p>
     </td><td style="text-align:left;width:2.574cm; " class="Table16A1">
      <p class="TableHead">RequiredÂ </p>
     </td><td style="text-align:left;width:2.574cm; " class="Table16A1">
      <p class="TableHead">Should be implementedÂ </p>
     </td><td style="text-align:left;width:2.574cm; " class="Table16A1">
      <p class="TableHead">OptionalÂ </p>
     </td><td style="text-align:left;width:2.574cm; " class="Table16A1">
      <p class="TableHead">Special CasesÂ </p>
     </td><td style="text-align:left;width:2.572cm; " class="Table16F1">
      <p class="TableHead">Helper class available for C++ and JavaÂ </p>
     </td></tr><tr class="Table161"><td style="text-align:left;width:2.575cm; " class="Table16A2">
     <p class="TextInTable">XInterfaceÂ </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P20">âÂ </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.572cm; " class="Table16F2">
     <p class="P20">âÂ </p>
    </td></tr><tr class="Table161"><td style="text-align:left;width:2.575cm; " class="Table16A2">
     <p class="TextInTable">XTypeProviderÂ </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P20">âÂ </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.572cm; " class="Table16F2">
     <p class="P20">âÂ </p>
    </td></tr><tr class="Table161"><td style="text-align:left;width:2.575cm; " class="Table16A2">
     <p class="TextInTable">XServiceInfoÂ </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P20">âÂ </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.572cm; " class="Table16F2">
     <p class="P21">Â </p>
    </td></tr><tr class="Table161"><td style="text-align:left;width:2.575cm; " class="Table16A2">
     <p class="TextInTable">XWeakÂ </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P20">âÂ </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.572cm; " class="Table16F2">
     <p class="P20">âÂ </p>
    </td></tr><tr class="Table161"><td style="text-align:left;width:2.575cm; " class="Table16A2">
     <p class="TextInTable">XComponentÂ </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P20">âÂ </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.572cm; " class="Table16F2">
     <p class="P20">âÂ </p>
    </td></tr><tr class="Table161"><td style="text-align:left;width:2.575cm; " class="Table16A2">
     <p class="TextInTable">XInitializationÂ </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P20">âÂ </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.572cm; " class="Table16F2">
     <p class="P21">Â </p>
    </td></tr><tr class="Table161"><td style="text-align:left;width:2.575cm; " class="Table16A2">
     <p class="TextInTable">XMainÂ </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P20">âÂ </p>
    </td><td style="text-align:left;width:2.572cm; " class="Table16F2">
     <p class="P21">Â </p>
    </td></tr><tr class="Table161"><td style="text-align:left;width:2.575cm; " class="Table16A2">
     <p class="TextInTable">XAggregationÂ </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P20">âÂ </p>
    </td><td style="text-align:left;width:2.572cm; " class="Table16F2">
     <p class="P21">Â </p>
    </td></tr><tr class="Table161"><td style="text-align:left;width:2.575cm; " class="Table16A2">
     <p class="TextInTable">XUnoTunnelÂ </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P21">Â </p>
    </td><td style="text-align:left;width:2.574cm; " class="Table16A2">
     <p class="P20">âÂ </p>
    </td><td style="text-align:left;width:2.572cm; " class="Table16F2">
     <p class="P21">Â </p>
    </td></tr></table></div>
  <p class="Paragraph">The interfaces listed in the table above have been characterized here briefly. More descriptions of each interface are provided later, as well as if helpers are available and which conditions apply.Â </p>
  <p class="TitledListHead"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XInterface.html" title="see type com.sun.star.uno.XInterface">com.sun.star.uno.XInterface</a></span> </p>
  <p class="TitledListBody">The component will not work without it. The base interface <span class="Codeintext">XInterface</span> gives access to higher interfaces of the service and allows other objects to tell the service when it is no longer needed, so that it can destroy itself. </p>
  <p class="TitledListCode">// com::sun::star::uno::XInterfaceÂ </p>
  <p class="TitledListCode">Â </p>
  <p class="TitledListCode">any queryInterface( [in] type aType );Â </p>
  <p class="TitledListCode">[oneway] void acquire(); // increase reference counter in your service implementationÂ </p>
  <p class="TitledListCode">[oneway] void release(); // decrease reference counter, delete object when counter becomes zeroÂ </p>
  <p class="P22">Usually developers do not call <span class="Codeintext">acquire()</span> explicitly, because it is called automatically by the language bindings when a reference to a component is retrieved through <span class="Codeintext">UnoRuntime.queryInterface()</span> or <span class="Codeintext">Reference&lt;destInterface&gt;(sourceInterface, UNO_QUERY)</span> . The counterpart <span class="Codeintext">release()</span> is called automatically when the reference goes out of scope in C++ or when the Java garbage collector throws away the object holding the reference.</p>
  <p class="TitledListHead"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XTypeProvider.html" title="see type com.sun.star.lang.XTypeProvider">com.sun.star.lang.XTypeProvider</a></span> </p>
  <p class="TitledListBody">This interface is used by scripting languages such as OpenOffice.org Basic to get type information. OpenOffice.org Basic cannot use the component without it.Â </p>
  <p class="TitledListCode">// com::sun::star::lang::XTypeProviderÂ </p>
  <p class="TitledListCode">Â </p>
  <p class="TitledListCode">sequence&lt;type&gt; getTypes(); Â </p>
  <p class="TitledListCode">sequence&lt;byte&gt; getImplementationId(); Â </p>
  <p class="TitledListBody">It is possible that <span class="Codeintext">XTypeProvider</span> and <span class="Codeintext">XServiceInfo</span> (below) will be deprecated in the future, and that alternative, language-bindingâspecific mechanisms will be made available to query an object for its characteristics.</p>
  <p class="TitledListHead"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XServiceInfo.html" title="see type com.sun.star.lang.XServiceInfo">com.sun.star.lang.XServiceInfo</a></span> </p>
  <p class="TitledListBody">This interface is used by other objects to get information about the service implementation.Â </p>
  <p class="TitledListCode">// com::sun::star::lang::XServiceInfoÂ </p>
  <p class="TitledListCode">Â </p>
  <p class="TitledListCode">string getImplementationName(); Â </p>
  <p class="TitledListCode">boolean supportsService( [in] string ServiceName ); Â </p>
  <p class="TitledListCode">sequence&lt;string&gt; getSupportedServiceNames(); Â </p>
  <p class="TitledListHead"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XWeak.html" title="see type com.sun.star.uno.XWeak">com.sun.star.uno.XWeak</a></span> </p>
  <p class="TitledListBody">This interface allows clients to keep a weak reference to the object. A weak reference does not prevent the object from being destroyed if another client keeps a hard reference to it, therefore it allows a hard reference to be retrieved again. The technique is used to avoid cyclic references. Even if the interface is not required by you, it could be implemented for a client that may want to establish a weak reference to an instance of your object.Â </p>
  <p class="TitledListCode">// com.sun.star.uno.XWeakÂ </p>
  <p class="TitledListCode">Â </p>
  <p class="TitledListCode">com::sun::star::uno::XAdapter queryAdapter(); // creates Adapter Â </p>
  <p class="TitledListHead"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XComponent.html" title="see type com.sun.star.lang.XComponent">com.sun.star.lang.XComponent</a></span> </p>
  <p class="TitledListBody">This interface is used if cyclic references can occur in the component holding another object and the other object is holding a reference to that component. It can be specified in the service description who shall destroy the object. Â </p>
  <p class="TitledListCode">// com::sun::star::lang::XComponentÂ </p>
  <p class="TitledListCode">Â </p>
  <p class="TitledListCode">void dispose(); //an object owning your component may order it to delete itself using dispose()Â </p>
  <p class="TitledListCode">void addEventListener(com::sun::star::lang::XEventListener xListener); Â  Â  Â // add dispose listeners</p>
  <p class="TitledListCode">void removeEventListener (com::sun::star::lang::XEventListener aListener); Â // remove them</p>
  <p class="TitledListHead"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XInitialization.html" title="see type com.sun.star.lang.XInitialization">com.sun.star.lang.XInitialization</a></span> </p>
  <p class="TitledListBody">This interface is used to allow other objects to use <span class="Codeintext">createInstanceWithArguments()</span> or <span class="Codeintext">createInstanceWithArgumentsAndContext()</span> with the component. It should be implemented and the arguments processed in <span class="Codeintext">initialize()</span>:</p>
  <p class="TitledListCode">// com::sun::star::lang::XInitializationÂ </p>
  <p class="TitledListCode">Â </p>
  <p class="TitledListCode">void initialize(sequence&lt; any &gt; aArguments) raises (com::sun::star::uno::Exception); Â </p>
  <p class="TitledListHead"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XMain.html" title="see type com.sun.star.lang.XMain">com.sun.star.lang.XMain</a></span> </p>
  <p class="TitledListBody">This interface is for use with the uno executable to instantiate the component independently from the OpenOffice.org service manager.Â </p>
  <p class="TitledListCode">// com.sun.star.lang.XMainÂ </p>
  <p class="TitledListCode">Â </p>
  <p class="TitledListCode">long run (sequence&lt; string &gt; aArguments); Â </p>
  <p class="TitledListHead"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XAggregation.html" title="see type com.sun.star.uno.XAggregation">com.sun.star.uno.XAggregation</a></span> </p>
  <p class="TitledListBody">This interfaces makes the implementation cooperate in an aggregation. If implemented, other objects can aggregate to the implementation. Aggregated objects behave as if they were one. If another object aggregates the component, it holds the component and delegates calls to it, so that the component seems to be one with the aggregating object.Â </p>
  <p class="TitledListCode">// com.sun.star.uno.XAggregationÂ </p>
  <p class="TitledListCode">Â </p>
  <p class="TitledListCode">void setDelegator(com.sun.star.uno.XInterface pDelegator);Â </p>
  <p class="TitledListCode">any queryAggregation(type aType);Â </p>
  <p class="TitledListHead"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XUnoTunnel.html" title="see type com.sun.star.lang.XUnoTunnel">com.sun.star.lang.XUnoTunnel</a></span> </p>
  <p class="TitledListBody">This interface provides a pointer to the component to another component in the same process. This can be achieved with <span class="Codeintext">XUnoTunnel. XUnoTunnel</span> should not be used by new components, because it is to be used for integration of existing implementations, if all else fails.</p>
  <p class="Paragraph">By now you should be able to decide which interfaces are interesting in your case. Sometimes the decision for or against an interface depends on the necessary effort as well. The following section discusses for each of the above interfaces how you can take advantage of pre-implemented helper classes in Java or C++, and what must happen in a possible implementation, no matter which language is used.Â </p>
  <h3 class="Head3"><a name="1_4_1_XInterface" />4.4.1Â Â XInterface</h3>
  <p class="Paragraph">All service implementations must implement <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XInterface.html" title="see type com.sun.star.uno.XInterface">com.sun.star.uno.XInterface</a></span>. If a Java component is derived from a Java helper class that comes with the SDK, it supports <span class="Codeintext">XInterface</span> automatically. Otherwise, it is sufficient to add <span class="Codeintext">XInterface</span> or any other UNO interface to the <span class="Codeintext">implements</span> list. The Java UNO runtime takes care of <span class="Codeintext">XInterface</span>. In C++, there are helper classes to inherit that already implement <span class="Codeintext">XInterface</span>. However, if <span class="Codeintext">XInterface</span> is to be implemented manually, consider the code below.</p>
  <p class="P8">The IDL specification for <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XInterface.html" title="see type com.sun.star.uno.XInterface">com.sun.star.uno.XInterface</a></span> looks like this:</p>
  <p class="Code">// module com::sun::star::unoÂ </p>
  <p class="Code">interface XInterfaceÂ </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  any queryInterface( [in] type aType ); </p>
  <p class="Code">Â  Â  [oneway] void acquire(); </p>
  <p class="Code">Â  Â  [oneway] void release(); </p>
  <p class="Code">}; Â </p>
  <h4 class="Head4"><a name="1_4_1_1_Requirements_for_queryInterface_28_29" />Requirements for queryInterface()</h4>
  <p class="Paragraph">When <span class="Codeintext">queryInterface()</span> is called, the caller asks the implementation if it supports the interface specified by the type argument. The UNOIDL base type stores the name of a type and its <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/TypeClass.html" title="see type com.sun.star.uno.TypeClass">com.sun.star.uno.TypeClass</a></span>. The call must return an interface reference of the requested type if it is available or a void <span class="Codeintext">any</span> if it is not. There are certain conditions a <span class="Codeintext">queryInterface()</span> implementation must meet:</p>
  <p class="TitledListHead">Constant BehaviourÂ </p>
  <p class="TitledListBody">If <span class="Codeintext">queryInterface()</span> on a specific object has <span class="Emphasis">once</span> returned a valid interface reference for a given type, it <span class="T1">must</span> <span class="T21">always</span> return a valid reference for any subsequent <span class="Codeintext">queryInterface()</span> call for the same type on this object. A query for XInterface must always return the same reference.</p>
  <p class="TitledListBody">If <span class="Codeintext">queryInterface()</span> on a specific object has <span class="Emphasis">once</span> returned a void <span class="Codeintext">any</span> for a given type, it <span class="T1">must</span> <span class="Emphasis">always</span> return a void <span class="Codeintext">any</span> for the same type.</p>
  <p class="TitledListHead">SymmetryÂ </p>
  <p class="TitledListBody">If <span class="Codeintext">queryInterface()</span> for XBar on a reference xFoo returns a reference xBar, then <span class="Codeintext">queryInterface()</span> on reference xBar for type XFoo <span class="T1">must</span> <span class="Emphasis">return xFoo</span> or calls made on the returned reference <span class="T1">must</span> be <span class="Emphasis">equivalent to calls to xFoo</span>. </p>
  <p class="TitledListHead">Object IdentityÂ </p>
  <p class="TitledListBody">In C++, two objects are the same if their <span class="Codeintext">XInterface</span> are the same. The <span class="Codeintext">queryInterface()</span> for <span class="Codeintext">XInterface</span> will have to be called on both. In Java, check for the identity by calling the runtime function com.<span class="Codeintext">sun.star.uni.UnoRuntime.areSame()</span>.</p>
  <p class="Paragraph">The reason for this specifications is that a UNO runtime environment may choose to cache <span class="Codeintext">queryInterface()</span> calls. The rules are identical to the rules of the function <span class="Codeintext">QueryInterface()</span> in MS COM.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table14"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table14A1">
      <div class="TableContents"><img width="39" height="39" alt="Tip graphics marks a hint section in the text" src="./4 Writing UNO Components_files/tip.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table14B1">
      <p class="TipInTable">If you want to implement <span class="Codeintext">queryInterface()</span> in Java, for example, you want to export less interfaces than you implement, your class must implement the Java interface com.sun.star.uno.IQueryInterface.</p>
     </td></tr></table></div>
  <h4 class="Head4"><a name="1_4_1_2_Reference_Counting" />Reference Counting</h4>
  <p class="Paragraph">The methods <span class="Codeintext">acquire()</span> and <span class="Codeintext">release()</span> handle the lifetime of the UNO object. This is discussed in detail in chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_3_8_Lifetime_of_UNO_Objects" title="see chapter 3.3.8 Professional UNO - UNO Concepts - Lifetime of UNO Objects">3.3.8 Professional UNO - UNO Concepts - Lifetime of UNO Objects</a></span>. Acquire and release <span class="T21">must</span> be implemented in a thread-safe fashion. This is demonstrated in C++ in the section about C++ components below.</p>
  <h3 class="Head3"><a name="1_4_2_XTypeProvider" />4.4.2Â Â XTypeProvider</h3>
  <p class="Paragraph">Every UNO object should implement the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XTypeProvider.html" title="see type com.sun.star.lang.XTypeProvider">com.sun.star.lang.XTypeProvider</a></span> interface.</p>
  <p class="Paragraph">Some applications need to know which interfaces an UNO object supports, for example, the OpenOffice.org Basic engine or debugging tools, such as the InstanceInspector. The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XTypeProvider.html" title="see type com.sun.star.lang.XTypeProvider">com.sun.star.lang.XTypeProvider</a></span> interface was introduced to avoid going through all known interfaces calling <span class="Codeintext">queryInterface()</span> repetitively. The <span class="Codeintext">XTypeProvider</span> interface is implemented by Java and C++ helper classes. If the <span class="Codeintext">XTypeProvider</span> must be implemented manually, use the following methods:</p>
  <p class="Code">// module com::sun::star::langÂ </p>
  <p class="Code">interface XTypeProvider: com::sun::star::uno::XInterfaceÂ </p>
  <p class="Code">{ Â </p>
  <p class="Code">Â  Â  sequence&lt;type&gt; getTypes(); </p>
  <p class="Code">Â  Â  sequence&lt;byte&gt; getImplementationId(); </p>
  <p class="Code">}; Â </p>
  <p class="Paragraph">The sections about Java and C++ components below show examples of <span class="Codeintext">XTypeProvider</span> implementations.</p>
  <h4 class="Head4"><a name="1_4_2_1_Provided_Types" />Provided Types</h4>
  <p class="Paragraph">The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XTypeProvider.html#getTypes" title="see getTypes of type com.sun.star.lang.XTypeProvider:getTypes">com.sun.star.lang.XTypeProvider:getTypes</a>()</span> method must return a list of types for all interfaces that <span class="Codeintext">queryInterface()</span> provides. The OpenOffice.org Basic engine depends on this information to establish a list of method signatures that can be used with an object.</p>
  <h4 class="Head4"><a name="1_4_2_2_ImplementationID" />ImplementationID</h4>
  <p class="Paragraph">For caching purposes, the <span class="Codeintext">getImplementationId()</span> method has been introduced. The method must return a <span class="CODEKeyWord">byte</span> array containing an identifier for the implemented set of interfaces in this implementation class. It is important that one ID maps to one set of interfaces, but one set of interfaces can be known under multiple IDs. Every implementation class should generate a static ID.</p>
  <h3 class="Head3"><a name="1_4_3_XServiceInfo" />4.4.3Â Â XServiceInfo</h3>
  <p class="Paragraph">Every service implementation should export the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XServiceInfo.html" title="see type com.sun.star.lang.XServiceInfo">com.sun.star.lang.XServiceInfo</a></span> interface. <span class="Codeintext">XServiceInfo</span> must be implemented manually, because only the programmer knows what services the implementation supports. The sections about Java and C++ components below show examples for <span class="Codeintext">XServiceInfo</span> implementations.</p>
  <p class="P8">This is how the IDL specification for <span class="Codeintext">XServiceInfo</span> looks like:</p>
  <p class="Code">// module com::sun::star::langÂ </p>
  <p class="Code">interface XServiceInfo: com::sun::star::uno::XInterfaceÂ </p>
  <p class="Code">{ Â </p>
  <p class="Code">Â  Â  string getImplementationName(); </p>
  <p class="Code">Â  Â  boolean supportsService( [in] string ServiceName ); </p>
  <p class="Code">Â  Â  sequence&lt;string&gt; getSupportedServiceNames(); </p>
  <p class="Code">}; Â </p>
  <h4 class="Head4"><a name="1_4_3_1_Implementation_Name" />Implementation Name</h4>
  <p class="Paragraph">The method <span class="Codeintext">getImplementationName()</span> provides access to the <span class="T22">implementation name</span> of a service implementation. The implementation name uniquely identifies one implementation of service specifications in a UNO object. The name can be chosen freely by the implementation alone, because it does not appear in IDL. However, the implementation should adhere to the following naming conventions:</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table19"><colgroup><col width="106" /><col width="35" /><col width="65" /><col width="33" /><col width="67" /><col width="34" /><col width="132" /><col width="233" /></colgroup><tr><td style="text-align:left;width:2.311cm; " class="Table19A1">
     <p class="TableHead">Company prefixÂ </p>
    </td><td style="text-align:left;width:0.762cm; " class="Table19A1">
     <p class="P23">dotÂ </p>
    </td><td style="text-align:left;width:1.413cm; " class="Table19A1">
     <p class="P23">"comp"Â </p>
    </td><td style="text-align:left;width:0.728cm; " class="Table19A1">
     <p class="P23">dotÂ </p>
    </td><td style="text-align:left;width:1.462cm; " class="Table19A1">
     <p class="P23">module nameÂ </p>
    </td><td style="text-align:left;width:0.755cm; " class="Table19A1">
     <p class="P23">dotÂ </p>
    </td><td style="text-align:left;width:2.898cm; " class="Table19A1">
     <p class="P23">unique object name in moduleÂ </p>
    </td><td style="text-align:left;width:5.108cm; " class="Table19H1">
     <p class="P23"><span class="Emphasis">implemented service(s)</span> </p>
    </td></tr><tr><td style="text-align:left;width:2.311cm; " class="Table19A2">
     <p class="TextInTable">com.sun.starÂ </p>
    </td><td style="text-align:left;width:0.762cm; " class="Table19A2">
     <p class="TextInTable">.Â </p>
    </td><td style="text-align:left;width:1.413cm; " class="Table19A2">
     <p class="TextInTable">compÂ </p>
    </td><td style="text-align:left;width:0.728cm; " class="Table19A2">
     <p class="TextInTable">.Â </p>
    </td><td style="text-align:left;width:1.462cm; " class="Table19A2">
     <p class="TextInTable">formsÂ </p>
    </td><td style="text-align:left;width:0.755cm; " class="Table19A2">
     <p class="TextInTable">.Â </p>
    </td><td style="text-align:left;width:2.898cm; " class="Table19A2">
     <p class="TextInTable">ODataBaseFormÂ </p>
    </td><td style="text-align:left;width:5.108cm; " class="Table19H2">
     <p class="TextInTable"><span class="Emphasis">com.sun.star.forms.DataBaseForm</span> </p>
    </td></tr><tr><td style="text-align:left;width:2.311cm; " class="Table19A2">
     <p class="TextInTable">org.openofficeÂ </p>
    </td><td style="text-align:left;width:0.762cm; " class="Table19A2">
     <p class="TextInTable">.Â </p>
    </td><td style="text-align:left;width:1.413cm; " class="Table19A2">
     <p class="TextInTable">compÂ </p>
    </td><td style="text-align:left;width:0.728cm; " class="Table19A2">
     <p class="TextInTable">.Â </p>
    </td><td style="text-align:left;width:1.462cm; " class="Table19A2">
     <p class="TextInTable">testÂ </p>
    </td><td style="text-align:left;width:0.755cm; " class="Table19A2">
     <p class="TextInTable">.Â </p>
    </td><td style="text-align:left;width:2.898cm; " class="Table19A2">
     <p class="TextInTable">OThumbsÂ </p>
    </td><td style="text-align:left;width:5.108cm; " class="Table19H2">
     <p class="TextInTable"><span class="Emphasis">org.openoffice.test.ImageShrink<br />org.openoffice.test.ThumbnailInsert<br />...</span> </p>
    </td></tr></table></div>
  <p class="Paragraph">If an object implements one single service, it can use the service name to derive an implementation name. Implementations of several services should use a name that describes the entire object.Â </p>
  <p class="Paragraph">If a <span class="Codeintext">createInstance()</span> is called at the service manager using an <span class="Emphasis">implementation name,</span> an instance of exactly that implementation is received. An implementation name is equivalent to a class name in Java. A Java component simply returns the fully qualified class name in <span class="Codeintext">getImplementationName()</span>.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table30"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table30A1">
      <div class="TableContents"><img width="39" height="39" alt="Tip graphics marks a hint section in the text" src="./4 Writing UNO Components_files/tip.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table30B1">
      <p class="TipInTable">It is good practice to program against the specification and not against the implementation, otherwise, your application could break with future versions. OpenOffice.orgs API implementation is not supposed to be compatible, only the specification is.Â </p>
     </td></tr></table></div>
  <h4 class="Head4"><a name="1_4_3_2_Supported_Service_Names" />Supported Service Names</h4>
  <p class="Paragraph">The methods <span class="Codeintext">getSupportedServiceNames()</span> and <span class="Codeintext">supportsService()</span> deal with the availability of services in an implemented object. Note that the supported services are the services implemented in <span class="Emphasis">one class</span> that supports these services, not the services of all implementations contained in the component file. If the illustration <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#refIllustration0">1</a>: <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#refIllustration0">A Component implementing three UNO objects</a>, <span class="Codeintext">XServiceInfo</span> is exported by the implemented objects in a component, not by the component. That means, srv3_4 must support <span class="Codeintext">XServiceInfo</span> and return "Service3" and "Service4" as supported service names. </p>
  <p class="Paragraph">The service name identifies a service as it was specified in IDL. If an object is instantiated at the service manager using the service name, an object that complies to the service specification is returned. Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table18"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table18A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./4 Writing UNO Components_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table18B1">
      <p class="TipInTable">The <span class="T22">single service </span><span class="Emphasis">factories </span>returned by components that are used to create instances of an implementation through their interfaces <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XSingleComponentFactory.html" title="see type com.sun.star.lang.XSingleComponentFactory">com.sun.star.lang.XSingleComponentFactory</a></span> or <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XSingleServiceFactory.html" title="see type com.sun.star.lang.XSingleServiceFactory">com.sun.star.lang.XSingleServiceFactory</a></span> must support XServiceInfo. The single factories support this interface to allow UNO to inspect the capabilities of a certain implementation before instantiating it. You can take advantage of this feature through the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XContentEnumerationAccess.html" title="see type com.sun.star.container.XContentEnumerationAccess">com.sun.star.container.XContentEnumerationAccess</a></span> interface of a service manager.</p>
     </td></tr></table></div>
  <h3 class="Head3"><a name="1_4_4_XWeak" />4.4.4Â Â XWeak</h3>
  <p class="Paragraph">A component supporting <span class="Codeintext">XWeak</span> offers other objects to hold a reference on itself without preventing it from being destroyed when it is no longer needed. Thus, cyclic references can be avoided easily. The chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_3_8_Lifetime_of_UNO_Objects" title="see chapter 3.3.8 Professional UNO - UNO Concepts - Lifetime of UNO Objects">3.3.8 Professional UNO - UNO Concepts - Lifetime of UNO Objects</a></span> discusses this in detail. In Java, derive from the Java helper class <span class="Codeintext">com.sun.star.lib.uno.helper.WeakBase</span> to support <span class="Codeintext">XWeak</span>. If a C++ component is derived from one of the <span class="Codeintext">::cppu::Weak...ImplHelperNN</span> template classes as proposed in the section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_6_C_2B_2B_Component" title="see chapter 4.6 Writing UNO Components - C++ Component">4.6 Writing UNO Components - C++ Component</a></span>, a <span class="Codeintext">XWeak</span> support is obtained, virtually for free. For the sake of completeness, this is the <span class="Codeintext">XWeak</span> specification:</p>
  <p class="Code">// module com::sun::star::uno::XWeakÂ </p>
  <p class="Code">Â </p>
  <p class="Code">interface XWeak: com::sun::star::uno::XInterfaceÂ </p>
  <p class="Code">{ Â </p>
  <p class="Code">Â  Â  com::sun::star::uno::XAdapter queryAdapter(); </p>
  <p class="Code">};Â </p>
  <h3 class="Head3"><a name="1_4_5_XComponent" />4.4.5Â Â XComponent </h3>
  <p class="Paragraph">If the implementation holds a reference to another UNO object internally, there may be a problem of cyclic references that might prevent your component and the other object from being destroyed forever. If it is probable that the other object may hold a reference to your component, implement <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XComponent.html" title="see type com.sun.star.lang.XComponent">com.sun.star.lang.XComponent</a></span> that contains a method <span class="Codeintext">dispose()</span> . Chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_3_8_Lifetime_of_UNO_Objects" title="see chapter 3.3.8 Professional UNO - UNO Concepts - Lifetime of UNO Objects">3.3.8 Professional UNO - UNO Concepts - Lifetime of UNO Objects</a></span> discusses the intricacies of this issue.</p>
  <p class="Paragraph">Supporting <span class="Codeintext">XComponent</span> in a C++ or Java component is simple, because there are helper classes to derive from that implement <span class="Codeintext">XComponent</span>. The following code is an example if you must implement <span class="Codeintext">XComponent</span> manually.</p>
  <p class="Paragraph">The interface <span class="Codeintext">XComponent</span> specifies these operations:</p>
  <p class="Code">// module com::sun::star::langÂ </p>
  <p class="Code">Â </p>
  <p class="Code">interface XComponent: com::sun::star::uno::XInterfaceÂ </p>
  <p class="Code">{ Â </p>
  <p class="Code">Â  Â  void dispose(); </p>
  <p class="Code">Â  Â  void addEventListener( [in] XEventListener xListener ); </p>
  <p class="Code">Â  Â  void removeEventListener( [in] XEventListener aListener ); </p>
  <p class="Code">}; Â </p>
  <p class="Paragraph"><span class="Codeintext">XComponent</span> uses the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XEventListener.html" title="see type com.sun.star.lang.XEventListener">com.sun.star.lang.XEventListener</a></span>:</p>
  <p class="Code">// module com::sun::star::langÂ </p>
  <p class="Code">interface XEventListener: com::sun::star::uno::XInterfaceÂ </p>
  <p class="Code">{ Â </p>
  <p class="Code">Â  Â  void disposing( [in] com::sun::star::lang::EventObject Source ); </p>
  <p class="Code">};Â </p>
  <h4 class="Head4"><a name="1_4_5_1_Disposing_of_an_XComponent" />Disposing of an XComponent</h4>
  <p class="Paragraph">The idea behind <span class="Codeintext">XComponent</span> is that the object is instantiated by a third object that makes the third object the <span class="Emphasis">owner</span> of first object. The owner is allowed to call <span class="Codeintext">dispose()</span> . When the owner calls <span class="Codeintext">dispose()</span> at your object, it must do three things: </p>
  <ul style="margin-left:0.5cm;">
   <li class="P24" style="margin-left:2.5cm;"><p class="P24" style="margin-left:0cm;">Release all references it holds.Â </p></li>
   <li class="P24" style="margin-left:2.5cm;"><p class="P24" style="margin-left:0cm;">Inform registered XEventListeners that it is being disposed of by calling their method <span class="Codeintext">disposing().</span> </p></li>
   <li class="P24" style="margin-left:2.5cm;"><p class="P24" style="margin-left:0cm;">Behave as passive as possible afterwards. If the implementation is called after being disposed, Â throw a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/DisposedException.html" title="see type com.sun.star.lang.DisposedException">com.sun.star.lang.DisposedException</a></span> if you cannot fulfill the method specification.</p></li>
  </ul>
  <p class="Paragraph">That way the owner of <span class="Codeintext">XComponent</span> objects can dissolve a possible cyclic reference. </p>
  <h3 class="Head3"><a name="1_4_6_XInitialization" />4.4.6Â Â XInitialization </h3>
  <p class="Paragraph">The interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XInitialization.html" title="see type com.sun.star.lang.XInitialization">com.sun.star.lang.XInitialization</a></span> is usually implemented manually, because only the programmer knows how to initialize the object with arguments received from the service manager through <span class="Codeintext">createInstanceWithArguments()</span> or <span class="Codeintext">createInstanceWithArgumentsAndContext()</span> . In Java, <span class="Codeintext">XInitialization</span> is used as well, but know that the Java factory helper provides a shortcut that uses arguments without implementing <span class="Codeintext">XInitialization</span> directly. The Java factory helper can pass arguments to the class constructor under certain conditions. Refer to the section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_5_7_Create_Instance_With_Arguments" title="see chapter 4.5.7 Writing UNO Components - Simple Component in Java - Create Instance With Arguments">4.5.7 Writing UNO Components - Simple Component in Java - Create Instance With Arguments</a></span> for more information.</p>
  <p class="Paragraph">The specification for <span class="Codeintext">XInitialization</span> looks like this:</p>
  <p class="Code">// module com::sun::star::langÂ </p>
  <p class="Code">Â </p>
  <p class="Code">interface XInitialization : com::sun::star::uno::XInterface Â </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  void initialize(sequence&lt; any &gt; aArguments) raises (com::sun::star::uno::Exception); </p>
  <p class="Code">};Â </p>
  <p class="Paragraph">An old-style UNOIDL service specification will typically specify which arguments and in which order are expected within the <span class="Codeintext">any</span> sequence.</p>
  <p class="Paragraph">With the advent of new-style service specifications with explicit constructors, you can now declare explicitly what arguments can be passed to an object when creating it. The arguments listed in a constructor are exactly the arguments passed to <span class="Codeintext">XInitialization.initialize</span> (the various language bindings currently use <span class="Codeintext">XInitialization</span> internally to implement service constructors; that may change in the future, however).</p>
  <h3 class="Head3"><a name="1_4_7_XMain" />4.4.7Â Â XMain </h3>
  <p class="Paragraph">The implementation of <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XMain.html" title="see type com.sun.star.lang.XMain">com.sun.star.lang.XMain</a></span> is used for special cases. Its <span class="Codeintext">run()</span> operation is called by the <span class="Emphasis">uno</span> executable. The section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_10_The_UNO_Executable" title="see chapter 4.10 Writing UNO Components - The UNO Executable">4.10 Writing UNO Components - The UNO Executable</a></span> below discusses the use of <span class="Codeintext">XMain</span> and the <span class="Emphasis">uno</span> executable in detail.</p>
  <p class="P25">// module com::sun::star::langÂ </p>
  <p class="P25"><br />interface XMain: com::sun::star::uno::XInterface<br />{<br /> Â  Â long run( [in] sequence&lt; string &gt; aArguments ); <br />};</p>
  <h3 class="Head3"><a name="1_4_8_XAggregation" />4.4.8Â Â XAggregation </h3>
  <p class="Paragraph">A concept called <span class="T22">aggregation</span> is commonly used to plug multiple objects together to form one single object at runtime. The main interface in this context is <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XAggregation.html" title="see type com.sun.star.uno.XAggregation">com.sun.star.uno.XAggregation</a></span>. After plugging the objects together, the reference count and the <span class="Codeintext">queryInterface()</span> method is delegated from multiple <span class="T22">slave </span><span class="T23">objects</span> to one <span class="T22">master</span> object.</p>
  <p class="Paragraph">It is a precondition that at the moment of aggregation, the slave object has a reference count of exactly one, which is the reference count of the master. Additionally, it does not work on proxy objects, because in Java, multiple proxy objects of the same interface of the same slave object might exist.Â </p>
  <p class="Paragraph">While aggregation allows more code reuse than implementation inheritance, the facts mentioned above, coupled with the implementation of independent objects makes programming prone to errors. Therefore the use of this concept is discourage and not explained here. For further information visit <a href="http://replay.waybackmachine.org/20090427181406/http://udk.openoffice.org/common/man/concept/unointro.html#aggregation"><span class="wwwftpemail">http://udk.openoffice.org/common/man/concept/unointro.html#aggregation</span></a><a href="http://replay.waybackmachine.org/20090427181406/http://udk.openoffice.org/common/man/concept/unointro.html#aggregation"> </a><span class="wwwftpemail">.</span> </p>
  <h3 class="Head3"><a name="1_4_9_XUnoTunnel" />4.4.9Â Â XUnoTunnel </h3>
  <p class="Paragraph">The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XUnoTunnel.html" title="see type com.sun.star.lang.XUnoTunnel">com.sun.star.lang.XUnoTunnel</a></span> interface allows access to the <span class="Codeintext">this</span> pointer of an object. This interface is used to cast a UNO interface that is coming back to its implementation class through a UNO method. Using this interface is a result of an unsatisfactory interface design, because it indicates that some functionality only works when non-UNO functions are used. In general, these objects cannot be replaced by a different implementation, because they undermine the general UNO interface concept. This interface can be understood as admittance to an already existing code that cannot be split into UNO components easily. If designing new services, do not use this interface.</p>
  <p class="Code">interface XUnoTunnel: com::sun::star::uno::XInterfaceÂ </p>
  <p class="Code">{ Â </p>
  <p class="Code">Â  Â  hyper getSomething( [in] sequence&lt; byte &gt; aIdentifier );</p>
  <p class="Code">}; Â </p>
  <p class="Paragraph">The byte sequence contains an identifier that both the caller and implementer must know. The implementer returns the <span class="Codeintext">this</span> pointer of the object if the byte sequence is equal to the byte sequence previously stored in a static variable. The byte sequence is usually generated <span class="Emphasis">once per process</span> per implementation. </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table28"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.596cm; " class="Table28A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./4 Writing UNO Components_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.454cm; " class="Table28B1">
      <p class="TipInTable">Note that the previously mentioned 'per process' is important because the <span class="Codeintext">this</span> pointer of a class you know is useless, if the instance lives in a different process.</p>
     </td></tr></table></div>
  <h2 class="Head2"><a name="1_5_Simple_Component_in_Java" />4.5Â Â Simple Component in Java</h2>
  <p class="Paragraph">This section shows how to write Java components. The examples in this chapter are in the samples folder that was provided with the programmer's manual. Â </p>
  <p class="Paragraph">A Java component is a library of Java classes (a jar) containing objects that implement arbitrary UNO services. For a service implementation in Java, implement the necessary UNO core interfaces and the interfaces needed for <span class="Emphasis">your</span> purpose. These could be existing interfaces or interfaces defined by using UNOIDL. </p>
  <p class="Paragraph">Besides these service implementations, Java components need two methods to instantiate the services they implement in a UNO environment: one to get single factories for each service implementation in the jar, and another one to write registration information into a registry database. These methods are called <span class="Emphasis">static component operations</span> in the following:</p>
  <p class="Paragraph">The method that provides single factories for the service implementations in a component is <span class="Codeintext">__getServiceFactory()</span>:</p>
  <p class="MethodSignatures">public static XSingleServiceFactory <span class="CODEEmphasis">__getServiceFactory</span>(String implName,</p>
  <p class="MethodSignatures">Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â   Â  Â XMultiServiceFactory multiFactory,</p>
  <p class="MethodSignatures">Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â   Â  Â XRegistryKey regKey)</p>
  <p class="Paragraph">In theory, a client obtains a single factory from a component by calling <span class="Codeintext">__getServiceFactory()</span> on the component implementation directly. This is rarely done because in most cases service manager is used to get an instance of the service implementation. The service manager uses <span class="Codeintext">__getServiceFactory()</span> at the component to get a factory for the requested service from the component, then asks this factory to create an instance of the one object the factory supports.</p>
  <p class="Paragraph">To find a requested service implementation, the service manager searches its registry database for the location of the component jar that contains this implementation. For this purpose, the component must have been registered beforehand. UNO components are able to write the necessary information on their own through a function that performs the registration and which can be called by the registration tool <span class="wwwftpemail">regcomp</span>. The function has this signature:</p>
  <p class="MethodSignatures">public static boolean <span class="CodeEmphasis">__writeRegistryServiceInfo</span>(XRegistryKey regKey) </p>
  <p class="Paragraph">These two methods work together to make the implementations in a component available to a service manager. The method <span class="Codeintext">__writeRegistryServiceInfo()</span> tells the service manager where to find an implementation while <span class="Codeintext">__getServiceFactory()</span> enables the service manager to instantiate a service implementation, once found.</p>
  <p class="Paragraph">The necessary steps to write a component are:Â </p>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P26" style="margin-left:2.5cm;"><p class="P26" style="margin-left:0cm;">Define service implementation classes.Â </p></li>
   <li class="P26" style="margin-left:2.5cm;"><p class="P26" style="margin-left:0cm;">Implement UNO core interfaces.Â </p></li>
   <li class="P26" style="margin-left:2.5cm;"><p class="P26" style="margin-left:0cm;">Implement your own interfaces.Â </p></li>
   <li class="P26" style="margin-left:2.5cm;"><p class="P26" style="margin-left:0cm;">Provide static component operations to make your component available to a service manager.Â </p></li>
  </ol>
  <h3 class="Head3"><a name="1_5_1_Class_Definition_with_Helper_Classes" />4.5.1Â Â Class Definition with Helper Classes</h3>
  <h4 class="Head4"><a name="1_5_1_1_XInterface_2C_XTypeProvider_and_XWeak" />XInterface, XTypeProvider and XWeak </h4>
  <p class="Paragraph">The OpenOffice.org Java UNO environment contains Java helper classes that implement the majority of the core interfaces that are implemented by UNO components. There are two helper classes:Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P27" style="margin-left:2.5cm;"><p class="P27" style="margin-left:0cm;">The helper com.sun.star.lib.uno.helper.WeakBase is the minimal base class and implements <span class="Codeintext">XInterface</span>, <span class="Codeintext">XTypeProvider</span> and <span class="Codeintext">Xweak</span>.</p></li>
   <li class="P27" style="margin-left:2.5cm;"><p class="P27" style="margin-left:0cm;">The helper com.sun.star.lib.uno.helper.ComponentBase that extends <span class="Codeintext">WeakBase</span> and implements <span class="Codeintext">XComponent</span>.</p></li>
  </ul>
  <p class="Paragraph">The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XServiceInfo.html" title="see type com.sun.star.lang.XServiceInfo">com.sun.star.lang.XServiceInfo</a></span> is the only interface that should be implemented, but it is not part of the helpers.</p>
  <p class="Paragraph">Use the naming conventions described in section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_4_3_XServiceInfo" title="see chapter 4.4.3 Writing UNO Components - Core Interfaces to Implement - XServiceInfo">4.4.3 Writing UNO Components - Core Interfaces to Implement - XServiceInfo</a></span> for the service implementation. Following the rules, a service <span class="Codeintext">org.openoffice.test.ImageShrink</span> should be implemented in <span class="Codeintext">org.openoffice.</span> <span class="T24">comp</span> <span class="Codeintext">.test.ImageShrink</span>.</p>
  <p class="Paragraph">A possible class definition that uses <span class="Codeintext">WeakBase</span> could look like this: (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/Thumbs/org/openoffice/comp/test/ImageShrink.java" title="goto source Components/Thumbs/org/openoffice/comp/test/ImageShrink.java">Components/Thumbs/org/openoffice/comp/test/ImageShrink.java</a>)</p>
  <p class="P17">package org.openoffice.comp.test;Â </p>
  <p class="P10">Â </p>
  <p class="P10">public class ImageShrink <span class="CodeEmphasis">extends com.sun.star.lib.uno.helper.WeakBase</span> </p>
  <p class="P10"><span class="CODEEmphasis">Â  Â  Â  Â  </span>implements com.sun.star.lang.XServiceInfo,</p>
  <p class="P10">Â  Â  Â  Â  org.openoffice.test.XImageShrinkFilter Â {</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  com.sun.star.uno.XComponentContext xComponentContext = null;</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  /** Creates a new instance of ImageShrink */</p>
  <p class="P10">Â  Â  public ImageShrink(com.sun.star.uno.XComponentContext XComponentContext xContext) {</p>
  <p class="P10">Â  Â  Â  Â  this.xComponentContext = xContext;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  ...</p>
  <p class="P10">Â </p>
  <p class="P10">}Â </p>
  <h4 class="Head4"><a name="1_5_1_2_XServiceInfo" />XServiceInfo </h4>
  <p class="P8">If the implementation only supports one service, use the following code to implement XServiceInfo: (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/Thumbs/org/openoffice/comp/test/ImageShrink.java" title="goto source Components/Thumbs/org/openoffice/comp/test/ImageShrink.java">Components/Thumbs/org/openoffice/comp/test/ImageShrink.java</a>)Â </p>
  <p class="Code">Â  Â  ...</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  //XServiceInfo implementation</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  // hold the service name in a private static member variable of the class</p>
  <p class="Code">Â  Â  protected static final String __serviceName = "org.openoffice.test.ImageShrink";</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  public String <span class="CODEEmphasis">getImplementationName</span>( Â ) {</p>
  <p class="Code">Â  Â  Â  Â  return getClass().getName();</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  public boolean <span class="CODEEmphasis">supportsService</span>(String serviceName) {</p>
  <p class="Code">Â  Â  Â  Â  if ( serviceName.equals( __serviceName)) Â  Â  Â  Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  return true;</p>
  <p class="Code">Â  Â  Â  Â  return false;</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  public String[] <span class="CodeEmphasis">getSupportedServiceNames</span>( Â ) {</p>
  <p class="Code">Â  Â  Â  Â  return new String[] { __serviceName };</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  </p>
  <p class="Code">Â  Â  ...</p>
  <p class="Paragraph">An implementation of more than one service in one UNO object is more complex. It has to return all supported service names in <span class="Codeintext">getSupportedServiceNames()</span>, furthermore it must check all supported service names in <span class="Codeintext">supportsService()</span>. Note that several services packaged in one component file are not discussed here, but objects supporting more than one service. Refer to <span class="T22"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#refIllustration0">1</a></span><span class="T22"> : </span><span class="T22"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#refIllustration0">A Component implementing three UNO objects</a></span><span class="T22"> </span><span class="T23">for the implementation of srv3_4.</span> </p>
  <h3 class="Head3"><a name="1_5_2_Implementing_your_own_Interfaces" />4.5.2Â Â Implementing your own Interfaces</h3>
  <p class="Paragraph">The functionality of a component is accessible only by its interfaces. When writing a component, choose one of the available API interfaces or define an interface. UNO types are used as method arguments to other UNO objects. Java does not support unsigned integer types, so their use is discouraged. In the chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_2_Using_UNOIDL_to_Specify_new_Components" title="see chapter 4.2 Writing UNO Components - Using UNOIDL to Specify new Components">4.2 Writing UNO Components - Using UNOIDL to Specify new Components</a></span>, the <span class="Codeintext">org.openoffice.test.XImageShrinkFilter</span> interface specification was written and an interface class file was created. Its implementation is straightforward, you create a class that implements your interfaces: (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/Thumbs/org/openoffice/comp/test/ImageShrink.java" title="goto source Components/Thumbs/org/openoffice/comp/test/ImageShrink.java">Components/Thumbs/org/openoffice/comp/test/ImageShrink.java</a>)</p>
  <p class="P17">package org.openoffice.comp.test;Â </p>
  <p class="P10">Â </p>
  <p class="P10">public class ImageShrink extends com.sun.star.lib.uno.helper.WeakBaseÂ </p>
  <p class="P10"><span class="CODEEmphasis">Â  Â  Â  Â  </span>implements com.sun.star.lang.XServiceInfo,</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â org.openoffice.test.<span class="CODEEmphasis">XImageShrinkFilter </span>{</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  ...</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  String destDir = "";</p>
  <p class="P10">Â  Â  String sourceDir = "";</p>
  <p class="P10">Â  Â  boolean cancel = false;</p>
  <p class="P10">Â  Â  com.sun.star.awt.Size dimension = new com.sun.star.awt.Size();</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  // <span class="CODEEmphasis">XImageShrink implementation (a sub-interface of XImageShrinkFilter)</span> </p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  public void <span class="CodeEmphasis">cancel</span>() {</p>
  <p class="P10">Â  Â  Â  Â  cancel = true;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  </p>
  <p class="P10">Â  Â  public boolean <span class="CodeEmphasis">filter</span>(com.sun.star.beans.PropertyValue[] propertyValue) {</p>
  <p class="P10">Â  Â  Â  Â  // while cancel = false, </p>
  <p class="P10">Â  Â  Â  Â  // scale images found in sourceDir according to dimension and </p>
  <p class="P10">Â  Â  Â  Â  // write them to destDir, using the image file format given in </p>
  <p class="P10">Â  Â  Â  Â  // []propertyValue</p>
  <p class="P10">Â  Â  Â  Â  // (implementation omitted)</p>
  <p class="P10">Â  Â  Â  Â  cancel = false;</p>
  <p class="P10">Â  Â  Â  Â  return true;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  // <span class="CODEEmphasis">XIMageShrink implementation</span> Â  Â </p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  public String <span class="CodeEmphasis">getDestinationDirectory</span>() {</p>
  <p class="P10">Â  Â  Â  Â  return destDir;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  </p>
  <p class="P10">Â  Â  public com.sun.star.awt.Size <span class="CodeEmphasis">getDimension</span>() {</p>
  <p class="P10">Â  Â  Â  Â  return dimension;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  </p>
  <p class="P10">Â  Â  public String <span class="CodeEmphasis">getSourceDirectory</span>() {</p>
  <p class="P10">Â  Â  Â  Â  return sourceDir;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  </p>
  <p class="P10">Â  Â  public void <span class="CodeEmphasis">setDestinationDirectory</span>(String str) {</p>
  <p class="P10">Â  Â  Â  Â  destDir = str;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  </p>
  <p class="P10">Â  Â  public void <span class="CodeEmphasis">setDimension</span>(com.sun.star.awt.Size size) {</p>
  <p class="P10">Â  Â  Â  Â  dimension = size;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  </p>
  <p class="P10">Â  Â  public void <span class="CodeEmphasis">setSourceDirectory</span>(String str) {</p>
  <p class="P10">Â  Â  Â  Â  sourceDir = str;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  ...</p>
  <p class="P10">} Â  Â </p>
  <p class="Paragraph">For the component to run, the new interface class file must be accessible to the Java Virtual Machine. Unlike stand-alone Java applications, it is not sufficient to set the CLASSPATH environment variable. Instead, the class path is passed to the VM when it is created. Prior to OpenOffice.org1.1.0, one could modify the class path by editing the <span class="Codeintext">SystemClasspath</span> entry of the <span class="wwwftpemail">java(.ini|rc)</span> <span class="T25">which was located in the folder </span><span class="wwwftpemail"><span class="T26">&lt;officepath&gt;\user\config. </span></span><span class="wwwftpemail"><span class="T25">Another way was to use the Options dialog. To navigate to the class path settings, one had to expand the OpenOffice.org node in the tree on the left-hand side and chose </span></span><span class="wwwftpemail"><span class="wwwftpemail"><span class="T27">Security</span></span></span><span class="wwwftpemail"><span class="wwwftpemail"> </span></span><span class="wwwftpemail"><span class="T25">. On the right-hand side, there was a field called </span></span><span class="wwwftpemail"><span class="wwwftpemail"><span class="T27">User Classpath. </span></span></span></p>
  <p class="Paragraph"><span class="T28">As of OpenOffice.org1.1.0 the component</span> <span class="T28">, class files, and type library are packed into a extension, which is then registered by the </span><span class="ButtonsMenus"><span class="T29">pkgchk</span></span><span class="ButtonsMenus"><span class="ButtonsMenus"> </span></span><span class="ButtonsMenus"><span class="T28">executable. And as of OpenOffice.org1.2.0, the unopkg tool is used to to thi</span></span><span class="ButtonsMenus"> </span><span class="ButtonsMenus"><span class="T28">s. </span></span><span class="ButtonsMenus"><span class="ButtonsMenus"><span class="T28">The jar files are then automatically added to the Â class path.</span></span></span><span class="ButtonsMenus"><span class="ButtonsMenus"> </span></span></p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table29"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table29A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./4 Writing UNO Components_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table29B1">
      <p class="TipInTable">It is also important that the binary type library of the new interfaces are provided together with the component, otherwise the component is not accessible from OpenOffice.org Basic. Basic uses the UNO core reflection service to get type information at runtime. The core reflection is based on the binary type library.Â </p>
     </td></tr></table></div>
  <h3 class="Head3"><a name="1_5_3_Providing_a_Single_Factory_Using_Helper_Method" />4.5.3Â Â Providing a Single Factory Using Helper Method</h3>
  <p class="Paragraph">The component must be able to create single factories for each service implementation it contains and return them in the static component operation <span class="Codeintext">__getServiceFactory()</span>. The OpenOffice.org Java UNO environment provides a Java class <span class="Codeintext">com.sun.star.comp.loader.FactoryHelper</span> that creates a default implementation of a single factory through its method <span class="Codeintext">getServiceFactory()</span> . The following example could be written: (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/Thumbs/org/openoffice/comp/test/ImageShrink.java" title="goto source Components/Thumbs/org/openoffice/comp/test/ImageShrink.java">Components/Thumbs/org/openoffice/comp/test/ImageShrink.java</a>)</p>
  <p class="Code">package org.openoffice.comp.test;Â </p>
  <p class="Code">Â </p>
  <p class="Code">import com.sun.star.lang.XSingleServiceFactory;Â </p>
  <p class="Code">import com.sun.star.lang.XMultiServiceFactory;Â </p>
  <p class="Code">import com.sun.star.registry.XRegistryKey;Â </p>
  <p class="Code">import com.sun.star.comp.loader.FactoryHelper;Â </p>
  <p class="Code">Â </p>
  <p class="Code">public class ImageShrink ... {Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â  ...</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  // static __getServiceFactory() implementation</p>
  <p class="Code">Â  Â  // static member __serviceName was introduced above for XServiceInfo implementation Â  Â </p>
  <p class="Code">Â  Â  public static XSingleServiceFactory <span class="CODEEmphasis">__getServiceFactory</span>(String implName,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XMultiServiceFactory multiFactory,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  com.sun.star.registry.XRegistryKey regKey) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  com.sun.star.lang.XSingleServiceFactory xSingleServiceFactory = null;</p>
  <p class="Code">Â  Â  Â  Â  if (implName.equals( ImageShrink.class.getName()) )</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xSingleServiceFactory = <span class="CODEEmphasis">FactoryHelper.getServiceFactory(ImageShrink.class,</span> </p>
  <p class="Code"><span class="CODEEmphasis">Â  Â  Â  Â  Â  Â  Â  Â  Â  ImageShrink.__serviceName, multiFactory, regKey</span>);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  return xSingleServiceFactory;</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  ...</p>
  <p class="Code">Â </p>
  <p class="Code">}Â </p>
  <p class="Paragraph">The <span class="Codeintext">FactoryHelper</span> is contained in the <span class="wwwftpemail">jurt</span> jar file. The <span class="Codeintext">getServiceFactory()</span> method takes as a first argument a <span class="Codeintext">Class</span> object. When <span class="Codeintext">createInstance()</span> is called on the default factory, it creates an instance of that <span class="Codeintext">Class</span> using <span class="Codeintext">newInstance()</span> on it and retrieves the implementation name through <span class="Codeintext">getName()</span>. The second argument is the service name. The <span class="Codeintext">multiFactory</span> and <span class="Codeintext">regKey</span> arguments were received in <span class="Codeintext">__getServiceFactory()</span> and are passed to the <span class="Codeintext">FactoryHelper</span>.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table20"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.596cm; " class="Table20A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./4 Writing UNO Components_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.454cm; " class="Table20B1">
      <p class="TipInTable">In this case, the implementation name, which the default factory finds through <span class="Codeintext">Class.getName()</span> is <span class="Codeintext">org.openoffice.comp.test.ImageShrink</span> and the service name is <span class="Codeintext">org.openoffice.test.ImageShrink</span>. The implementation name and the service name are used for the separate XServiceInfo implementation within the default factory. Not only do you support the XServiceInfo interface in your service implementation, but the single factory must implement this interface as well.</p>
     </td></tr></table></div>
  <p class="Paragraph">The default factory created by the <span class="Codeintext">FactoryHelper</span> expects a public constructor in the implementation class of the service and calls it when it instantiates the service implementation. The constructor can be a default constructor, or it can take a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XComponentContext.html" title="see type com.sun.star.uno.XComponentContext">com.sun.star.uno.XComponentContext</a></span> or a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XMultiServiceFactory.html" title="see type com.sun.star.lang.XMultiServiceFactory">com.sun.star.lang.XMultiServiceFactory</a></span> as an argument. Refer to <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_5_7_Create_Instance_With_Arguments" title="see chapter 4.5.7 Writing UNO Components - Simple Component in Java - Create Instance With Arguments">4.5.7 Writing UNO Components - Simple Component in Java - Create Instance With Arguments</a></span> for other arguments that are possible.</p>
  <p class="Paragraph">Java components are housed in jar files. When a component has been registered, the registry contains the name of the jar file, so that the service manager can find it. However, because a jar file can contain several class files, the service manager must be told which one contains the <span class="Codeintext">__getServiceFactory()</span> method. That information has to be put into the jar's Manifest file, for example:</p>
  <p class="Code">RegistrationClassName: org.openoffice.comp.test.ImageShrinkÂ </p>
  <h3 class="Head3"><a name="1_5_4_Write_Registration_Info_Using_Helper_Method" />4.5.4Â Â Write Registration Info Using Helper Method</h3>
  <p class="Paragraph">UNO components have to be registered with the registry database of a service manager. In an office installation, this is the file <span class="wwwftpemail">types.rdb</span> (up through 1.1.0, <span class="wwwftpemail">applicat.rdb) </span>for all predefined services. A service manager can use this database to find the implementations for a service. For instance, if an instance of your component is created using the following call.</p>
  <p class="Code">Object imageShrink = <span class="T30">xRemoteServiceManager</span>.createInstance("org.openoffice.test.ImageShrink");</p>
  <p class="Paragraph">Using the given service or implementation name, the service manager looks up the location of the corresponding jar file in the registry and instantiates the component.Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table21"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table21A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./4 Writing UNO Components_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table21B1">
      <p class="TipInTable">If you want to use the service manager of the Java UNO runtime, com.sun.star.comp.servicemanager.ServiceManager (jurt.jar), to instantiate your service implementation, then you would have to create the service manager and add the factory for âorg.openoffice.test.ImageShrinkâ programmatically, because the Java service manager does not use the registry. Â </p>
      <p class="TipInTable">Alternatively, you can use com.sun.star.comp.helper.RegistryServiceFactory from juh.jar which is registry-based. Its drawback is that it delegates to a C++ implementation of the service manager through the java-bridge.Â </p>
     </td></tr></table></div>
  <p class="Paragraph">During the registration, a component writes the necessary information into the registry. The process to write the information is triggered externally when a client calls the <span class="Codeintext">__writeRegistryServiceInfo()</span> method at the component.</p>
  <p class="Code">public static boolean __writeRegistryServiceInfo(XRegistryKey regKey)Â </p>
  <p class="Paragraph">The caller passes an <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/registry/XRegistryKey.html" title="see type com.sun.star.registry.XRegistryKey">com.sun.star.registry.XRegistryKey</a></span> interface that is used by the method to write the registry entries. Again, the FactoryHelper class offers a way to implement the method: (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/Thumbs/org/openoffice/comp/test/ImageShrink.java" title="goto source Components/Thumbs/org/openoffice/comp/test/ImageShrink.java">Components/Thumbs/org/openoffice/comp/test/ImageShrink.java</a>)</p>
  <p class="Code">Â  Â  ...</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  // static __writeRegistryServiceInfo implementation</p>
  <p class="Code">Â  Â  public static boolean <span class="CodeEmphasis">__writeRegistryServiceInfo</span>(XRegistryKey regKey) {</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  return FactoryHelper.<span class="CodeEmphasis">writeRegistryServiceInfo( ImageShrink.class.getName(),</span> </p>
  <p class="Code"><span class="CodeEmphasis">Â  Â  Â  Â  Â  Â  __serviceName, regKey);</span> </p>
  <p class="Code">Â  Â  } Â  Â </p>
  <p class="Paragraph">The writeRegistryServiceInfo method takes three arguments:Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P28" style="margin-left:2.5cm;"><p class="P28" style="margin-left:0cm;">implementation nameÂ </p></li>
   <li class="P28" style="margin-left:2.5cm;"><p class="P28" style="margin-left:0cm;">service name Â </p></li>
   <li class="P28" style="margin-left:2.5cm;"><p class="P28" style="margin-left:0cm;">XRegistryKeyÂ </p></li>
  </ul>
  <p class="Paragraph">Use tools, such as <span class="wwwftpemail">regcomp</span> or the Java application <span class="wwwftpemail">com.sun.star.tools.uno.RegComp</span> to register a component. These tools take the path to the jar file containing the component as an argument. Since the jar can contain several classes, the class that implements the <span class="Codeintext">__writeRegistryServiceInfo()</span> method must be pointed out by means of the manifest. Again, the <span class="Codeintext">RegistrationClassName</span> entry determines the correct class. For example:</p>
  <p class="Code">RegistrationClassName: org.openoffice.comp.test.ImageShrinkÂ </p>
  <p class="Paragraph">The above entry is also necessary to locate the class that provides <span class="Codeintext">__getServiceFactory(),</span> therefore the functions <span class="Codeintext">__writeRegistryServiceInfo()</span> and <span class="Codeintext">__getServiceFactory()</span> have to be in the same class.</p>
  <h3 class="Head3"><a name="1_5_5_Implementing_without_Helpers" />4.5.5Â Â Implementing without Helpers</h3>
  <h4 class="Head4"><a name="1_5_5_1_XInterface" />XInterface </h4>
  <p class="Paragraph">As soon as the component implements any UNO interface, <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XInterface.html" title="see type com.sun.star.uno.XInterface">com.sun.star.uno.XInterface</a></span> is included automatically. The Java interface definition generated by <span class="wwwftpemail">javamaker</span> for <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XInterface.html" title="see type com.sun.star.uno.XInterface">com.sun.star.uno.XInterface</a></span> only contains a <span class="Codeintext">TypeInfo</span> member used by Java UNO internally to store certain UNO type information:</p>
  <p class="Code">// source file com/sun/star/uno/XInterface.java gcorresponding to the class generated byÂ </p>
  <p class="Code">Â </p>
  <p class="Code">package com.sun.star.uno;Â </p>
  <p class="Code">Â </p>
  <p class="Code">public interface XInterfaceÂ </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  // static Member</p>
  <p class="Code">Â  Â  public static final com.sun.star.lib.uno.typeinfo.TypeInfo UNOTYPEINFO[] = null;</p>
  <p class="Code">}Â </p>
  <p class="Paragraph">Note that <span class="Codeintext">XInterface</span> does not have any methods, in contrast to its IDL description. That means, if <span class="Codeintext">implements com.sun.star.uno.XInterface</span> is added to a class definition, there is nothing to implement. </p>
  <p class="Paragraph">The method <span class="Codeintext">queryInterface()</span> is unnecessary in the implementation of a UNO object, because the Java UNO runtime environment obtains interface references without support from the UNO objects themselves. Within Java, the method <span class="Codeintext">UnoRuntime.queryInterface()</span> is used to obtain interfaces instead of calling <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XInterface.html#queryInterface" title="see queryInterface of type com.sun.star.uno.XInterface:queryInterface">com.sun.star.uno.XInterface:queryInterface</a>()</span>, and the Java UNO language binding hands out interfaces for UNO objects to other processes on its own as well.</p>
  <p class="Paragraph">The methods <span class="Codeintext">acquire()</span> and <span class="Codeintext">release()</span> are used for reference counting and control the lifetime of an object, because the Java garbage collector does this, there is no reference counting in Java components.</p>
  <h4 class="Head4"><a name="1_5_5_2_XTypeProvider" />XTypeProvider </h4>
  <p class="Paragraph">Helper classes with default <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XTypeProvider.html" title="see type com.sun.star.lang.XTypeProvider">com.sun.star.lang.XTypeProvider</a></span> implementations are still under development for Java. Meanwhile, every Java UNO object implementation can implement the <span class="Codeintext">XTypeProvider</span> interface as shown in the following code. In your implementation, adjust <span class="Codeintext">getTypes()</span>: (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/Thumbs/org/openoffice/comp/test/ImageShrink.java" title="goto source Components/Thumbs/org/openoffice/comp/test/ImageShrink.java">Components/Thumbs/org/openoffice/comp/test/ImageShrink.java</a>)</p>
  <p class="P6">Â  Â  ...</p>
  <p class="P9">Â </p>
  <p class="P9">Â  Â  // XTypeProvider implementation</p>
  <p class="P9">Â </p>
  <p class="P9">Â  Â  // maintain a static implementation id for all instances of ImageShrink</p>
  <p class="P9">Â  Â  // initialized by the first call to getImplementationId()</p>
  <p class="P9">Â  Â  protected static byte[] _implementationId;</p>
  <p class="P9">Â </p>
  <p class="P9">Â  Â  public com.sun.star.uno.Type[] <span class="CODEEmphasis">getTypes</span>() {</p>
  <p class="P9">Â </p>
  <p class="P9">Â  Â  Â  Â  // instantiate Type instances for each interface you support and place them in a Type[] array</p>
  <p class="P9">Â  Â  Â  Â  // (this object supports XServiceInfo, XTypeProvider, and XImageShrinkFilter)</p>
  <p class="P9">Â  Â  Â  Â  return new com.sun.star.uno.Type[] {</p>
  <p class="P9">Â  Â  Â  Â  Â  Â  new com.sun.star.uno.Type(com.sun.star.lang.XServiceInfo.class),</p>
  <p class="P9">Â  Â  Â  Â  Â  Â  new com.sun.star.uno.Type(com.sun.star.lang.XTypeProvider.class),</p>
  <p class="P9">Â  Â  Â  Â  Â  Â  new com.sun.star.uno.Type(org.openoffice.test.XImageShrinkFilter.class) };</p>
  <p class="P9">Â  Â  }</p>
  <p class="P17">Â </p>
  <p class="P9">Â  Â  synchronized public byte[] <span class="CODEEmphasis">getImplementationId</span>() {</p>
  <p class="P9">Â  Â  Â  Â  if (_implementationId == null) {</p>
  <p class="P9">Â  Â  Â  Â  Â  Â  _implementationId= new byte[16];</p>
  <p class="P9">Â  Â  Â  Â  Â  Â  int hash = hashCode(); Â // hashCode of this object</p>
  <p class="P9">Â  Â  Â  Â  Â  Â  _implementationId[0] = (byte)(hash &amp; 0xff);</p>
  <p class="P9">Â  Â  Â  Â  Â  Â  _implementationId[1] = (byte)((hash &gt;&gt;&gt; 8) &amp; 0xff);</p>
  <p class="P9">Â  Â  Â  Â  Â  Â  _implementationId[2] = (byte)((hash &gt;&gt;&gt; 16) &amp; 0xff);</p>
  <p class="P9">Â  Â  Â  Â  Â  Â  _implementationId[3] = (byte)((hash &gt;&gt;&gt;24) &amp; 0xff);</p>
  <p class="P9">Â  Â  Â  Â  }</p>
  <p class="P9">Â  Â  Â  Â  return _implementationId;</p>
  <p class="P9">Â  Â  }</p>
  <p class="P9">Â </p>
  <p class="P9">Â  Â  ...</p>
  <p class="Paragraph">The suggested implementation of the <span class="Codeintext">getImplementationId()</span> method is not optimal, it uses the <span class="Codeintext">hashCode()</span> of the first instance that initializes the static field. The future UNO helper class will improve this.</p>
  <h4 class="Head4"><a name="1_5_5_3_XComponent" />XComponent </h4>
  <p class="Paragraph"><span class="Codeintext">XComponent</span> is an optional interface that is useful when other objects hold references to the Â component. The notification mechanism of <span class="Codeintext">XComponent</span> enables listener objects to learn when the component stops to provide its services, so that the objects drop their references to the component. This enables the component to delete itself when its reference count drops to zero. From section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_4_Core_Interfaces_to_Implement" title="see chapter 4.4 Writing UNO Components - Core Interfaces to Implement">4.4 Writing UNO Components - Core Interfaces to Implement</a></span>, there must be three things done when <span class="Codeintext">dispose()</span> is called at an XComponent:</p>
  <ul style="margin-left:0.5cm;">
   <li class="P24" style="margin-left:2.5cm;"><p class="P24" style="margin-left:0cm;">Inform registered <span class="Codeintext">XEventListener</span> s that the object is being disposed of by calling their method <span class="Codeintext">disposing()</span>.</p></li>
   <li class="P24" style="margin-left:2.5cm;"><p class="P24" style="margin-left:0cm;">Release all references the object holds, including all <span class="Codeintext">XEvenListener</span> objects.</p></li>
   <li class="P24" style="margin-left:2.5cm;"><p class="P24" style="margin-left:0cm;">On further calls to the component, throw an <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/DisposedException.html" title="see type com.sun.star.lang.DisposedException">com.sun.star.lang.DisposedException</a></span> in case the required task can not be fulfilled anymore, because the component was disposed.</p></li>
  </ul>
  <p class="Paragraph">In Java, the object cannot be deleted, but the garbage collector will do this. It is sufficient to release all references that are currently being held to break the cyclic reference, and to call <span class="Codeintext">disposing()</span> on all <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XEventListener.html" title="see type com.sun.star.lang.XEventListener">com.sun.star.lang.XEventListener</a>s</span>.</p>
  <p class="Paragraph">The registration and removal of listener interfaces is a standard procedure in Java. Some IDEs even create the necessary methods automatically. The following example could be written: (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/Thumbs/org/openoffice/comp/test/ImageShrink.java" title="goto source Components/Thumbs/org/openoffice/comp/test/ImageShrink.java">Components/Thumbs/org/openoffice/comp/test/ImageShrink.java</a>)Â </p>
  <p class="Code">Â  Â  ...</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  //XComponent implementation</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  // hold a list of eventListeners</p>
  <p class="Code">Â  Â  private java.util.ArrayList eventListeners = new java.util.ArrayList();</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  public void dispose {</p>
  <p class="Code">Â  Â  Â  Â  java.util.ArrayList listeners;</p>
  <p class="Code">Â  Â  Â  Â  synchronized (this) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  listeners = eventListeners;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  eventListeners = null;</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  for (java.util.Iterator i = listeners.iterator(); i.hasNext();) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  fireDisposing((XEventListener) i.next());</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  releaseReferences();</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  public void addEventListener(XEventListener listener) {</p>
  <p class="Code">Â  Â  Â  Â  bool fire = false;</p>
  <p class="Code">Â  Â  Â  Â  synchronized (this) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (eventListeners == null) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  fire = true;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  } else {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  eventListeners.add(listener);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  if (fire) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  fireDisposing(listener);</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  public synchronized void removeEventListener(XEventListener listener) {</p>
  <p class="Code">Â  Â  Â  Â  if (eventListeners != null) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  int i = eventListeners.indexOf(listener);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (i &gt;= 0) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  eventListeners.remove(i);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  private void fireDisposing(XEventListener listener) {</p>
  <p class="Code">Â  Â  Â  Â  com.sun.star.uno.EventObject event = new com.sun.star.uno.EventObject(this);</p>
  <p class="Code">Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  listener.disposing(event);</p>
  <p class="Code">Â  Â  Â  Â  } catch (com.sun.star.uno.DisposedException e) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // it is not an error if some listener is disposed simultaneously</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  private void releaseReferences() {</p>
  <p class="Code">Â  Â  Â  Â  xComponentContext = null;</p>
  <p class="Code">Â  Â  Â  Â  // ...</p>
  <p class="Code">Â  Â  }</p>
  <h3 class="Head3"><a name="1_5_6_Storing_the_Service_Manager_for_Further_Use" />4.5.6Â Â Storing the Service Manager for Further Use</h3>
  <p class="Paragraph">A component usually runs in the office process. There is no need to create an interprocess channel explicitly. A component does not have to create a service manager, because it is provided to the single factory of an implementation by the service manager during a call to <span class="Codeintext">createInstance()</span> or <span class="Codeintext">createInstanceWithContext()</span>. The single factory receives an <span class="Codeintext">XComponentContext</span> or an <span class="Codeintext">XMultiServiceFactory,</span> and passes it to the corresponding constructor of the service implementation. From the component context, the implementation gets the service manager using <span class="Codeintext">getServiceManager() </span>at the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XComponentContext.html" title="see type com.sun.star.uno.XComponentContext">com.sun.star.uno.XComponentContext</a></span> interface<span class="Codeintext">.</span> </p>
  <h3 class="Head3"><a name="1_5_7_Create_Instance_with_Arguments" />4.5.7Â Â Create Instance with Arguments</h3>
  <p class="Paragraph">A factory can create an instance of components and pass additional arguments. To do that, a client calls the <span class="Codeintext">createInstanceWithArguments()</span> function of the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XSingleServiceFactory.html" title="see type com.sun.star.lang.XSingleServiceFactory">com.sun.star.lang.XSingleServiceFactory</a></span> interface or the <span class="Codeintext">createInstanceWithArgumentsAndContext()</span> of the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XSingleComponentFactory.html" title="see type com.sun.star.lang.XSingleComponentFactory">com.sun.star.lang.XSingleComponentFactory</a></span> interface.</p>
  <p class="Code">//javamaker generated interfaceÂ </p>
  <p class="Code">//XSingleServiceFactory interface Â </p>
  <p class="Code">public java.lang.Object createInstanceWithArguments(java.lang.Object[] aArguments) Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throws com.sun.star.uno.Exception;</p>
  <p class="Code">Â </p>
  <p class="Code">//XSingleComponentFactoryÂ </p>
  <p class="Code">public java.lang.Object createInstanceWithArgumentsAndContext(java.lang.Object[] Arguments,Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.uno.XComponentContext Context)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throws com.sun.star.uno.Exception;</p>
  <p class="Paragraph">Both functions take an array of values as an argument. A component implements the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XInitialization.html" title="see type com.sun.star.lang.XInitialization">com.sun.star.lang.XInitialization</a></span> interface to receive the values. A factory passes the array on to the single method <span class="Codeintext">initialize()</span> supported by XInitialization.</p>
  <p class="Code">public void initialize(java.lang.Object[] aArguments) throws com.sun.star.uno.Exception;Â </p>
  <p class="Paragraph">Alternatively, a component may also receive these arguments in its constructor. If a factory is written, determine exactly which arguments are provided by the factory when it instantiates the component. When using the <span class="Codeintext">FactoryHelper</span>, implement the constructors with the following arguments:</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table1"><colgroup><col width="295" /><col width="273" /><col width="186" /></colgroup><tr><td style="text-align:left;width:6.458cm; " class="Table1A1">
      <p class="TableHead">First ArgumentÂ </p>
     </td><td style="text-align:left;width:5.987cm; " class="Table1A1">
      <p class="TableHead">Second ArgumentÂ </p>
     </td><td style="text-align:left;width:4.066cm; " class="Table1C1">
      <p class="TableHead">Third ArgumentÂ </p>
     </td></tr><tr><td style="text-align:left;width:6.458cm; " class="Table1A2">
     <p class="TextInTable">com.sun.star.uno.XComponentContextÂ </p>
    </td><td style="text-align:left;width:5.987cm; " class="Table1A2">
     <p class="TextInTable">com.sun.star.registry.XRegistryKeyÂ </p>
    </td><td style="text-align:left;width:4.066cm; " class="Table1C2">
     <p class="TextInTable">java.lang.Object[]Â </p>
    </td></tr><tr><td style="text-align:left;width:6.458cm; " class="Table1A2">
     <p class="TextInTable">com.sun.star.uno.XComponentContextÂ </p>
    </td><td style="text-align:left;width:5.987cm; " class="Table1A2">
     <p class="TextInTable">com.sun.star.registry.XRegistryKeyÂ </p>
    </td><td style="text-align:left;width:4.066cm; " class="Table1C2">
     <p class="TextInTable">Â </p>
    </td></tr><tr><td style="text-align:left;width:6.458cm; " class="Table1A2">
     <p class="TextInTable">com.sun.star.uno.XComponentContextÂ </p>
    </td><td style="text-align:left;width:5.987cm; " class="Table1A2">
     <p class="TextInTable">java.lang.Object[]Â </p>
    </td><td style="text-align:left;width:4.066cm; " class="Table1C2">
     <p class="TextInTable">Â </p>
    </td></tr><tr><td style="text-align:left;width:6.458cm; " class="Table1A2">
     <p class="TextInTable">com.sun.star.uno.XComponentContextÂ </p>
    </td><td style="text-align:left;width:5.987cm; " class="Table1A2">
     <p class="TextInTable">Â </p>
    </td><td style="text-align:left;width:4.066cm; " class="Table1C2">
     <p class="TextInTable">Â </p>
    </td></tr><tr><td style="text-align:left;width:6.458cm; " class="Table1A2">
     <p class="TextInTable">java.lang.Object[]Â </p>
    </td><td style="text-align:left;width:5.987cm; " class="Table1A2">
     <p class="TextInTable">Â </p>
    </td><td style="text-align:left;width:4.066cm; " class="Table1C2">
     <p class="TextInTable">Â </p>
    </td></tr></table></div>
  <p class="P29">The <span class="Codeintext">FactoryHelper</span> automatically passes the array of arguments it received from the <span class="Codeintext">createInstanceWithArguments[AndContext]()</span> call to the appropriate constructor. Therefore, it is not always necessary to implement <span class="Codeintext">XInitialization</span> to use arguments.</p>
  <h3 class="Head3"><a name="1_5_8_Possible_Structures_for_Java_Components" />4.5.8Â Â Possible Structures for Java Components</h3>
  <p class="Paragraph">The implementation of a component depends on the needs of the implementer. The following examples show some possible ways to assemble a component. There can be one implemented object or several implemented objects per component file.Â </p>
  <h4 class="Head4"><a name="1_5_8_1_One_Implementation_per_Component_File" />One Implementation per Component File</h4>
  <p class="Paragraph">There are additional options if implementing one service per component file:Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P30" style="margin-left:2.5cm;"><p class="P30" style="margin-left:0cm;">Use a flat structure with the static component operations added to the service implementation class directly.Â </p></li>
   <li class="P30" style="margin-left:2.5cm;"><p class="P30" style="margin-left:0cm;">Reserve the class with the implementation name for the static component operation and use an inner class to implement the service.Â </p></li>
  </ul>
  <h5 class="Head5"><a name="1_5_8_1_1_Implementation_Class_with_Component_Operations" />Implementation Class with Component Operations</h5>
  <p class="Paragraph">An implementation class contains the static component operations. The following sample implements an interface <span class="Codeintext">com.sun.star.test.XSomething</span> in an implementation class <span class="Codeintext">JavaComp.TestComponent:</span> </p>
  <p class="Code">// UNOIDL: interface example specificationÂ </p>
  <p class="Code">module com { Â module sun { Â module star { Â module test { Â </p>
  <p class="Code">Â </p>
  <p class="Code">interface XSomething: com::sun::star::uno::XInterfaceÂ </p>
  <p class="Code">{ Â </p>
  <p class="Code">Â  Â  string methodOne([in]string val);</p>
  <p class="Code">}; Â </p>
  <p class="Code">}; }; }; }; Â </p>
  <p class="Paragraph">A component that implements only one service supporting <span class="Codeintext">XSomething</span> can be assembled in one class as follows: </p>
  <p class="P17">package JavaComp;Â </p>
  <p class="P10">Â </p>
  <p class="P10">...Â </p>
  <p class="P10">Â </p>
  <p class="P10">public class <span class="CodeEmphasis">TestComponent</span> implements XSomething, XTypeProvider, XServiceInfo {</p>
  <p class="P10">Â  </p>
  <p class="P10">Â  Â  public static final String <span class="CodeEmphasis">__serviceName="com.sun.star.test.JavaTestComponent";</span> </p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  public static XSingleServiceFactory __getServiceFactory(String implName,</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XMultiServiceFactory multiFactory, XRegistryKey regKey) {</p>
  <p class="P10">Â  Â  XSingleServiceFactory xSingleServiceFactory = null;</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  if (implName.equals( TestComponent.class.getName()) )</p>
  <p class="P10">Â  Â  Â  Â  xSingleServiceFactory = FactoryHelper.getServiceFactory( TestComponent.class,</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  TestComponent.__serviceName, multiFactory, regKey); Â  Â  Â  Â </p>
  <p class="P10">Â  Â  Â  Â  return xSingleServiceFactory;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  </p>
  <p class="P10">Â  Â  public static boolean __writeRegistryServiceInfo(XRegistryKey regKey){</p>
  <p class="P10">Â  Â  Â  Â  return FactoryHelper.writeRegistryServiceInfo( TestComponent.class.getName(),</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  TestComponent.__serviceName, regKey);</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  // XSomething</p>
  <p class="P10">Â  Â  string <span class="CODEEmphasis">methodOne</span>(String val) {</p>
  <p class="P10">Â  Â  Â  Â  return val;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  //XTypeProvider</p>
  <p class="P10">Â  Â  public com.sun.star.uno.Type[] getTypes( Â ) {</p>
  <p class="P10">Â  Â  Â  Â  ...</p>
  <p class="P10">Â  Â  } Â  Â </p>
  <p class="P10">Â  Â  // XTypeProvider</p>
  <p class="P10">Â  Â  public byte[] getImplementationId( Â ) {</p>
  <p class="P10">Â  Â  Â  Â  ...</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  //XServiceInfo</p>
  <p class="P10">Â  Â  public String getImplementationName( Â ) {</p>
  <p class="P10">Â  Â  Â  Â  ...</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  // XServiceInfo</p>
  <p class="P10">Â  Â  public boolean supportsService( /*IN*/String serviceName ) {</p>
  <p class="P10">Â  Â  Â  Â  ...</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  //XServiceInfo</p>
  <p class="P10">Â  Â  public String[] getSupportedServiceNames( Â ) {</p>
  <p class="P10">Â  Â  Â  Â  ...</p>
  <p class="P10">Â  Â  } </p>
  <p class="P10">}Â </p>
  <p class="Paragraph">The class implements the <span class="Codeintext">XSomething</span> interface. The IDL description and documentation provides information about its functionality. The class also contains the functions for factory creation and registration, therefore the manifest entry must read as follows:</p>
  <p class="Code">RegistrationClassName: JavaComp.TestComponentÂ </p>
  <h5 class="Head5"><a name="1_5_8_1_2_Implementation_Class_with_Component_Operations_and_Inner_Implementation_Class" />Implementation Class with Component Operations and Inner Implementation Class</h5>
  <p class="Paragraph">To implement the component as inner class of the one that provides the service factory through <span class="Codeintext">__getServiceFactory()</span>,it must be a <span class="Emphasis">static</span> inner class, otherwise the factory provided by the <span class="Codeintext">FactoryHelper</span> cannot create the component. An example for an inner implementation class is located in the sample com.sun.star.comp.demo.DemoComponent.java provided with the SDK. The implementation of <span class="Codeintext">__getServiceFactory()</span> and <span class="Codeintext">__writeRegistryServiceInfo()</span> is omitted here, because they act the same as in the implementation class with component operations above.</p>
  <p class="P31">package com.sun.star.comp.demo;Â </p>
  <p class="P32">Â </p>
  <p class="P32">public class <span class="CODEEmphasis">DemoComponent</span> {</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  ...</p>
  <p class="P10">Â  Â  // static inner class implements service com.sun.star.demo.DemoComponent</p>
  <p class="P10">Â  Â  static public class <span class="CODEEmphasis">_Implementation implements XTypeProvider, </span></p>
  <p class="P10"><span class="CODEEmphasis">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XServiceInfo, XInitialization, XWindowListener, </span></p>
  <p class="P10"><span class="CODEEmphasis">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XActionListener, XTopWindowListener</span> {</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  Â  Â  static private final String __serviceName = "com.sun.star.demo.DemoComponent";</p>
  <p class="P10">Â  Â  Â  Â  private XMultiServiceFactory _xMultiServiceFactory;</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  Â  Â  // Constructor</p>
  <p class="P10">Â  Â  Â  Â  public _Implementation(XMultiServiceFactory xMultiServiceFactory) {</p>
  <p class="P10">Â  Â  Â  Â  }</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  // static method to get a single factory creating the given service from the factory helper</p>
  <p class="P10">Â  Â  public static XSingleServiceFactory __getServiceFactory(String implName,</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XMultiServiceFactory multiFactory, </p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XRegistryKey regKey) {</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  ...</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  Â  Â   </p>
  <p class="P10">Â  Â  // static method to write the service information into the given registry key</p>
  <p class="P10">Â  Â  public static boolean __writeRegistryServiceInfo(XRegistryKey regKey) {</p>
  <p class="P10">Â  Â  Â  Â  ...</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P17">}Â </p>
  <p class="P8">The manifest entry for this implementation structure again has to point to the class with the static component operations:Â </p>
  <p class="Code">RegistrationClassName: com.sun.star.comp.demo.DemoComponentÂ </p>
  <h4 class="Head4"><a name="1_5_8_2_Multiple_Implementations_per_Component_File" />Multiple Implementations per Component File</h4>
  <p class="Paragraph">To assemble several service implementations in one component file, implement each service in its own class and add a separate class containing the static component operations. The following code sample features two services: <span class="Codeintext">TestComponentA</span> and <span class="Codeintext">TestComponentB</span> implementing the interfaces <span class="Codeintext">XSomethingA</span> and <span class="Codeintext">XSomethingB</span> with a separate static class <span class="Codeintext">TestServiceProvider</span> containing the component operations.</p>
  <p class="Paragraph">The following are the UNOIDL specifications for <span class="Codeintext">XSomethingA</span> and <span class="Codeintext">XSomethingB</span>:</p>
  <p class="P10">module com { Â module sun { Â module star { Â module test {</p>
  <p class="P10">interface XSomethingA: com::sun::star::uno::XInterfaceÂ </p>
  <p class="P10">{ Â </p>
  <p class="P10">Â  Â  string methodOne([in]string value);</p>
  <p class="P10">}; Â </p>
  <p class="P10">}; }; }; }; Â </p>
  <p class="P33">Â </p>
  <p class="P10">module com { Â module sun { Â module star { Â module test {</p>
  <p class="P10">interface XSomethingB: com::sun::star::uno::XInterfaceÂ </p>
  <p class="P10">{ Â </p>
  <p class="P10">Â  Â  string methodTwo([in]string value);</p>
  <p class="P10">}; Â </p>
  <p class="P10">}; }; }; }; Â </p>
  <p class="Paragraph"><span class="Codeintext">TestComponentA</span> implements <span class="Codeintext">XSomethingA</span>: (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/JavaComponent/TestComponentA.java" title="goto source Components/JavaComponent/TestComponentA.java">Components/JavaComponent/TestComponentA.java</a>):</p>
  <p class="P17">package JavaComp;Â </p>
  <p class="P10">Â </p>
  <p class="P10">public class <span class="CodeEmphasis">TestComponentA</span> implements XTypeProvider, XServiceInfo, <span class="CodeEmphasis">XSomethingA</span> {</p>
  <p class="P10">Â  Â  static final String <span class="CodeEmphasis">__serviceName= "JavaTestComponentA";</span> </p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  static byte[] _implementationId;</p>
  <p class="P10">Â  Â  Â  Â   </p>
  <p class="P10">Â  Â  public <span class="CodeEmphasis">TestComponentA</span>() {</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  // XSomethingA</p>
  <p class="P10">Â  Â  public String <span class="CODEEmphasis">methodOne</span>(String val) {</p>
  <p class="P10">Â  Â  Â  Â  return val;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  //XTypeProvider</p>
  <p class="P10">Â  Â  public com.sun.star.uno.Type[] getTypes( Â ) {</p>
  <p class="P10">Â  Â  Â  Â  Type[] retValue= new Type[3];</p>
  <p class="P10">Â  Â  Â  Â  retValue[0]= new Type( XServiceInfo.class);</p>
  <p class="P10">Â  Â  Â  Â  retValue[1]= new Type( XTypeProvider.class);</p>
  <p class="P10">Â  Â  Â  Â  retValue[2]= new Type( <span class="CODEEmphasis">XSomethingA</span>.class);</p>
  <p class="P10">Â  Â  Â  Â  return retValue;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  //XTypeProvider</p>
  <p class="P10">Â  Â  synchronized public byte[] getImplementationId( Â ) {</p>
  <p class="P10">Â  Â  Â  Â  if (_implementationId == null) {</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  _implementationId= new byte[16];</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  int hash = hashCode();</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  _implementationId[0] = (byte)(hash &amp; 0xff);</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  _implementationId[1] = (byte)((hash &gt;&gt;&gt; 8) &amp; 0xff);</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  _implementationId[2] = (byte)((hash &gt;&gt;&gt; 16) &amp; 0xff);</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  _implementationId[3] = (byte)((hash &gt;&gt;&gt;24) &amp; 0xff);</p>
  <p class="P10">Â  Â  Â  Â  }</p>
  <p class="P10">Â  Â  Â  Â  return _implementationId;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  //XServiceInfo</p>
  <p class="P10">Â  Â  public String getImplementationName( Â ) {</p>
  <p class="P10">Â  Â  Â  Â  return getClass().getName();</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  // XServiceInfo</p>
  <p class="P10">Â  Â  public boolean supportsService( /*IN*/String serviceName ) {</p>
  <p class="P10">Â  Â  Â  Â  if ( serviceName.equals( __serviceName)) Â  Â  Â  Â </p>
  <p class="P10">Â  Â  Â  Â  Â  Â  return true;</p>
  <p class="P10">Â  Â  Â  Â  return false;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  //XServiceInfo</p>
  <p class="P10">Â  Â  public String[] getSupportedServiceNames( Â ) {</p>
  <p class="P10">Â  Â  Â  Â  String[] retValue= new String[0];</p>
  <p class="P10">Â  Â  Â  Â  retValue[0]= __serviceName;</p>
  <p class="P10">Â  Â  Â  Â  return retValue;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">}Â </p>
  <p class="P10">Â </p>
  <p class="Paragraph"><span class="Codeintext">TestComponentB</span> implements <span class="Codeintext">XSomethingB</span>. Note that it receives the component context and initialization arguments in its constructor. (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/JavaComponent/TestComponentB.java" title="goto source Components/JavaComponent/TestComponentB.java">Components/JavaComponent/TestComponentB.java</a>)</p>
  <p class="P17">package JavaComp;Â </p>
  <p class="P10">Â </p>
  <p class="P10">public class <span class="CodeEmphasis">TestComponentB</span> implements XTypeProvider, XServiceInfo, XSomethingB {</p>
  <p class="P10">Â  Â  static final String <span class="CodeEmphasis">__serviceName= "JavaTestComponentB";</span> </p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  static byte[] _implementationId;</p>
  <p class="P10">Â  Â  private<span class="CodeEmphasis"> XComponentContext context;</span> </p>
  <p class="P10"><span class="CodeEmphasis">Â  Â  </span>private<span class="CodeEmphasis"> Object[] args;</span> </p>
  <p class="P10"><span class="CodeEmphasis" /></p>
  <p class="P10">Â  Â  public <span class="CodeEmphasis">TestComponentB</span>(XComponentContext context, Object[] args) {</p>
  <p class="P10">Â  Â  Â  Â  this.context= <span class="CodeEmphasis">context</span>; Â </p>
  <p class="P10">Â  Â  Â  Â  this.args= <span class="CodeEmphasis">args</span>;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  Â  Â   </p>
  <p class="P10">Â  Â  // XSomethingB</p>
  <p class="P10">Â  Â  public String <span class="CodeEmphasis">methodTwo</span>(String val) {</p>
  <p class="P10">Â  Â  Â  Â  if (args.length &gt; 0 &amp;&amp; args[0] instanceof String )</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  return (String) args[0];</p>
  <p class="P10">Â  Â  Â  Â  return val;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  //XTypeProvider</p>
  <p class="P10">Â  Â  public com.sun.star.uno.Type[] getTypes( Â ) {</p>
  <p class="P10">Â  Â  Â  Â  Type[] retValue= new Type[3];</p>
  <p class="P10">Â  Â  Â  Â  retValue[0]= new Type( XServiceInfo.class);</p>
  <p class="P10">Â  Â  Â  Â  retValue[1]= new Type( XTypeProvider.class);</p>
  <p class="P10">Â  Â  Â  Â  retValue[2]= new Type( <span class="CodeEmphasis">XSomethingB</span>.class);</p>
  <p class="P10">Â  Â  Â  Â  return retValue;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  </p>
  <p class="P10">Â  Â  //XTypeProvider</p>
  <p class="P10">Â  Â  synchronized public byte[] getImplementationId( Â ) {</p>
  <p class="P10">Â  Â  Â  Â  if (_implementationId == null) {</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  _implementationId= new byte[16];</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  int hash = hashCode();</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  _implementationId[0] = (byte)(hash &amp; 0xff);</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  _implementationId[1] = (byte)((hash &gt;&gt;&gt; 8) &amp; 0xff);</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  _implementationId[2] = (byte)((hash &gt;&gt;&gt; 16) &amp; 0xff);</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  _implementationId[3] = (byte)((hash &gt;&gt;&gt;24) &amp; 0xff);</p>
  <p class="P10">Â  Â  Â  Â  }</p>
  <p class="P10">Â  Â  Â  Â  return _implementationId;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  //XServiceInfo</p>
  <p class="P10">Â  Â  public String getImplementationName( Â ) {</p>
  <p class="P10">Â  Â  Â  Â  return getClass().getName();</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  // XServiceInfo</p>
  <p class="P10">Â  Â  public boolean supportsService( /*IN*/String serviceName ) {</p>
  <p class="P10">Â  Â  Â  Â  if ( serviceName.equals( __serviceName)) Â  Â  Â  Â </p>
  <p class="P10">Â  Â  Â  Â  Â  Â  return true;</p>
  <p class="P10">Â  Â  Â  Â  return false;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  //XServiceInfo</p>
  <p class="P10">Â  Â  public String[] getSupportedServiceNames( Â ) {</p>
  <p class="P10">Â  Â  Â  Â  String[] retValue= new String[0];</p>
  <p class="P10">Â  Â  Â  Â  retValue[0]= __serviceName;</p>
  <p class="P10">Â  Â  Â  Â  return retValue;</p>
  <p class="P10">Â  Â  } </p>
  <p class="P10">}Â </p>
  <p class="P10">Â </p>
  <p class="Paragraph"><span class="Codeintext">TestServiceProvider</span> implements <span class="Codeintext">__getServiceFactory()</span> and <span class="Codeintext">__writeRegistryServiceInfo()</span>: (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/JavaComponent/TestServiceProvider.java" title="goto source Components/JavaComponent/TestServiceProvider.java">Components/JavaComponent/TestServiceProvider.java</a>)</p>
  <p class="P17">package JavaComp;Â </p>
  <p class="P10">...Â </p>
  <p class="P10">public class TestServiceProviderÂ </p>
  <p class="P10">{Â </p>
  <p class="P10">Â  Â  public static XSingleServiceFactory <span class="CodeEmphasis">__getServiceFactory</span>(String implName,</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XMultiServiceFactory multiFactory,</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XRegistryKey regKey) {</p>
  <p class="P10">Â  Â  Â  Â  XSingleServiceFactory xSingleServiceFactory = null;</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  Â  Â  if (implName.equals( TestComponentA.class.getName()) )</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  xSingleServiceFactory = FactoryHelper.getServiceFactory( TestComponentA.class,</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  TestComponentA.__serviceName, multiFactory, regKey); Â  Â  Â  Â </p>
  <p class="P10">Â  Â  Â  Â  else if (implName.equals(TestComponentB.class.getName()))</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  xSingleServiceFactory= FactoryHelper.getServiceFactory( TestComponentB.class,</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  TestComponentB.__serviceName, multiFactory, regKey);</p>
  <p class="P10">Â  Â  Â  Â  return xSingleServiceFactory;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  public static boolean <span class="CodeEmphasis">__writeRegistryServiceInfo</span>(XRegistryKey regKey){</p>
  <p class="P10">Â  Â  Â  Â  boolean bregA= FactoryHelper.writeRegistryServiceInfo( TestComponentA.class.getName(),</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  TestComponentA.__serviceName, regKey);</p>
  <p class="P10">Â  Â  Â  Â  boolean bregB= FactoryHelper.writeRegistryServiceInfo( TestComponentB.class.getName(),</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  TestComponentB.__serviceName, regKey);</p>
  <p class="P10">Â  Â  Â  Â  return bregA &amp;&amp; bregB;</p>
  <p class="P10">Â  Â  } Â  Â  </p>
  <p class="P10">}Â </p>
  <p class="P8">The corresponding manifest entry must point to the static class with the component operations, in this case <span class="Codeintext">JavaComp.TestServiceProvider:</span> </p>
  <p class="Code">RegistrationClassName: JavaComp.TestServiceProviderÂ </p>
  <h3 class="Head3"><a name="1_5_9_Running_and_Debugging_Java_Components" />4.5.9Â Â Running and Debugging Java Components</h3>
  <p class="Paragraph">In order to run a Java component within an office, it needs to be registered first. During the process of registration, the location of the component, its service name and implementation name, are written into a registry database â the <span class="wwwftpemail">services.rdb</span>.</p>
  <p class="Standard">Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table36"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table36A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./4 Writing UNO Components_files/important.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table36B1">
      <p class="TipInTable">As of OpenOffice.org1.1.0 the registration database (<span class="wwwftpemail">applicat.rdb</span>) was split into the <span class="wwwftpemail">services.rdb</span> and the <span class="wwwftpemail">types.rdb</span>. As the names suggest, the <span class="wwwftpemail">services.rdb</span> contains information about services (location, names, ect), whereas the <span class="wwwftpemail">types.rdb</span> holds type descriptions (interfaces, enumerations, etc.)</p>
     </td></tr></table></div>
  <p class="Paragraph">Formerly the <span class="wwwftpemail">regcomp</span> tool was used for registering components. However, it was superseded by <span class="wwwftpemail">pkgchk which came with OpenOffice.org1.1.0 and later by unopkg which came with </span><span class="wwwftpemail"><span class="T28">OpenOffice.org1.2.0</span></span><span class="wwwftpemail"><span class="ButtonsMenus"> </span></span><span class="wwwftpemail">. For more details about Â unopkg refer to chapter </span><span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#1_Extensions" title="see chapter 5 Extensions">5 Extensions</a></span>.</p>
  <p class="Paragraph">By using <span class="wwwftpemail">regcomp</span> you have the option of registering components so that the information is kept in a separate database (other then the <span class="wwwftpemail">services.rdb</span>). This might come in handy if you do not want to clutter up the services.rdb while developing components. Then, however, the office needs to be told to use that <span class="wwwftpemail">.rdb,</span> which is done by modifying the <span class="wwwftpemail">uno(.ini|rc)</span>.</p>
  <p class="Paragraph">If the component uses new types, then they must be made available to the office by merging the type information into the services.rdb. Again, you have the option of using a different database as long as the <span class="wwwftpemail">uno.(ini|rc)</span> is modified accordingly. This step can be omitted if <span class="wwwftpemail">unopkg</span> is being used. </p>
  <p class="Paragraph">The following is a step by step description of the registration process using regcomp:Â </p>
  <p class="Paragraph">Note, if errors are encountered, refer to the troubleshooting section at the end of this chapter.Â </p>
  <p class="P34">Register Component FileÂ </p>
  <p class="TitledListBody">This step creates a registry file that contains the location of the component file and all the necessary type information. To register, place a few files to the proper locations:Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P35" style="margin-left:3cm;"><p class="P35" style="margin-left:0cm;">Copy the <span class="wwwftpemail">regcomp</span> tool from the SDK distribution to <span class="wwwftpemail">&lt;OfficePath&gt;/program.</span> </p></li>
   <li class="P35" style="margin-left:3cm;"><p class="P35" style="margin-left:0cm;">Copy the component jar to <span class="wwwftpemail">&lt;OfficePath&gt;/program/classes.</span> </p></li>
   <li class="P35" style="margin-left:3cm;"><p class="P35" style="margin-left:0cm;">Copy the .<span class="wwwftpemail">rdb</span> file containing the new types created to <span class="wwwftpemail">&lt;OfficePath&gt;/program</span>. If new types were not defined, dismiss this step. In this case, <span class="wwwftpemail">regcomp</span> automatically creates a new rdb file with registration information.</p></li>
  </ul>
  <p class="TitledListBody">On the command prompt, change to <span class="wwwftpemail">&lt;OfficePath&gt;/program</span>, then run <span class="wwwftpemail">regcomp</span> with the following options. Line breaks were applied to improve readability, but the command must be entered in a single line:</p>
  <p class="P36">$ regcomp -register -r &lt;your_registry&gt;.rdb <br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â -br services.rdb </p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  -br types.rdb</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  -l com.sun.star.loader.Java </p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  -c file:///&lt;OfficePath&gt;/program/classes/&lt;your_component&gt;.jar </p>
  <p class="P37">For the <span class="Codeintext">org.openoffice.test.ImageShrink</span> service whose type description was merged into <span class="wwwftpemail">thumbs.rdb</span> , which is implemented in <span class="wwwftpemail">thumbs.jar</span>, the corresponding command would be:</p>
  <p class="P36">$ regcomp -register -r thumbs.rdb Â </p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  -br services.rdb </p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  -br types.rdb</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  -l com.sun.star.loader.Java </p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  -c file:///i:/StarOffice6.0/program/classes/thumbs.jar </p>
  <p class="P38">Instead of <span class="wwwftpemail">regcomp,</span> there is also a Java tool to register components, however, it can only write to the same registry it reads from. It cannot be used to create a separate registry database. For details, see the section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_9_Deployment_Options_for_Components" title="see chapter 4.9 Writing UNO Components - Deployment Options for Components">4.9 Writing UNO Components - Deployment Options for Components</a></span>.</p>
  <p class="TitledListHead">Make Registration available to OpenOffice.orgÂ </p>
  <p class="TitledListBody">OpenOffice.org must be told to use the registry. Close all OpenOffice.org parts, including the Quickstarter that runs in the Windows task bar. Edit the file <span class="wwwftpemail">uno(.ini|rc)</span> in <span class="wwwftpemail">&lt;OfficePath&gt;/program</span> as follows:</p>
  <p class="TitledListCode">[Bootstrap]<br />UNO_TYPES=$SYSBINDIR/types.rdb $SYSBINDIR/&lt;your_registry&gt;.rdb<br />UNO_SERVICES=$SYSBINDIR/services.rdb $SYSBINDIR/&lt;your_registry&gt;.rdb</p>
  <p class="TitledListBody">For details about the syntax of <span class="wwwftpemail">uno(.ini|rc)</span> and alternative registration procedures, refer to the section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_9_Deployment_Options_for_Components" title="see chapter 4.9 Writing UNO Components - Deployment Options for Components">4.9 Writing UNO Components - Deployment Options for Components</a></span>. If OpenOffice.org is restarted, the component should be available.</p>
  <p class="TitledListHead">Test the RegistrationÂ </p>
  <p class="TitledListBody">A short OpenOffice.org Basic program indicates if the program runs went smoothly, by selecting <span class="ButtonsMenus">Tools</span> â <span class="ButtonsMenus">Macro</span> and entering a new macro name on the left, such as <span class="Codeintext">TestImageShrink</span> and click <span class="ButtonsMenus">New</span> to create a new procedure. In the procedure, enter the appropriate code of the component. The test routine for <span class="Codeintext">ImageShrink</span> would be:</p>
  <p class="TitledListCode">Sub TestImageShrinkÂ </p>
  <p class="TitledListCode">Â  Â  oTestComp = createUnoService("org.openoffice.test.ImageShrink")</p>
  <p class="TitledListCode">Â  Â  MsgBox oTestComp.dbg_methods</p>
  <p class="TitledListCode">Â  Â  MsgBox oTestComp.dbg_properties</p>
  <p class="TitledListCode">Â  Â  MsgBox oTestComp.dbg_supportedInterfaces</p>
  <p class="TitledListCode">end subÂ </p>
  <p class="TitledListBody">The result should be three dialogs showing the methods, properties and interfaces supported by the implementation. Note that the interface attributes do not appear as get/set methods, but as properties in Basic. If the dialogs do not show what is expected, refer to the section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_5_9_4_Troubleshooting" title="see chapter 4.5.9 Writing UNO Components - Simple Component in Java - Testing and Debugging Java Components - Troubleshooting">4.5.9 Writing UNO Components - Simple Component in Java - Testing and Debugging Java Components - Troubleshooting</a></span>.</p>
  <h4 class="Head4"><a name="1_5_9_1_Debugging" />Debugging</h4>
  <p class="Paragraph">To increase turnaround cycles and source level debugging, configure the IDE to use GNU makefiles for code generation and prepare OpenOffice.org for Java debugging. If NetBeans are used, the following steps are necessary:Â </p>
  <p class="TitledListHead">Support for GNU makeÂ </p>
  <p class="TitledListBody">A NetBeans extension, available on <span class="wwwftpemail">makefile.netbeans.org, </span>that addsbasic support for GNU makefiles. When it is enabled, edit the makefile in the IDE and use the makefile to build. To install and enable this module, select <span class="ButtonsMenus">Tools â Setup Wizard</span> and click <span class="ButtonsMenus">Next</span> to go to the Module installation page. Find the module <span class="ButtonsMenus">Makefiles</span> and change the corresponding entry to True in the <span class="ButtonsMenus">Enabled</span> column. Finish using the setup wizard. If the module is not available in the installation, use <span class="ButtonsMenus">Tools â Update Center</span> to get the module from <span class="wwwftpemail">www.netbeans.org</span>. A new entry, <span class="ButtonsMenus">Makefile Support,</span> appears in the online help when <span class="ButtonsMenus">Help â Contents </span><span class="T31">is selected</span>. Makefile Support provides further configuration options. The settings <span class="ButtonsMenus">Run a Makefile</span> and <span class="ButtonsMenus">Test a Makefile</span> can be found in <span class="ButtonsMenus">Tools</span> â <span class="ButtonsMenus">Options</span> â <span class="ButtonsMenus">Uncategorized</span> â <span class="ButtonsMenus">Compiler</span> <span class="ButtonsMenus">Types</span> and â <span class="ButtonsMenus">Execution Types</span>. </p>
  <p class="TitledListBody">Put the makefile into the project source folder that was mounted when the project was created. To build the project using the makefile, highlight the makefile in the <span class="ButtonsMenus">Explorer</span> and press <span class="ButtonsMenus">F11</span>.</p>
  <p class="TitledListBody">Documentation for GNU <span class="wwwftpemail">make</span> command-line options and syntax are available at www.gnu.org. The sample <span class="wwwftpemail">Thumbs</span> in the samples folder along with this manual contains a makefile that with a few adjustments is useful for Java components.</p>
  <p class="TitledListHead">Component DebuggingÂ </p>
  <p class="TitledListBody">If NetBeans or Forte for Java is used, the Java Virtual Machine (JVM) that is launched by OpenOffice.org can be attached. Configure the JVM used by OpenOffice.org to listen for debugger connections. Prior to OpenOffice.org2.0 this was done by adding these lines to the <span class="wwwftpemail">java(.ini|rc)</span> in <span class="wwwftpemail">&lt;OfficePath&gt;/user/config: </span></p>
  <p class="TitledListCode">-XdebugÂ </p>
  <p class="TitledListCode">-Xrunjdwp:transport=dt_socket,server=y,address=8000,suspend=nÂ </p>
  <p class="TitledListBody">As of OpenOffice.org2.0, these lines are added in the options dialog: <span class="T25">expand the OpenOffice.org node in the tree on the left-hand side and chose </span><span class="wwwftpemail"><span class="T27">Java</span></span><span class="wwwftpemail"> </span><span class="wwwftpemail"><span class="T25">. On the right-hand side, push the </span></span><span class="wwwftpemail"><span class="wwwftpemail"><span class="T27">Parameters</span></span></span><span class="wwwftpemail"><span class="wwwftpemail"> </span></span><span class="wwwftpemail"><span class="T25">button to open a dialog. In this dialog, enter the debug options as two separate entries. Note that the parameters have to entered the same way as they would be provided on the command line when starting the Java </span></span><span class="wwwftpemail"><span class="T28">executable. That is, retain the leading '-' and spaces, if necessary.</span></span><span class="wwwftpemail"> </span></p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table37"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table37A1">
      <div class="TableContents"><img width="39" height="39" alt="Tip graphics marks a hint section in the text" src="./4 Writing UNO Components_files/tip.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table37B1">
      <p class="TipInTable">The additional entries correspond exactly to the options you would use when running the java executable from the command line in debug mode. For more information refer to the Java SDK documentation.Â </p>
     </td></tr></table></div>
  <p class="Paragraph">The last line causes the JVM to listen for a debugger on port 8000. The JVM starts listening as soon as it runs and does not wait until a debugger connects to the JVM. Launch the office and instantiate the Java component, so that the office invokes the JVM in listening mode. Â </p>
  <p class="Paragraph">Once a Java component is instantiated, the JVM keeps listening even if the component goes out of scope. Open the appropriate source file in the NetBeans editor and set breakpoints as needed. Choose <span class="ButtonsMenus">Debug - Attach</span>, select <span class="ButtonsMenus">Java Platform Debugger Architecture (JPDA)</span> as debugger type and <span class="ButtonsMenus">SocketAttach (Attaches by socket to other VMs)</span> as the connector. The <span class="ButtonsMenus">Host</span> should be localhost and the <span class="ButtonsMenus">Port</span> must be 8000. Click <span class="ButtonsMenus">OK</span> to connect the Java Debugger to the JVM the office has started previously step.</p>
  <p class="Paragraph">Once the debugger connects to the running JVM, NetBeans switches to debug mode, the output windows shows a message that a connection on port 8000 is established and threads are visible, as if the debugging was local. If necessary, start your component once again. As soon as the component reaches a breakpoint in the source code, the source editor window opens with the breakpoint highlighted by a green arrow.Â </p>
  <h4 class="Head4"><a name="1_5_9_2_The_Java_Environment_in_OpenOffice.org" />The Java Environment in OpenOffice.org</h4>
  <p class="Paragraph">When UNO components written in Java are to be used within the office, the office has to be configured appropriately. Prior to OpenOffice.org2.0, this configuration happened during the Â installation, when the Java setup was performed. Then, a user could choose a Java Runtime Environment or choose to install a JRE. After installing the office, the selected JRE could still be changed with the <span class="T32">jvmsetup</span> program, which was located in the program folder. The data for running the Java Virtual Machine was stored in the java(.ini|rc) file and other configuration files. </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table24"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table24A1">
      <div class="TableContents"><img width="39" height="39" alt="Tip graphics marks a hint section in the text" src="./4 Writing UNO Components_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table24B1">
      <p class="P39">The <span class="wwwftpemail">java(.ini|rc) </span>actually is an implementation detail. Unfortunately, it needs to be modified under some rare circumstances, for example for debugging purposes. You must not rely on the existence of the file nor should you make assumptions about its contents.</p>
     </td></tr></table></div>
  <p class="Paragraph">In an office with a lower version than 2.0, the <span class="wwwftpemail">java(.ini|rc)</span> is located in the <span class="wwwftpemail">&lt;officepath&gt;\user\config directory</span>. A client can use that file to pass additional properties to the Java Virtual Machine, which are then available as system properties. For example, to pass the property <span class="Codeintext">MyAge,</span> invoke Java like this:</p>
  <p class="Paragraph"><span class="Codeintext">java -DMyAge=30 RunClass</span> </p>
  <p class="Paragraph">If you want to have that system property accessible by your Java component you can put that property into <span class="wwwftpemail">java(ini|rc)</span> within the <span class="Codeintext">[Java]</span> section. For example:</p>
  <p class="Code">[Java]<br />Home=file:///C:/Program%20Files/Java/j2re1.4.2</p>
  <p class="Code">Â </p>
  <p class="Code">VMType=JRE<br />Version=1.4.2<br />RuntimeLib=file:///C:/Program%20Files/Java/j2re1.4.2/bin/client/jvm.dll<br />SystemClasspath=d:\645m15\program\classes\classes.jar;; ...<br />Java=1<br />JavaScript=1<br />Applets=1<br /> <span class="T33">MyAge=27</span> Â  </p>
  <p class="Paragraph">To debug a Java component, it is necessary to start the JVM with additional parameters. The parameters can be put in the<span class="wwwftpemail"> java.ini </span>the same way as they would appear on the command-line. For example , add those lines to the <span class="Codeintext">[Java]</span> section:</p>
  <p class="Code">-Xdebug<br />-Xrunjdwp:transport=dt_socket,server=y,address=8000</p>
  <p class="Paragraph">More about debugging can be found in the JDK documentation and in the OpenOffice.org Software Development Kit.Â </p>
  <p class="Paragraph">Java components are also affected by the following configuration settings. They can be changed in the <span class="ButtonsMenus">Tools - Options </span>dialog. In the dialog, expand the OpenOffice.org node on the left-hand side and choose <span class="ButtonsMenus">Security</span>. This brings up a new pane on the right-hand side that allows Java specific settings:</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table12"><colgroup><col width="181" /><col width="573" /></colgroup><tr><td style="text-align:left;width:3.958cm; " class="Table12A1">
      <p class="TableHead">Java SettingÂ </p>
     </td><td style="text-align:left;width:12.552cm; " class="Table12B1">
      <p class="TableHead">DescriptionÂ </p>
     </td></tr><tr><td style="text-align:left;width:3.958cm; " class="Table12A2">
     <p class="TextInTable">EnableÂ </p>
    </td><td style="text-align:left;width:12.552cm; " class="Table12B2">
     <p class="TextInTable">If checked, Java is used with the office. This affects Java components, as well as applets.Â </p>
    </td></tr><tr><td style="text-align:left;width:3.958cm; " class="Table12A2">
     <p class="TextInTable">Security checksÂ </p>
    </td><td style="text-align:left;width:12.552cm; " class="Table12B2">
     <p class="TextInTable">If checked, the security manager restricts resource access of applets.Â </p>
    </td></tr><tr><td style="text-align:left;width:3.958cm; " class="Table12A2">
     <p class="TextInTable">Net accessÂ </p>
    </td><td style="text-align:left;width:12.552cm; " class="Table12B2">
     <p class="TextInTable">Determines where an applet can connect. Â </p>
    </td></tr><tr><td style="text-align:left;width:3.958cm; " class="Table12A2">
     <p class="TextInTable">ClassPathÂ </p>
    </td><td style="text-align:left;width:12.552cm; " class="Table12B2">
     <p class="TextInTable">Additional jar files and directories where the JVM should search for classes. Also known as user classpath.Â </p>
    </td></tr><tr><td style="text-align:left;width:3.958cm; " class="Table12A2">
     <p class="TextInTable">AppletsÂ </p>
    </td><td style="text-align:left;width:12.552cm; " class="Table12B2">
     <p class="TextInTable">If checked, applets are executed.Â </p>
    </td></tr></table></div>
  <p class="Paragraph">In OpenOffice.org2.0 there is no java(.ini|rc) anymore. All basic Java settings are set in the options dialog: tree node OpenOffice.org-&gt;Java. The Parameters dialog can be used to specify the debug options and other arguments. Â </p>
  <p class="Paragraph">For applets there are still a few settings on the security panel (tree node OpenOffice.org-&gt;Security). Â </p>
  <h4 class="Head4"><a name="1_5_9_3_Troubleshooting" />Troubleshooting</h4>
  <p class="Paragraph">If the component encounters problems, review the following checklist to check if the component is configured correctly. Â </p>
  <p class="TitledListHead">Check Registry KeysÂ </p>
  <p class="TitledListBody">To check if the registry database is correctly set up, run <span class="wwwftpemail">regview</span> against the three keys that make up a registration in the /UCR, /SERVICES and /IMPLEMENTATIONS branch of a registry database. The following examples show how to read the appropriate keys and how a proper configuration should look. In our example, service <span class="Codeintext">ImageShrink</span>, and the key /UCR/org/openoffice/test/XImageShrink contain the type information specified in UNOIDL (the exact output from <span class="wwwftpemail">regview</span> might differ between versions of OpenOffice.org):</p>
  <p class="P36"># dump XImageShrink type informationÂ </p>
  <p class="P36">Â </p>
  <p class="P36">$ <span class="CODEEmphasis">regview thumbs.rdb /UCR/org/openoffice/test/XImageShrink</span> </p>
  <p class="P36">Â </p>
  <p class="P36">Registry "file:///X:/office60eng/program/thumbs.rdb":Â </p>
  <p class="P36">Â </p>
  <p class="P36">/UCR/org/openoffice/test/XImageShrinkÂ </p>
  <p class="P36">Â Value: Type = RG_VALUETYPE_BINARY</p>
  <p class="P36">Â  Â  Â  Â  Size = 364</p>
  <p class="P36">Â  Â  Â  Â  Data = minor version: 0</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  major version: 1</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  type: 'interface'</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  uik: { 0x00000000-0x0000-0x0000-0x00000000-0x00000000 }</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  name: 'org/openoffice/test/XImageShrink'</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  super name: 'com/sun/star/uno/XInterface'</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Doku: ""</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  IDL source file: "X:\SO\sdk\examples\java\Thumbs\org\openoffice\test\XImageShrink.idl"</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  number of fields: 3</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  field #0:</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  name='SourceDirectory'</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  type='string'</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  access=READWRITE</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  Â Doku: ""</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  IDL source file: ""</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  field #1:</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  name='DestinationDirectory'</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  type='string'</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  access=READWRITE</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  Â Doku: ""</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  IDL source file: ""</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  field #2:</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  name='Dimension'</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  type='com/sun/star/awt/Size'</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  access=READWRITE</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  Â Doku: ""</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  Â  IDL source file: ""</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  number of methods: 0</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Â  number of references: 0</p>
  <p class="TitledListBody">The /SERVICES/org.openoffice.test.ImageShrink key must point to the implementation name <span class="Codeintext">org.openoffice.</span> <span class="T34">comp</span> <span class="Codeintext">.test.ImageShrink</span> that was chosen for this service:</p>
  <p class="P36"># dump service name registrationÂ </p>
  <p class="P36">Â </p>
  <p class="P36">$ <span class="CODEEmphasis">regview thumbs.rdb /SERVICES/org.openoffice.test.ImageShrink</span> </p>
  <p class="P36">Â </p>
  <p class="P36">Registry "file:///X:/office60eng/program/thumbs.rdb":Â </p>
  <p class="P36">Â </p>
  <p class="P36">/SERVICES/org.openoffice.test.ImageShrinkÂ </p>
  <p class="P36">Â Value: Type = RG_VALUETYPE_STRINGLIST</p>
  <p class="P36">Â  Â  Â  Â  Size = 45</p>
  <p class="P36">Â  Â  Â  Â  Len Â = 1</p>
  <p class="P36">Â  Â  Â  Â  Data = 0 = "org.openoffice.comp.test.ImageShrink"</p>
  <p class="TitledListBody">Finally, the /IMPLEMENTATIONS/org.openoffice.comp.test.ImageShrink key must contain the loader and the location of the component jar:Â </p>
  <p class="P36"># dump implementation name registrationÂ </p>
  <p class="P36">Â </p>
  <p class="P36">$ <span class="CODEEmphasis">regview thumbs.rdb /IMPLEMENTATIONS/org.openoffice.comp.test.ImageShrink</span> </p>
  <p class="P36">Â </p>
  <p class="P36">Registry "file:///X:/office60eng/program/thumbs.rdb":Â </p>
  <p class="P36">Â </p>
  <p class="P36">/IMPLEMENTATIONS/org.openoffice.comp.test.ImageShrinkÂ </p>
  <p class="P36">Â / UNO</p>
  <p class="P36">Â  Â / ACTIVATOR</p>
  <p class="P36">Â  Â  Â Value: Type = RG_VALUETYPE_STRING</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Size = 26</p>
  <p class="P36">Â  Â  Â  Â  Â  Â  Data = "com.sun.star.loader.Java2"</p>
  <p class="P40">Â </p>
  <p class="P40">Â  Â / SERVICES</p>
  <p class="P40">Â  Â  Â / org.openoffice.test.ImageShrink</p>
  <p class="P40">Â  Â / LOCATION</p>
  <p class="P40">Â  Â  Â Value: Type = RG_VALUETYPE_STRING</p>
  <p class="P40">Â  Â  Â  Â  Â  Â  Size = 50</p>
  <p class="P40">Â  Â  Â  Â  Â  Â  Data = "file:///X:/office60eng/program/classes/thumbs.jar"</p>
  <p class="TitledListBody">If the UCR key is missing, the problem is with <span class="wwwftpemail">regmerge</span>. The most probable cause are missing .<span class="wwwftpemail">urd</span> files. Be careful when writing the makefile. If .<span class="wwwftpemail">urd</span> files are missing when regmerge is launched by the makefile, <span class="wwwftpemail">regmerge</span> continues and creates a barebone .<span class="wwwftpemail">rdb</span> file, sometimes without any type info.</p>
  <p class="TitledListBody">If <span class="wwwftpemail">regview</span> can not find the /SERVICES and /IMPLEMENTATIONS keys or they have the wrong content, the problem occurred when <span class="wwwftpemail">regcomp </span>was run. This can be caused by wrong path names in the <span class="wwwftpemail">regcomp</span> arguments. </p>
  <p class="TitledListBody">Also, a wrong <span class="Codeintext">SystemClasspath</span> setup in <span class="wwwftpemail">java(.ini|rc) </span><span class="wwwftpemail"><span class="T25">(prior to OpenOffice.org2.0)</span></span><span class="wwwftpemail"> </span>could be the cause of <span class="wwwftpemail">regcomp</span> error messages about missing classes. Check what the <span class="Codeintext">SystemClasspath</span> entry in <span class="wwwftpemail">java(.ini|rc)</span> specifies for the Java UNO runtime jars.</p>
  <p class="TitledListBody">Ensure that <span class="wwwftpemail">regcomp</span> is being run from the current directory when registering Java components. In addition, ensure <span class="wwwftpemail">&lt;OfficePath&gt;/program</span> is the current folder when <span class="wwwftpemail">regcomp</span> is run. Verify that <span class="wwwftpemail">regcomp</span> is in the current folder.</p>
  <p class="TitledListHead">Check the Java VM settingsÂ </p>
  <p class="TitledListBody">Whenever the VM service is instantiated by OpenOffice.org, it uses the Java configuration settings in OpenOffice.org. This happens during the registration of Java components, therefore make sure that Java is enabled. Choose <span class="ButtonsMenus">Tools-Options</span> in OpenOffice.org, so that the dialog appears. Expand the OpenOffice.org node and select <span class="ButtonsMenus">Security</span>. Select the <span class="ButtonsMenus">Enable</span> checkbox in the Java section and click <span class="ButtonsMenus">OK</span>. </p>
  <p class="TitledListHead">Check the ManifestÂ </p>
  <p class="TitledListBody">Make sure the manifest file contains the correct entry for the registration class name. The file must contain the following line:Â </p>
  <p class="TitledListCode">RegistrationClassName: &lt;full name of package and class&gt;Â </p>
  <p class="TitledListBody">Please make sure that the manifest file ends up with a new line. The registration class name must be the one that implements the <span class="Codeintext">__writeRegistryServiceInfo()</span> and <span class="Codeintext">__getServiceFactory()</span> methods. The <span class="Codeintext">RegistrationClassName</span> to be entered in the manifest for our example is <span class="Codeintext">org.openoffice.comp.test.ImageShrink</span>.</p>
  <p class="TitledListHead">Adjust CLASSPATH for Additional ClassesÂ </p>
  <p class="TitledListBody">OpenOffice.org maintains its own system classpath and a user classpath when it starts the Java VM for Java components. The jar file that contains the service implementation is not required in the system or user classpath. If a component depends on jar files or classes that are not part of the Java UNO runtime jars, then they must be put on the classpath. This can be achieved by editing the classpath Â in the options dialog (<span class="ButtonsMenus">Tools â Options â OpenOffice.org â Security)</span> .</p>
  <p class="TitledListHead">Disable Debug OptionsÂ </p>
  <p class="TitledListBody">If the debug options (-Xdebug, -Xrunjdwp) are in the <span class="wwwftpemail">java(.ini|rc) </span><span class="T25">(prior to OpenOffice.org2.0)</span> file, disable them by putting semicolons at the beginning of the respective lines. For OpenOffice.org2.0 and later, make sure the debug options are removed in the Parameters dialog. This dialog can be found in the options dialog (<span class="ButtonsMenus">Tools â Options â OpenOffice.org â Java)</span>. The <span class="wwwftpemail">regcomp</span> or Â tool or the Extension Manager may hang, because the JVM is waiting for a debugger to be attached.</p>
  <h2 class="Head2"><a name="1_6_C_2B_2B_Component" />4.6Â Â C++ Component</h2>
  <p class="Paragraph">In this section, a sample component containing two service implementations with helpers and without helpers implemented are presented. The complete source code and the gnu makefile are in <span class="wwwftpemail">samples/simple_cpp_component</span>.</p>
  <p class="Paragraph">The first step for the C++ component is to define a language-independent interface, so that the UNO object can communicate with others. The IDL specification for the component defines one interface <span class="Codeintext">my_module.XSomething</span> and two old-style services implementing this interface (if new-style services were used instead, the example would not be much different). In addition, the second service called <span class="Codeintext">my_module.MyService2</span> implements the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XInitialization.html" title="see type com.sun.star.lang.XInitialization">com.sun.star.lang.XInitialization</a></span> interface, so that <span class="Codeintext">MyService2</span> can be instantiated with arguments passed to it during runtime.</p>
  <p class="Code">#include &lt;com/sun/star/uno/XInterface.idl&gt;Â </p>
  <p class="Code">#include &lt;com/sun/star/lang/XInitialization.idl&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">module my_moduleÂ </p>
  <p class="Code">{Â </p>
  <p class="Code">Â </p>
  <p class="Code">interface XSomething : com::sun::star::uno::XInterfaceÂ </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  string methodOne( [in] string val );</p>
  <p class="Code">};Â </p>
  <p class="Code">Â </p>
  <p class="Code">service MyService1Â </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  interface XSomething;</p>
  <p class="Code">};Â </p>
  <p class="Code">Â </p>
  <p class="Code">service MyService2Â </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  interface XSomething;</p>
  <p class="Code">Â  Â  interface com::sun::star::lang::XInitialization;</p>
  <p class="Code">};Â </p>
  <p class="Code">Â </p>
  <p class="Code">};Â </p>
  <p class="Paragraph">This IDL is compiled to produce a binary type library file (.<span class="wwwftpemail">urd</span> file), by executing the following commands. The types are compiled and merged into a registry <span class="wwwftpemail">simple_component.rdb</span>, that will be linked into the OpenOffice.org installation later.</p>
  <p class="P41">$ idlc -I&lt;SDK&gt;/idl some.idl<br />$ regmerge simple_component.rdb /UCR some.urd</p>
  <p class="Paragraph">The <span class="wwwftpemail">cppumaker</span> tool must be used to map IDL to C++: </p>
  <p class="Code">$ cppumaker -BUCR -Tmy_module.XSomething <span class="T35">&lt;officepath&gt;/program</span>/types.rdb simple_component.rdb</p>
  <p class="Paragraph">For each given type, a pair of header files is generated, a .<span class="wwwftpemail">hdl</span> and a .<span class="wwwftpemail">hpp</span> file. To avoid conflicts, all C++ declarations of the type are in the .<span class="wwwftpemail">hdl</span> and all definitions, such as constructors, are in the .<span class="wwwftpemail">hpp</span> file. The .<span class="wwwftpemail">hpp</span> is the one to include for any type used in C++.</p>
  <p class="Paragraph">The next step is to implement the core interfaces, and the implementation of the component operations <span class="Codeintext">component_getFactory()</span>, <span class="Codeintext">component_writeInfo() </span>and <span class="Codeintext">component_getImplementationEnvironment()</span>with or without helper methods.</p>
  <h3 class="Head3"><a name="1_6_1_Class_Definition_with_Helper_Template_Classes" />4.6.1Â Â Class Definition with Helper Template Classes</h3>
  <h4 class="Head4"><a name="1_6_1_1_XInterface_2C_XTypeProvider_and_XWeak" />XInterface, XTypeProvider and XWeak </h4>
  <p class="Paragraph">The SDK offers helpers for ease of developing. There are implementation helper template classes that deal with the implementation of <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XInterface.html" title="see type com.sun.star.uno.XInterface">com.sun.star.uno.XInterface</a></span> and <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XTypeProvider.html" title="see type com.sun.star.lang.XTypeProvider">com.sun.star.lang.XTypeProvider</a></span>, as well as <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XWeak.html" title="see type com.sun.star.uno.XWeak">com.sun.star.uno.XWeak</a></span>. These classes let you focus on the interfaces you want to implement.</p>
  <p class="Paragraph">The implementation of <span class="Codeintext">my_module.MyService2</span> uses the <span class="Codeintext">::cppu::WeakImplHelper3&lt;&gt;</span> helper. The â3â stands for the number of interfaces to implement. The class declaration inherits from this template class which takes the interfaces to implement as template parameters. (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/CppComponent/service2_impl.cxx" title="goto source Components/CppComponent/service2_impl.cxx">Components/CppComponent/service2_impl.cxx</a>)</p>
  <p class="Code">#include &lt;<span class="CodeEmphasis">cppuhelper/implbase3.hxx</span>&gt; // "3" implementing three interfaces</p>
  <p class="Code">#include &lt;cppuhelper/factory.hxx&gt;Â </p>
  <p class="Code">#include &lt;cppuhelper/implementationentry.hxx&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">#include &lt;com/sun/star/lang/XServiceInfo.hpp&gt;Â </p>
  <p class="Code">#include &lt;com/sun/star/lang/XInitialization.hpp&gt;Â </p>
  <p class="Code">#include &lt;com/sun/star/lang/IllegalArgumentException.hpp&gt;Â </p>
  <p class="Code">#include &lt;my_module/XSomething.hpp&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â </p>
  <p class="Code">using namespace ::rtl; // for OUStringÂ </p>
  <p class="Code">using namespace ::com::sun::star; // for sdk interfacesÂ </p>
  <p class="Code">using namespace ::com::sun::star::uno; // for basic typesÂ </p>
  <p class="Code">Â </p>
  <p class="Code">Â </p>
  <p class="Code">namespace my_sc_impl {Â </p>
  <p class="Code">Â </p>
  <p class="Code">class MyService2Impl : <span class="CodeEmphasis">public ::cppu::WeakImplHelper3&lt; ::my_module::XSomething, </span></p>
  <p class="Code"><span class="CodeEmphasis">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â lang::XServiceInfo, </span></p>
  <p class="Code"><span class="CodeEmphasis">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â lang::XInitialization &gt;</span> </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  ...</p>
  <p class="Code">};Â </p>
  <p class="Code">}Â </p>
  <p class="Paragraph">The next section focusses on coding <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XServiceInfo.html" title="see type com.sun.star.lang.XServiceInfo">com.sun.star.lang.XServiceInfo</a></span>, <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XInitialization.html" title="see type com.sun.star.lang.XInitialization">com.sun.star.lang.XInitialization</a></span> and the sample interface my_module.XSomething. </p>
  <p class="Paragraph">The cppuhelper shared library provides additional implementation helper classes, for example, supporting <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XComponent.html" title="see type com.sun.star.lang.XComponent">com.sun.star.lang.XComponent</a></span>. Browse the <span class="wwwftpemail">::cppu namespace</span> in the C++ reference of the SDK or on <span class="wwwftpemail">udk.openoffice.org</span>.</p>
  <h4 class="Head4"><a name="1_6_1_2_XServiceInfo" />XServiceInfo </h4>
  <p class="Paragraph">An UNO service implementation supports <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XServiceInfo.html" title="see type com.sun.star.lang.XServiceInfo">com.sun.star.lang.XServiceInfo</a></span> providing information about its implementation name and supported services. The implementation name is a unique name referencing the specific implementation. In this case, <span class="Codeintext">my_module.my_sc_impl.MyService1</span> and <span class="Codeintext">my_module.my_sc_impl.MyService2 </span>respectively. The implementation name is used later when registering the implementation into the <span class="wwwftpemail">simple_component.rdb</span> registry used for OpenOffice.org. It links a service name entry to one implementation, because there may be more than one implementation. Multiple implementations of the same service may have different characteristics, such as runtime behavior and memory footprint.</p>
  <p class="Paragraph">Our service instance has to support the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XServiceInfo.html" title="see type com.sun.star.lang.XServiceInfo">com.sun.star.lang.XServiceInfo</a></span> interface. This interface has three methods, and can be coded for one supported service as follows: (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/CppComponent/service2_impl.cxx" title="goto source Components/CppComponent/service2_impl.cxx">Components/CppComponent/service2_impl.cxx</a>)</p>
  <p class="Code">// XServiceInfo implementationÂ </p>
  <p class="Code">OUString MyService2Impl::getImplementationName()Â </p>
  <p class="Code">Â  Â  throw (RuntimeException)</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  // unique implementation name</p>
  <p class="Code">Â  Â  return OUString( RTL_CONSTASCII_USTRINGPARAM("my_module.my_sc_impl.MyService2") );</p>
  <p class="Code">}Â </p>
  <p class="Code">sal_Bool MyService2Impl::supportsService( OUString const &amp; serviceName )Â </p>
  <p class="Code">Â  Â  throw (RuntimeException)</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  // this object only supports one service, so the test is simple</p>
  <p class="Code">Â  Â  return serviceName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM("my_module.MyService2") );</p>
  <p class="Code">}Â </p>
  <p class="Code">Sequence&lt; OUString &gt; MyService2Impl::getSupportedServiceNames()Â </p>
  <p class="Code">Â  Â  throw (RuntimeException)</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  return getSupportedServiceNames_MyService2Impl();</p>
  <p class="Code">}Â </p>
  <h3 class="Head3"><a name="1_6_2_Implementing_your_own_Interfaces" />4.6.2Â Â Implementing your own Interfaces</h3>
  <p class="Paragraph">For the <span class="Codeintext">my_module.XSomething</span> interface, add a string to be returned that informs the caller when <span class="Codeintext">methodOne()</span> was called successfully . (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/CppComponent/service2_impl.cxx" title="goto source Components/CppComponent/service2_impl.cxx">Components/CppComponent/service2_impl.cxx</a>)</p>
  <p class="Code">OUString MyService2Impl::methodOne( OUString const &amp; str )Â </p>
  <p class="Code">Â  Â  throw (RuntimeException)</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  return OUString( RTL_CONSTASCII_USTRINGPARAM(</p>
  <p class="Code">Â  Â  Â  Â  "called methodOne() of MyService2 implementation: ") ) + str;</p>
  <p class="Code">}Â </p>
  <h3 class="Head3"><a name="1_6_3_Providing_a_Single_Factory_Using_a_Helper_Method" />4.6.3Â Â Providing a Single Factory Using a Helper Method</h3>
  <p class="Paragraph">C++ component libraries must export an external "C" function called <span class="Codeintext">component_getFactory()</span> that supplies a factory object for the given implementation. Use <span class="Codeintext">::cppu::component_getFactoryHelper()</span> to create this function. The declarations for it are included through cppuhelper/implementationentry.hxx. </p>
  <p class="Paragraph">The <span class="Codeintext">component_getFactory()</span> method appears at the end of the following listing. This method assumes that the component includes a static <span class="Codeintext">::cppu::ImplementationEntry</span> array <span class="Codeintext">s_component_entries[]</span>, which contains a number of function pointers. The listing shows how to write the component, so that the function pointers for all services of a multi-service component are correctly initialized. (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/CppComponent/service2_impl.cxx" title="goto source Components/CppComponent/service2_impl.cxx">Components/CppComponent/service2_impl.cxx</a>)</p>
  <p class="P17">#include &lt;cppuhelper/implbase3.hxx&gt; // "3" implementing three interfacesÂ </p>
  <p class="P10">#include &lt;cppuhelper/factory.hxx&gt;Â </p>
  <p class="P10">#include &lt;cppuhelper/implementationentry.hxx&gt;Â </p>
  <p class="P10">Â </p>
  <p class="P10">#include &lt;com/sun/star/lang/XServiceInfo.hpp&gt;Â </p>
  <p class="P10">#include &lt;com/sun/star/lang/XInitialization.hpp&gt;Â </p>
  <p class="P10">#include &lt;com/sun/star/lang/IllegalArgumentException.hpp&gt;Â </p>
  <p class="P10">#include &lt;my_module/XSomething.hpp&gt;Â </p>
  <p class="P10">Â </p>
  <p class="P10">Â </p>
  <p class="P10">using namespace ::rtl; // for OUStringÂ </p>
  <p class="P10">using namespace ::com::sun::star; // for sdk interfacesÂ </p>
  <p class="P10">using namespace ::com::sun::star::uno; // for basic typesÂ </p>
  <p class="P10">Â </p>
  <p class="P10">Â </p>
  <p class="P10">namespace my_sc_implÂ </p>
  <p class="P10">{Â </p>
  <p class="P10">Â </p>
  <p class="P10">class MyService2Impl : public ::cppu::WeakImplHelper3&lt;Â </p>
  <p class="P10">Â  Â  Â  ::my_module::XSomething, lang::XServiceInfo, lang::XInitialization &gt;</p>
  <p class="P10">{Â </p>
  <p class="P10">Â  Â  OUString m_arg;</p>
  <p class="P10">public:Â </p>
  <p class="P10">Â  Â  // focus on three given interfaces,</p>
  <p class="P10">Â  Â  // no need to implement XInterface, XTypeProvider, XWeak</p>
  <p class="P10">Â  Â  </p>
  <p class="P10">Â  Â  // XInitialization will be called upon createInstanceWithArguments[AndContext]()</p>
  <p class="P10">Â  Â  virtual void SAL_CALL initialize( Sequence&lt; Any &gt; const &amp; args )</p>
  <p class="P10">Â  Â  Â  Â  throw (Exception);</p>
  <p class="P10">Â  Â  // XSomething</p>
  <p class="P10">Â  Â  virtual OUString SAL_CALL methodOne( OUString const &amp; str )</p>
  <p class="P10">Â  Â  Â  Â  throw (RuntimeException);</p>
  <p class="P10">Â  Â  // XServiceInfo</p>
  <p class="P10">Â  Â  virtual OUString SAL_CALL getImplementationName()</p>
  <p class="P10">Â  Â  Â  Â  throw (RuntimeException);</p>
  <p class="P10">Â  Â  virtual sal_Bool SAL_CALL supportsService( OUString const &amp; serviceName )</p>
  <p class="P10">Â  Â  Â  Â  throw (RuntimeException);</p>
  <p class="P10">Â  Â  virtual Sequence&lt; OUString &gt; SAL_CALL getSupportedServiceNames()</p>
  <p class="P10">Â  Â  Â  Â  throw (RuntimeException);</p>
  <p class="P10">};Â </p>
  <p class="P10">Â </p>
  <p class="P10">// Implementation of XSomething, XServiceInfo and XInitilization omitted here:Â </p>
  <p class="P10">...Â </p>
  <p class="P10">Â </p>
  <p class="P10">// component operations from service1_impl.cxxÂ </p>
  <p class="P10">extern Sequence&lt; OUString &gt; SAL_CALL Â getSupportedServiceNames_MyService1Impl();</p>
  <p class="P10">extern OUString SAL_CALL getImplementationName_MyService1Impl();Â </p>
  <p class="P10">extern Reference&lt; XInterface &gt; SAL_CALL create_MyService1Impl(Â </p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Reference&lt; XComponentContext &gt; const &amp; xContext )</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  SAL_THROW( () );</p>
  <p class="P10">// component operations for MyService2ImplÂ </p>
  <p class="P10">static Sequence&lt; OUString &gt; getSupportedServiceNames_MyService2Impl()Â </p>
  <p class="P10">{Â </p>
  <p class="P10">Â  Â  Sequence&lt;OUString&gt; names(1);</p>
  <p class="P10">Â  Â  names[0] = OUString(RTL_CONSTASCII_USTRINGPARAM("my_module.MyService2"));</p>
  <p class="P10">Â  Â  return names;</p>
  <p class="P10">}Â </p>
  <p class="P10">Â </p>
  <p class="P10">static OUString getImplementationName_MyService2Impl()Â </p>
  <p class="P10">{Â </p>
  <p class="P10">Â  Â  return OUString( RTL_CONSTASCII_USTRINGPARAM(</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â "my_module.my_sc_implementation.MyService2") );</p>
  <p class="P10">}Â </p>
  <p class="P10">Â  Â  </p>
  <p class="P10">Â </p>
  <p class="P10">Reference&lt; XInterface &gt; SAL_CALL create_MyService2Impl(Â </p>
  <p class="P10">Â  Â  Reference&lt; XComponentContext &gt; const &amp; xContext )</p>
  <p class="P10">Â  Â  SAL_THROW( () )</p>
  <p class="P10">{Â </p>
  <p class="P10">Â  Â  return static_cast&lt; lang::XTypeProvider * &gt;( new MyService2Impl() );</p>
  <p class="P10">}Â </p>
  <p class="P10">Â </p>
  <p class="P10">{Â </p>
  <p class="P10">Â  Â  {</p>
  <p class="P10">Â  Â  Â  Â  create_MyService1Impl, getImplementationName_MyService1Impl,</p>
  <p class="P10">Â  Â  Â  Â  getSupportedServiceNames_MyService1Impl, ::cppu::createSingleComponentFactory,</p>
  <p class="P10">Â  Â  Â  Â  0, 0</p>
  <p class="P10">Â  Â  },</p>
  <p class="P10">Â  Â  {</p>
  <p class="P10">Â  Â  Â  Â  create_MyService2Impl, getImplementationName_MyService2Impl,</p>
  <p class="P10">Â  Â  Â  Â  getSupportedServiceNames_MyService2Impl, ::cppu::createSingleComponentFactory,</p>
  <p class="P10">Â  Â  Â  Â  0, 0</p>
  <p class="P10">Â  Â  },</p>
  <p class="P10">Â  Â  { 0, 0, 0, 0, 0, 0 }</p>
  <p class="P10">};Â </p>
  <p class="P10">}Â </p>
  <p class="P10">Â </p>
  <p class="P6">extern "C"Â </p>
  <p class="P9">{Â </p>
  <p class="P9">void * SAL_CALL <span class="CodeEmphasis">component_getFactory</span>(</p>
  <p class="P9">Â  Â  sal_Char const * implName, lang::XMultiServiceFactory * xMgr,</p>
  <p class="P9">Â  Â  registry::XRegistryKey * xRegistry )</p>
  <p class="P9">{Â </p>
  <p class="P9">Â  Â  return ::cppu::component_getFactoryHelper(</p>
  <p class="P9">Â  Â  Â  Â  implName, xMgr, xRegistry, ::my_sc_impl::s_component_entries );</p>
  <p class="P9">}Â </p>
  <p class="P9">Â </p>
  <p class="P9">// Â getImplementationEnvironment and component_writeInfo are described later, we omit them here</p>
  <p class="P9">...Â </p>
  <p class="P9">}Â </p>
  <p class="Paragraph">The static variable <span class="Codeintext">s_component_entries</span> defines a null-terminated array of entries concerning the service implementations of the shared library. A service implementation entry consists of function pointers for</p>
  <ul style="margin-left:0.5cm;">
   <li class="P42" style="margin-left:2.5cm;"><p class="P42" style="margin-left:0cm;">object creation: <span class="Codeintext">create_MyServiceXImpl()</span> </p></li>
   <li class="P42" style="margin-left:2.5cm;"><p class="P42" style="margin-left:0cm;">implementation name: <span class="Codeintext">getImplementationName_MyServiceXImpl()</span> </p></li>
   <li class="P42" style="margin-left:2.5cm;"><p class="P42" style="margin-left:0cm;">supported service names: <span class="Codeintext">getSupportedServiceNames_MyServiceXImpl()</span> </p></li>
   <li class="P42" style="margin-left:2.5cm;"><p class="P42" style="margin-left:0cm;">factory helper to be used: <span class="Codeintext">::cppu::createComponentFactory()</span> </p></li>
  </ul>
  <p class="Paragraph">The last two values are reserved for future use and therefore can be 0.Â </p>
  <h3 class="Head3"><a name="1_6_4_Write_Registration_Info_Using_a_Helper_Method" />4.6.4Â Â Write Registration Info Using a Helper Method</h3>
  <p class="Paragraph">Use <span class="Codeintext">::cppu::component_writeInfoHelper()</span> to implement <span class="Codeintext">component_writeInfo()</span>: This function is called by <span class="wwwftpemail">regcomp</span> during the registration process. [ScOURCE:Components/simple_cpp_component/service2_impl.cxx]</p>
  <p class="P9">extern "C" sal_Bool SAL_CALL <span class="CodeEmphasis">component_writeInfo</span>(</p>
  <p class="P9">Â  Â  lang::XMultiServiceFactory * xMgr, registry::XRegistryKey * xRegistry )</p>
  <p class="P9">{Â </p>
  <p class="P9">Â  Â  return ::cppu::component_writeInfoHelper(</p>
  <p class="P9">Â  Â  Â  Â  xMgr, xRegistry, ::my_sc_impl::s_component_entries );</p>
  <p class="P9">}Â </p>
  <p class="P9">Â </p>
  <p class="Paragraph">Note that <span class="Codeintext">component_writeInfoHelper()</span> uses the same array of <span class="Codeintext">::cppu::ImplementationEntry</span> structs as <span class="Codeintext">component_getFactory()</span>,that is, <span class="Codeintext">s_component_entries</span>.</p>
  <h3 class="Head3"><a name="1_6_5_Provide_Implementation_Environment" />4.6.5Â Â Provide Implementation Environment</h3>
  <p class="Paragraph">The function called <span class="Codeintext">component_getImplementationEnvironment()</span> tells the shared library component loader which compiler was used to build the library. This information is required if different components have been compiled with different compilers. A specific C++-compiler is called an environment. If different compilers were used, the loader has to bridge interfaces from one compiler environment to another, building the infrastructure of communication between those objects. It is mandatory to have the appropriate C++ bridges installed into the UNO runtime. In most cases, the function mentioned above can be implemented this way: (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/CppComponent/service2_impl.cxx" title="goto source Components/CppComponent/service2_impl.cxx">Components/CppComponent/service2_impl.cxx</a>)</p>
  <p class="P9">extern "C" void SAL_CALL <span class="CodeEmphasis">component_getImplementationEnvironment</span>(</p>
  <p class="P9">Â  Â  sal_Char const ** ppEnvTypeName, uno_Environment ** ppEnv )</p>
  <p class="P9">{Â </p>
  <p class="P9">Â  Â  *ppEnvTypeName = CPPU_CURRENT_LANGUAGE_BINDING_NAME;</p>
  <p class="P9">}Â </p>
  <p class="Paragraph">The macro <span class="Codeintext">CPPU_CURRENT_LANGUAGE_BINDING_NAME</span> is a C string defined by the compiling environment, if you use the SDK compiling environment. For example, when compiling with the Microsoft Visual C++ compiler, it defines to <span class="Codeintext">"msci"</span>, but when compiling with the GNU gcc 3, it defines to <span class="Codeintext">"gcc3"</span>.</p>
  <h3 class="Head3"><a name="1_6_6_Implementing_without_Helpers" />4.6.6Â Â Implementing without Helpers</h3>
  <p class="Paragraph">In the following section, possible implementations without helpers are presented. This is useful if more interfaces are to be implemented than planned by the helper templates. The helper templates only allow up to ten interfaces. Also included in this section is how the core interfaces work. Â </p>
  <h4 class="Head4"><a name="1_6_6_1_XInterface_Implementation" />XInterface Implementation</h4>
  <p class="Paragraph">Object lifetime is controlled through the common base interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XInterface.html" title="see type com.sun.star.uno.XInterface">com.sun.star.uno.XInterface</a></span> methods <span class="Codeintext">acquire()</span> and <span class="Codeintext">release()</span> . These are implemented using reference-counting, that is, upon each <span class="Codeintext">acquire()</span>, the counter is incremented and upon each <span class="Codeintext">release()</span>, it is decreased. On last decrement, the object dies. Programming in a thread-safe manner, the modification of this counter member variable is commonly performed by a pair of <span class="Codeintext">sal</span> library functions called <span class="Codeintext">osl_incrementInterlockedcount()</span> and <span class="Codeintext">osl_decrementInterlockedcount()</span> (include <span class="wwwftpemail">osl/interlck.h</span>). (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/CppComponent/service1_impl.cxx" title="goto source Components/CppComponent/service1_impl.cxx">Components/CppComponent/service1_impl.cxx</a>)</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table2"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table2A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./4 Writing UNO Components_files/important.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table2B1">
      <p class="TipInTable"><span class="T1">B</span>e aware of symbol conflicts when writing code. It is common practice to wrap code into a separate namespace, such as <span class="Codeintext">"my_sc_impl"</span>. The problem is that symbols may clash during runtime on Unix when your shared library is loaded.</p>
     </td></tr></table></div>
  <p class="P43">namespace my_sc_implÂ </p>
  <p class="Code">{Â </p>
  <p class="Code">class MyService1ImplÂ </p>
  <p class="Code">Â  Â  ...</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  oslInterlockedCount m_refcount;</p>
  <p class="Code">public:Â </p>
  <p class="Code">Â  Â  inline MyService1Impl() throw ()</p>
  <p class="Code">Â  Â  Â  Â  : m_refcount( 0 )</p>
  <p class="Code">Â  Â  Â  Â  {}</p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  // XInterface</p>
  <p class="Code">Â  Â  virtual Any SAL_CALL queryInterface( Type const &amp; type )</p>
  <p class="Code">Â  Â  Â  Â  throw (RuntimeException);</p>
  <p class="Code">Â  Â  virtual void SAL_CALL acquire()</p>
  <p class="Code">Â  Â  Â  Â  throw ();</p>
  <p class="Code">Â  Â  virtual void SAL_CALL release()</p>
  <p class="Code">Â  Â  Â  Â  throw ();</p>
  <p class="Code">Â  Â  ...</p>
  <p class="Code">};Â </p>
  <p class="Code">void MyService1Impl::acquire()Â </p>
  <p class="Code">Â  Â  throw ()</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  // thread-safe incrementation of reference count</p>
  <p class="Code">Â  Â  ::osl_incrementInterlockedCount( &amp;m_refcount );</p>
  <p class="Code">}Â </p>
  <p class="Code">void MyService1Impl::release()Â </p>
  <p class="Code">Â  Â  throw ()</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  // thread-safe decrementation of reference count</p>
  <p class="Code">Â  Â  if (0 == ::osl_decrementInterlockedCount( &amp;m_refcount ))</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  delete this; // shutdown this object</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">}Â </p>
  <p class="Paragraph">In the <span class="Codeintext">queryInterface()</span> method, interface pointers have to be provided to the interfaces of the object. That means, cast <span class="Codeintext">this</span> to the respective pure virtual C++ class generated by the <span class="wwwftpemail">cppumaker</span> tool for the interfaces. All supported interfaces must be returned, including inherited interfaces like <span class="Codeintext">XInterface</span>. (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/CppComponent/service1_impl.cxx" title="goto source Components/CppComponent/service1_impl.cxx">Components/CppComponent/service1_impl.cxx</a>)</p>
  <p class="Code">Any MyService1Impl::queryInterface( Type const &amp; type )Â </p>
  <p class="Code">Â  Â  throw (RuntimeException)</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  if (type.equals( ::cppu::UnoType&lt; Reference&lt; XInterface &gt; &gt;::get()))</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  // return XInterface interface (resolve ambiguity caused by multiple inheritance from </p>
  <p class="Code">Â  Â  Â  Â  // XInterface subclasses by casting to lang::XTypeProvider)</p>
  <p class="Code">Â  Â  Â  Â  Reference&lt; XInterface &gt; x( static_cast&lt; lang::XTypeProvider * &gt;( this ) );</p>
  <p class="Code">Â  Â  Â  Â  return makeAny( x );</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  Â  if (type.equals( ::cppu::UnoType&lt; Reference&lt; lang::XTypeProvider &gt; &gt;::get()))</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  // return XInterface interface</p>
  <p class="Code">Â  Â  Â  Â  Reference&lt; XInterface &gt; x( static_cast&lt; lang::XTypeProvider * &gt;( this ) );</p>
  <p class="Code">Â  Â  Â  Â  return makeAny( x );</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  Â  if (type.equals(( ::cppu::UnoType&lt; Reference&lt; lang::XServiceInfo &gt; &gt;::get()))</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  // return XServiceInfo interface</p>
  <p class="Code">Â  Â  Â  Â  Reference&lt; lang::XServiceInfo &gt; x( static_cast&lt; lang::XServiceInfo * &gt;( this ) );</p>
  <p class="Code">Â  Â  Â  Â  return makeAny( x );</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  Â  if (type.equals( ::cppu::UnoType&lt; Reference&lt; ::my_module::XSomething &gt; &gt;::get()))</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  // return sample interface</p>
  <p class="Code">Â  Â  Â  Â  Reference&lt; ::my_module::XSomething &gt; x( static_cast&lt; ::my_module::XSomething * &gt;( this ) );</p>
  <p class="Code">Â  Â  Â  Â  return makeAny( x );</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  Â  // querying for unsupported type</p>
  <p class="Code">Â  Â  return Any();</p>
  <p class="Code">}Â </p>
  <h4 class="Head4"><a name="1_6_6_2_XTypeProvider_Implementation" />XTypeProvider Implementation</h4>
  <p class="Paragraph">When implementing the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XTypeProvider.html" title="see type com.sun.star.lang.XTypeProvider">com.sun.star.lang.XTypeProvider</a></span> interface, two methods have to be coded. The first one, <span class="Codeintext">getTypes()</span> provides all implemented types of the implementation, excluding base types, such as <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XInterface.html" title="see type com.sun.star.uno.XInterface">com.sun.star.uno.XInterface</a></span>. The second one, <span class="Codeintext">getImplementationId()</span> provides a unique ID for this set of interfaces. A thread-safe implementation of the above mentioned looks like the following example: (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/CppComponent/service1_impl.cxx" title="goto source Components/CppComponent/service1_impl.cxx">Components/CppComponent/service1_impl.cxx</a>)</p>
  <p class="Code">Sequence&lt; Type &gt; MyService1Impl::getTypes()Â </p>
  <p class="Code">Â  Â  throw (RuntimeException)</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  Sequence&lt; Type &gt; seq( 3 );</p>
  <p class="Code">Â  Â  seq[ 0 ] = ::cppu::UnoType&lt; Reference&lt; lang::XTypeProvider &gt; &gt;::get();</p>
  <p class="Code">Â  Â  seq[ 1 ] = ::cppu::UnoType&lt; Reference&lt; lang::XServiceInfo &gt; &gt;::get();</p>
  <p class="Code">Â  Â  seq[ 2 ] = ::cppu::UnoType&lt; Reference&lt; ::my_module::XSomething &gt; &gt;::get();</p>
  <p class="Code">Â  Â  return seq;</p>
  <p class="Code">}Â </p>
  <p class="Code">Sequence&lt; sal_Int8 &gt; MyService1Impl::getImplementationId()Â </p>
  <p class="Code">Â  Â  throw (RuntimeException)</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  static Sequence&lt; sal_Int8 &gt; * s_pId = 0;</p>
  <p class="Code">Â  Â  if (! s_pId)</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  // create unique id</p>
  <p class="Code">Â  Â  Â  Â  Sequence&lt; sal_Int8 &gt; id( 16 );</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â  ::rtl_createUuid( (sal_uInt8 *)id.getArray(), 0, sal_True );</p>
  <p class="Code">Â  Â  Â  Â  // guard initialization with some mutex</p>
  <p class="Code">Â  Â  Â  Â  ::osl::MutexGuard guard( ::osl::Mutex::getGlobalMutex() );</p>
  <p class="Code">Â  Â  Â  Â  if (! s_pId)</p>
  <p class="Code">Â  Â  Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  static Sequence&lt; sal_Int8 &gt; s_id( id );</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  s_pId = &amp;s_id;</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  Â  return *s_pId;</p>
  <p class="Code">}Â </p>
  <p class="Paragraph">Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table32"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.596cm; " class="Table32A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./4 Writing UNO Components_files/important.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.454cm; " class="Table32B1">
      <p class="TipInTable">In general, do not <span class="Codeintext">acquire()</span> mutexes when calling alien code if you do not know what the called code is doing. You never know what mutexes the alien code is acquiring which can lead to deadlocks. This is the reason, why the latter value (uuid) is created before the initialization mutex is acquired. After the mutex is successfully acquired, the value of s_pID is checked again and assigned if it has not been assigned before. This is the design pattern known as âdouble-checked locking.â</p>
      <p class="TipInTable">The above initialization of the implementation ID does not work reliably on certain platforms. See <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/AdvancedUNO/AdvancedUNO.xhtml#1_4_1_Double-Checked_Locking" title="see chapter 6.4.1 Advanced UNO - Design Patterns - Double-Checked Locking">6.4.1 Advanced UNO - Design Patterns - Double-Checked Locking</a></span> for better ways to implemnt this.</p>
     </td></tr></table></div>
  <h4 class="Head4"><a name="1_6_6_3_Providing_a_Single_Factory" />Providing a Single Factory</h4>
  <p class="Paragraph">The function <span class="Codeintext">component_getFactory()</span> provides a single object factory for the requested implementation, that is, it provides a factory that creates object instances of one of the service implementations. Using a helper from <span class="wwwftpemail">cppuhelper/factory.hxx</span>, this is implemented quickly in the following code: (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/CppComponent/service1_impl.cxx" title="goto source Components/CppComponent/service1_impl.cxx">Components/CppComponent/service1_impl.cxx</a>)</p>
  <p class="Code">#include &lt;cppuhelper/factory.hxx&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">namespace my_sc_implÂ </p>
  <p class="Code">{Â </p>
  <p class="Code">...Â </p>
  <p class="Code">static Reference&lt; XInterface &gt; SAL_CALL <span class="CodeEmphasis">create_MyService1Impl</span>(</p>
  <p class="Code">Â  Â  Reference&lt; XComponentContext &gt; const &amp; xContext )</p>
  <p class="Code">Â  Â  SAL_THROW( () )</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  return static_cast&lt; lang::XTypeProvider * &gt;( new MyService1Impl() );</p>
  <p class="Code">}Â </p>
  <p class="Code">static Reference&lt; XInterface &gt; SAL_CALL <span class="CODEEmphasis">create_MyService2Impl</span>(</p>
  <p class="Code">Â  Â  Reference&lt; XComponentContext &gt; const &amp; xContext )</p>
  <p class="Code">Â  Â  SAL_THROW( () )</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  return static_cast&lt; lang::XTypeProvider * &gt;( new MyService2Impl() );</p>
  <p class="Code">}Â </p>
  <p class="Code">}Â </p>
  <p class="Code">Â </p>
  <p class="Code">extern "C" void * SAL_CALL component_getFactory(Â </p>
  <p class="Code">Â  Â  sal_Char const * implName, lang::XMultiServiceFactory * xMgr, void * )</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  Reference&lt; lang::XSingleComponentFactory &gt; xFactory;</p>
  <p class="Code">Â  Â  if (0 == ::rtl_str_compare( implName, "my_module.my_sc_impl.MyService1" ))</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  // create component factory for MyService1 implementation</p>
  <p class="Code">Â  Â  Â  Â  OUString serviceName( RTL_CONSTASCII_USTRINGPARAM("my_module.MyService1") );</p>
  <p class="Code">Â  Â  Â  Â  xFactory = ::cppu::createSingleComponentFactory(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  ::my_sc_impl::create_MyService1Impl,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  OUString( RTL_CONSTASCII_USTRINGPARAM("my_module.my_sc_impl.MyService1") ),</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Sequence&lt; OUString &gt;( &amp;serviceName, 1 ) );</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  Â  else if (0 == ::rtl_str_compare( implName, "my_module.my_sc_impl.MyService2" ))</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  // create component factory for MyService12 implementation</p>
  <p class="Code">Â  Â  Â  Â  OUString serviceName( RTL_CONSTASCII_USTRINGPARAM("my_module.MyService2") );</p>
  <p class="Code">Â  Â  Â  Â  xFactory = ::cppu::createSingleComponentFactory(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  ::my_sc_impl::create_MyService2Impl,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  OUString( RTL_CONSTASCII_USTRINGPARAM("my_module.my_sc_impl.MyService2") ),</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Sequence&lt; OUString &gt;( &amp;serviceName, 1 ) );</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  Â  if (xFactory.is())</p>
  <p class="Code">Â  Â  Â  Â  xFactory-&gt;acquire();</p>
  <p class="Code">Â  Â  return xFactory.get(); // return acquired interface pointer or null</p>
  <p class="Code">}Â </p>
  <p class="Paragraph">In the example above, note the function <span class="Codeintext">::my_sc_impl::create_MyService1Impl()</span> that is called by the factory object when it needs to instantiate the class. A component context <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XComponentContext.html" title="see type com.sun.star.uno.XComponentContext">com.sun.star.uno.XComponentContext</a></span> is provided to the function, which may be passed to the constructor of <span class="Codeintext">MyService1Impl</span>.</p>
  <h4 class="Head4"><a name="1_6_6_4_Write_Registration_Info" />Write Registration Info</h4>
  <p class="Paragraph">The function <span class="Codeintext">component_writeInfo()</span> is called by the shared library component loader upon registering the component into a registry database file (.<span class="wwwftpemail">rdb</span>). The component writes information about objects it can instantiate into the registry when it is called by <span class="wwwftpemail">regcomp</span> . (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/CppComponent/service1_impl.cxx" title="goto source Components/CppComponent/service1_impl.cxx">Components/CppComponent/service1_impl.cxx</a>)</p>
  <p class="Code">extern "C" sal_Bool SAL_CALL component_writeInfo(Â </p>
  <p class="Code">Â  Â  lang::XMultiServiceFactory * xMgr, registry::XRegistryKey * xRegistry )</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  if (xRegistry)</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  try</p>
  <p class="Code">Â  Â  Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // implementation of MyService1A</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Reference&lt; registry::XRegistryKey &gt; xKey(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xRegistry-&gt;createKey( OUString( RTL_CONSTASCII_USTRINGPARAM(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "my_module.my_sc_impl.MyService1/UNO/SERVICES") ) ) );</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // subkeys denote implemented services of implementation</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xKey-&gt;createKey( OUString( RTL_CONSTASCII_USTRINGPARAM(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  "my_module.MyService1") ) );</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // implementation of MyService1B</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xKey = xRegistry-&gt;createKey( OUString( RTL_CONSTASCII_USTRINGPARAM(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  "my_module.my_sc_impl.MyService2/UNO/SERVICES") ) );</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // subkeys denote implemented services of implementation</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xKey-&gt;createKey( OUString( RTL_CONSTASCII_USTRINGPARAM(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  "my_module.MyService2") ) );</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  return sal_True; // success</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  catch (registry::InvalidRegistryException &amp;)</p>
  <p class="Code">Â  Â  Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // function fails if exception caught</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  Â  return sal_False;</p>
  <p class="Code">}Â </p>
  <h3 class="Head3"><a name="1_6_7_Storing_the_Service_Manager_for_Further_Use" />4.6.7Â Â Storing the Service Manager for Further Use</h3>
  <p class="Paragraph">The single factories expect a static <span class="Codeintext">create_&lt;</span> <span class="T34">ImplementationClass&gt;</span> <span class="Codeintext">() </span>function. For instance, <span class="Codeintext">create_MyService1Impl()</span>takes a reference to the component context and instantiates the implementation class using <span class="Codeintext">new ImplementationClass()</span>. A constructor can be written for &lt;<span class="Codeintext">ImplementationClass&gt;</span> that expects a reference to an <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XComponentContext.html" title="see type com.sun.star.uno.XComponentContext">com.sun.star.uno.XComponentContext</a></span> and stores the reference in the instance for further use.</p>
  <p class="Code">static Reference&lt; XInterface &gt; SAL_CALL <span class="CodeEmphasis">create_MyService2Impl</span>(</p>
  <p class="Code">Â  Â  Reference&lt; XComponentContext &gt; const &amp; xContext )</p>
  <p class="Code">Â  Â  SAL_THROW( () )</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  // passing the component context to the constructor of MyService2Impl</p>
  <p class="Code">Â  Â  return static_cast&lt; lang::XTypeProvider * &gt;( new MyService2Impl( <span class="CODEEmphasis">xContext</span> ) );</p>
  <p class="Code">}Â </p>
  <h3 class="Head3"><a name="1_6_8_Create_Instance_with_Arguments" />4.6.8Â Â Create Instance with Arguments</h3>
  <p class="Paragraph">If the service should be raised passing arguments through <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XMultiComponentFactory.html#createInstanceWithArgumentsAndContext" title="see createInstanceWithArgumentsAndContext of type com.sun.star.lang.XMultiComponentFactory:createInstanceWithArgumentsAndContext">com.sun.star.lang.XMultiComponentFactory:createInstanceWithArgumentsAndContext</a>()</span> and <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XMultiServiceFactory.html#createInstanceWithArguments" title="see createInstanceWithArguments of type com.sun.star.lang.XMultiServiceFactory:createInstanceWithArguments">com.sun.star.lang.XMultiServiceFactory:createInstanceWithArguments</a>()</span>, it has to implement the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XInitialization.html" title="see type com.sun.star.lang.XInitialization">com.sun.star.lang.XInitialization</a></span>. The second service <span class="Codeintext">my_module.MyService2</span> implements it, expecting a single string as an argument. (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/Components/CppComponent/service2_impl.cxx" title="goto source Components/CppComponent/service2_impl.cxx">Components/CppComponent/service2_impl.cxx</a>)</p>
  <p class="Code">// XInitialization implementationÂ </p>
  <p class="Code">void MyService2Impl::initialize( Sequence&lt; Any &gt; const &amp; args )Â </p>
  <p class="Code">Â  Â  throw (Exception)</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  if (1 != args.getLength())</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  throw lang::IllegalArgumentException(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  OUString( RTL_CONSTASCII_USTRINGPARAM("give a string instanciating this component!") ),</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  (::cppu::OWeakObject *)this, // resolve to XInterface reference</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  0 ); // argument pos</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  Â  if (! (args[ 0 ] &gt;&gt;= m_arg))</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  throw lang::IllegalArgumentException(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  OUString( RTL_CONSTASCII_USTRINGPARAM("no string given as argument!") ),</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  (::cppu::OWeakObject *)this, // resolve to XInterface reference</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  0 ); // argument pos</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">}Â </p>
  <h3 class="Head3"><a name="1_6_9_Multiple_Components_in_One_Dynamic_Link_Library" />4.6.9Â Â Multiple Components in One Dynamic Link Library</h3>
  <p class="Paragraph">The construction of C++ components allows putting as many service implementations into a component file as desired. Ensure that the component operations are implemented in such a way that <span class="Codeintext">component_writeInfo()</span> and <span class="Codeintext">component_getFactory()</span> handle all services correctly. Refer to the sample component <span class="Codeintext">simple_component</span> to see an example on how to implement two services in one link library.</p>
  <h3 class="Head3"><a name="1_6_10_Building_and_Testing_C_2B_2B_Components" />4.6.10Â Â Building and Testing C++ Components</h3>
  <h4 class="Head4"><a name="1_6_10_1_Build_Process" />Build Process</h4>
  <p class="Paragraph">For details about building component code, see the gnu makefile. It uses a number of platform dependent variables used in the SDK that are included from <span class="wwwftpemail">&lt;SDK&gt;/settings/settings.mk</span>. For simplicity, details are omitted here, and the build process is just sketched in eight steps:</p>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P44" style="margin-left:2.5cm;"><p class="P44" style="margin-left:0cm;">The UNOIDL compiler compiles the .idl file <span class="wwwftpemail">some.idl </span>into an urd file.</p></li>
   <li class="P44" style="margin-left:2.5cm;"><p class="P44" style="margin-left:0cm;">The resulting binary .<span class="wwwftpemail">urd</span> files are merged into a new <span class="wwwftpemail">simple_component.rdb.</span> </p></li>
   <li class="P44" style="margin-left:2.5cm;"><p class="P44" style="margin-left:0cm;">The tool <span class="wwwftpemail">xml2cmp</span> parses the xml component description <span class="wwwftpemail">simple_component.xml</span> for types needed for compiling. This file describes the service implementation(s) for deployment, such as the purpose of the implementation(s) and used types. Visit http://udk.openoffice.org/common/man/module_description.html for details about the syntax of these XML files.</p></li>
   <li class="P44" style="margin-left:2.5cm;"><p class="P44" style="margin-left:0cm;">The types parsed in step 3 are passed to <span class="wwwftpemail">cppumaker</span>, which generates the appropriate header pairs into the output include directory using <span class="wwwftpemail">simple_component.rdb </span>and the OpenOffice.org type library <span class="wwwftpemail">types.rdb</span> that is stored in the program directory of your OpenOffice.org installation.</p></li>
  </ol>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table25"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table25A1">
      <div class="TableContents"><img width="39" height="39" alt="Tip graphics marks a hint section in the text" src="./4 Writing UNO Components_files/tip.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table25B1">
      <p class="TipInTable">For your own component you can simplify step 3 and 4, and pass the types used by your component to cppumaker using the -T option.Â </p>
     </td></tr></table></div>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P44" style="margin-left:2.5cm;"><p class="P44" style="margin-left:0cm;">The source files <span class="wwwftpemail">service1_impl.cxx</span> and <span class="wwwftpemail">service2_impl.cxx </span>are compiled.</p></li>
   <li class="P44" style="margin-left:2.5cm;"><p class="P44" style="margin-left:0cm;">The shared library is linked out of object files, linking dynamically to the UNO base libraries sal, cppu and cppuhelper. The shared library's name is <span class="wwwftpemail">libsimple_component.so </span>on Unix and <span class="wwwftpemail">simple_component.dll</span> on Windows.</p></li>
  </ol>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table5"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table5A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./4 Writing UNO Components_files/important.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table5B1">
      <p class="TipInTable">In general, the shared library component should limit its exports to only the above mentioned functions (prefixed with component_) to avoid symbol clashes on Unix. In addition, for the gnu gcc3 C++ compiler, it is necessary to export the RTTI symbols of exceptions, too.Â </p>
     </td></tr></table></div>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P44" style="margin-left:2.5cm;"><p class="P44" style="margin-left:0cm;">The shared library component is registered into <span class="wwwftpemail">simple_component.rdb</span>. This can also be done manually running</p></li>
  </ol>
  <p class="P45">$ regcomp -register -r simple_component.rdb -c simple_component.dllÂ </p>
  <h4 class="Head4"><a name="1_6_10_2_Test_Registration_and_Use" />Test Registration and Use</h4>
  <p class="Paragraph">The component's registry <span class="wwwftpemail">simple_component.rdb</span> has entries for the registered service implementations. If the library is registered successfully, run:</p>
  <p class="Code">$ regview simple_component.rdbÂ </p>
  <p class="Paragraph">The result should look similar to the following:Â </p>
  <p class="Output">/Â </p>
  <p class="Output">Â / UCR</p>
  <p class="Output">Â  Â / my_module</p>
  <p class="Output">Â  Â  Â / XSomething</p>
  <p class="Output">Â </p>
  <p class="Output">Â  Â  Â  Â ... interface information ...</p>
  <p class="Output">Â </p>
  <p class="Output">Â / IMPLEMENTATIONS</p>
  <p class="Output">Â  Â / my_module.my_sc_impl.MyService2</p>
  <p class="Output">Â  Â  Â / UNO</p>
  <p class="Output">Â  Â  Â  Â / ACTIVATOR</p>
  <p class="Output">Â  Â  Â  Â  Â Value: Type = RG_VALUETYPE_STRING</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Size = 34</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Data = "com.sun.star.loader.SharedLibrary"</p>
  <p class="Output">Â </p>
  <p class="Output">Â  Â  Â  Â / SERVICES</p>
  <p class="Output">Â  Â  Â  Â  Â / my_module.MyService2</p>
  <p class="Output">Â  Â  Â  Â / LOCATION</p>
  <p class="Output">Â  Â  Â  Â  Â Value: Type = RG_VALUETYPE_STRING</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Size = 21</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Data = "simple_component.dll"</p>
  <p class="Output">Â </p>
  <p class="Output">Â  Â / my_module.my_sc_impl.MyService1</p>
  <p class="Output">Â  Â  Â / UNO</p>
  <p class="Output">Â  Â  Â  Â / ACTIVATOR</p>
  <p class="Output">Â  Â  Â  Â  Â Value: Type = RG_VALUETYPE_STRING</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Size = 34</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Data = "com.sun.star.loader.SharedLibrary"</p>
  <p class="Output">Â </p>
  <p class="Output">Â  Â  Â  Â / SERVICES</p>
  <p class="Output">Â  Â  Â  Â  Â / my_module.MyService1</p>
  <p class="Output">Â  Â  Â  Â / LOCATION</p>
  <p class="Output">Â  Â  Â  Â  Â Value: Type = RG_VALUETYPE_STRING</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Size = 21</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Data = "simple_component.dll"</p>
  <p class="Output">Â </p>
  <p class="Output">Â / SERVICES</p>
  <p class="Output">Â  Â / my_module.MyService1</p>
  <p class="Output">Â  Â  Â Value: Type = RG_VALUETYPE_STRINGLIST</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Size = 40</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Len Â = 1</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Data = 0 = "my_module.my_sc_impl.MyService1"</p>
  <p class="Output">Â </p>
  <p class="Output">Â  Â / my_module.MyService2</p>
  <p class="Output">Â  Â  Â Value: Type = RG_VALUETYPE_STRINGLIST</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Size = 40</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Len Â = 1</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Data = 0 = "my_module.my_sc_impl.MyService2"</p>
  <p class="Paragraph">OpenOffice.org recognizes registry files being inserted into the <span class="wwwftpemail">unorc</span> file (on Unix, <span class="wwwftpemail">uno.ini</span> on Windows) in the program directory of your OpenOffice.org installation. Extend the types and services in that file by <span class="wwwftpemail">simple_component.rdb</span>. The given file has to be an absolute file URL, but if the rdb is copied to the OpenOffice.org program directory, a $ORIGIN macro can be used, as shown in the following <span class="wwwftpemail">unorc</span> file:</p>
  <p class="Code">[Bootstrap]Â </p>
  <p class="Code">UNO_TYPES=$ORIGIN/types.rdb $ORIGIN/simple_component.rdb<br />UNO_SERVICES=$ORIGIN/services.rdb $ORIGIN/simple_component.rdb</p>
  <p class="Paragraph">Second, when running OpenOffice.org, extend the PATH (Windows) or LD_LIBRARY_PATH (Unix), including the output path of the build, so that the loader finds the component. If the shared library is copied to the program directory or a link is created inside the program directory (Unix only), do not extend the path.Â </p>
  <p class="Paragraph">Launching the test component inside a OpenOffice.org Basic script is simple to do, as shown in the following code:Â </p>
  <p class="Code">Sub MainÂ </p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  REM calling service1 impl</p>
  <p class="Code">Â  Â  mgr = getProcessServiceManager()</p>
  <p class="Code">Â  Â  o = mgr.createInstance("my_module.MyService1")</p>
  <p class="Code">Â  Â  MsgBox o.methodOne("foo")</p>
  <p class="Code">Â  Â  MsgBox o.dbg_supportedInterfaces</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  REM calling service2 impl</p>
  <p class="Code">Â  Â  dim args( 0 )</p>
  <p class="Code">Â  Â  args( 0 ) = "foo"</p>
  <p class="Code">Â  Â  o = mgr.createInstanceWithArguments("my_module.MyService2", args())</p>
  <p class="Code">Â  Â  MsgBox o.methodOne("bar")</p>
  <p class="Code">Â  Â  MsgBox o.dbg_supportedInterfaces</p>
  <p class="Code">Â </p>
  <p class="Code">End SubÂ </p>
  <p class="Paragraph">This procedure instantiates the service implementations and performs calls on their interfaces. The return value of the <span class="Codeintext">methodOne()</span> call is brought up in message boxes. The Basic object property <span class="Codeintext">dbg_supportedInterfaces</span> retrieves its information through the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XTypeProvider.html" title="see type com.sun.star.lang.XTypeProvider">com.sun.star.lang.XTypeProvider</a></span> interfaces of the objects.</p>
  <h2 class="Head2"><a name="1_7_Integrating_Components_into_OpenOffice.org" />4.7Â Â Integrating Components into OpenOffice.org</h2>
  <p class="Paragraph">If a component needs to be called from the OpenOffice.org user interface, it must be able to take part in the communication between the UI layer and the application objects. OpenOffice.org uses command URLs for this purpose. When a user chooses an item in the user interface, a command URL is dispatched to the application framework and processed in a chain of responsibility until an object accepts the command and executes it, thus consuming the command URL. This mechanism is known as the <span class="Emphasis">dispatch framework</span> , it is covered in detail in chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/OfficeDev/OfficeDev.xhtml#1_1_6_Using_the_Dispatch_Framework" title="see chapter 7.1.6 Office Development - OpenOffice.org Application Environment - Using the Dispatch Framework">7.1.6 Office Development - OpenOffice.org Application Environment - Using the Dispatch Framework</a></span>.</p>
  <p class="Paragraph">From version 1.1.0, OpenOffice.org provides user interface support for custom components by two basic mechanisms:Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P46" style="margin-left:2.5cm;"><p class="P46" style="margin-left:0cm;">Components can be enabled to process command URLs. There are two ways to accomplish this. You can either make them a <span class="Emphasis">protocol handler</span> for command URLs or integrate them into the <span class="Emphasis">job execution environment</span> of OpenOffice.org. The protocol handler technique is simple, but it can only be used with command URLs in the dispatch framework. A component for the job execution environment can be used with or without command URLs, and has comprehensive support when it comes to configuration, job environment, and lifetime issues.</p></li>
   <li class="P46" style="margin-left:2.5cm;"><p class="P46" style="margin-left:0cm;">The user interface can be adjusted to new components. On the one hand, you can add new menus and toolbar items and configure them to send the command URLs needed for your component. On the other hand, it is possible to disable existing commands. All this is possible by adding certain files to the extension. When users of your component install the extension, the GUI is adjusted automatically.Â </p></li>
  </ul>
  <p class="Paragraph">The left side of <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#refIllustration1">Illustration 2</a> shows the two possibilities for processing command URLs: either custom protocol handlers or the specialized job protocol. On the right, you see the job execution environment, which is used by the job protocol, but can also be used without command URLs from any source code.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle5"><colgroup><col width="870" /></colgroup><tr><td style="text-align:left;width:19.05cm; " class="Tabelle5A1">
      <div class="Paragraph"><div style="width: 14.182cm; " id="Rahmen3" class="fr5">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/work_together.png" title="link to the full-sized graphic &quot;./work_together.png&quot;"><img border="0" width="633" height="753" alt="Overview graphics of processing command URLs in the the context of a job execution environment" src="./4 Writing UNO Components_files/work_together.png" class="fr4" /></a>Illustration <a name="refIllustration1">2</a>: Processing command URLs and the job execution environment</div>
       </div> </div>
     </td></tr></table></div>
  <p class="Paragraph">This section describes how to use these mechanisms. It discusses protocol handlers and jobs, then Â describes how to customize the OpenOffice.org user interface for components.</p>
  <h3 class="Head3"><a name="1_7_1_Protocol_Handler" />4.7.1Â Â Protocol Handler</h3>
  <p class="Paragraph">The dispatch framework binds user interface controls, such as menu or toolbar items, to the functionality of OpenOffice.org. Every function that is reachable in the user interface is described by a command URL and corresponding parameters.Â </p>
  <p class="Paragraph">The protocol handler mechanism is an API that enables programmers to add arbitrary URL schemas to the existing set of command URLs by writing additional protocol handlers for them. Such a protocol handler must be implemented as a UNO component and registered in the OpenOffice.org configuration for the new URL schema.Â </p>
  <h4 class="Head4"><a name="1_7_1_1_Overview" />Overview</h4>
  <p class="Paragraph">To issue a command URL, the first step is to locate a dispatch object that is responsible for the URL. Start with the frame that contains the document for which the command is meant. Its interface method <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XDispatchProvider.html#queryDispatch" title="see queryDispatch of type com.sun.star.frame.XDispatchProvider:queryDispatch">com.sun.star.frame.XDispatchProvider:queryDispatch</a>()</span>is called with a URL and special search parameters to locate the correct target. This request is passed through the following instances:</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle21"><colgroup><col width="211" /><col width="494" /></colgroup><tr><td style="text-align:left;width:4.611cm; " class="Tabelle21A1">
     <p class="TextInTable">disabling commandsÂ </p>
    </td><td style="text-align:left;width:10.821cm; " class="Tabelle21B1">
     <p class="TextInTable">Checks if command is on the list of disabled commands, described in <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_7_4_Disable_Commands" title="see chapter 4.7.4 Writing UNO Components - Integrating Components into OpenOffice.org - Disable Commands">4.7.4 Writing UNO Components - Integrating Components into OpenOffice.org - Disable Commands</a></span> </p>
    </td></tr><tr><td style="text-align:left;width:4.611cm; " class="Tabelle21A2">
     <p class="TextInTable">interceptionÂ </p>
    </td><td style="text-align:left;width:10.821cm; " class="Tabelle21B2">
     <p class="TextInTable">Intercepts command and re-routes it, described in <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/OfficeDev/OfficeDev.xhtml#1_1_6_5_Dispatch_Interception" title="see chapter 7.1.6 Office Development - OpenOffice.org Application Environment - Using the Dispatch Framework - Dispatch Interception">7.1.6 Office Development - OpenOffice.org Application Environment - Using the Dispatch Framework - Dispatch Interception</a></span> </p>
    </td></tr><tr><td style="text-align:left;width:4.611cm; " class="Tabelle21A2">
     <p class="TextInTable">targetingÂ </p>
    </td><td style="text-align:left;width:10.821cm; " class="Tabelle21B2">
     <p class="TextInTable">Determines target frame for command, described in <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/OfficeDev/OfficeDev.xhtml#1_1_5_1_3_Target_Frame" title="see chapter 7.1.5 Office Development - OpenOffice.org Application Environment - Handling Documents - Loading Documents - Target Frame">7.1.5 Office Development - OpenOffice.org Application Environment - Handling Documents - Loading Documents - Target Frame</a></span> </p>
    </td></tr><tr><td style="text-align:left;width:4.611cm; " class="Tabelle21A2">
     <p class="TextInTable">controllerÂ </p>
    </td><td style="text-align:left;width:10.821cm; " class="Tabelle21B2">
     <p class="TextInTable">Lets the controller of the frame try to handle the command, described in <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/OfficeDev/OfficeDev.xhtml#1_1_6_2_Processing_Chain" title="see chapter 7.1.6 Office Development - OpenOffice.org Application Environment - Using the Dispatch Framework - Processing Chain">7.1.6 Office Development - OpenOffice.org Application Environment - Using the Dispatch Framework - Processing Chain</a></span> </p>
    </td></tr><tr><td style="text-align:left;width:4.611cm; " class="Tabelle21A2">
     <p class="TextInTable">protocol handlerÂ </p>
    </td><td style="text-align:left;width:10.821cm; " class="Tabelle21B2">
     <p class="TextInTable">Determines if there is a custom handler for the command, described in this sectionÂ </p>
    </td></tr><tr><td style="text-align:left;width:4.611cm; " class="Tabelle21A2">
     <p class="TextInTable">interpret as loadable contentÂ </p>
    </td><td style="text-align:left;width:10.821cm; " class="Tabelle21B2">
     <p class="TextInTable">Loads content from file, described in <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/OfficeDev/OfficeDev.xhtml#1_1_5_1_2_URL_Parameter" title="see chapter 7.1.5 Office Development - OpenOffice.org Application Environment - Handling Documents - Loading Documents - URL Parameter">7.1.5 Office Development - OpenOffice.org Application Environment - Handling Documents - Loading Documents - URL Parameter</a></span>. Generally contents are loaded into a <span class="T35">frame by a </span><span class="T36"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/FrameLoader.html" title="see type com.sun.star.frame.FrameLoader">com.sun.star.frame.FrameLoader</a></span> <span class="T35">, but if a content (e.g. a sound) needs no frame, a </span><span class="T36"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/ContentHandler.html" title="see type com.sun.star.frame.ContentHandler">com.sun.star.frame.ContentHandler</a></span> <span class="T35">service is used, which needs no target frame for its operation</span>.</p>
    </td></tr></table></div>
  <p class="Paragraph">The list shows that the protocol handler will only be used if the URL has not been called before. Because targeting has already been done, it is clear that the command will run in the located target frame environment, which is usually <span class="Codeintext">"_self"</span>.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle22"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Tabelle22A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./4 Writing UNO Components_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Tabelle22B1">
      <p class="TipInTable">The target "_blank" cannot be used for a protocol handler. Since "_blank" leads to the creation of a new frame for a component, there would be no component yet for the protocol handler to work with.Â </p>
     </td></tr></table></div>
  <p class="Paragraph">A protocol handler decides by itself if it returns a valid dispatch object, that is, it is asked to agree with the given request by the dispatch framework. If a dispatch object is returned, the requester can use it to dispatch the URL by calling its <span class="Codeintext">dispatch()</span> method.</p>
  <h4 class="Head4"><a name="1_7_1_2_Implementation" />Implementation</h4>
  <p class="Paragraph">A protocol handler implementation must follow the service definition <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/ProtocolHandler.html" title="see type com.sun.star.frame.ProtocolHandler">com.sun.star.frame.ProtocolHandler</a></span>. At least the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XDispatchProvider.html" title="see type com.sun.star.frame.XDispatchProvider">com.sun.star.frame.XDispatchProvider</a></span> must be supported. </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle13"><colgroup><col width="870" /></colgroup><tr><td style="text-align:left;width:19.05cm; " class="Tabelle13A1">
      <div class="Paragraph"><div style="width: 13.099cm; " id="Rahmen5" class="fr5">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/ProtocolHandler.png" title="link to the full-sized graphic &quot;./ProtocolHandler.png&quot;"><img border="0" width="575" height="130" alt="UML diagram showing the com.sun.star.frame.ProtocolHandler service" src="./4 Writing UNO Components_files/ProtocolHandler.png" class="fr4" /></a>Illustration <a name="refIllustration2">3</a>: Protocol handler</div>
       </div> </div>
     </td></tr></table></div>
  <p class="Paragraph">The interface <span class="Codeintext">XDispatchProvider</span> supports two methods:</p>
  <p class="MethodSignatures">XDispatch <span class="MethodSignatureEmphasis">queryDispatch</span>( Â [in] ::com::sun::star::util::URL URL, </p>
  <p class="MethodSignatures">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  [in] string Â TargetFrameName,</p>
  <p class="MethodSignatures">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  [in] long SearchFlags )</p>
  <p class="MethodSignatures">sequence&lt; XDispatch &gt; <span class="MethodSignatureEmphasis">queryDispatches</span>( Â [in] sequence&lt; DispatchDescriptor &gt; Â Requests )</p>
  <p class="MethodSignatures">Â </p>
  <p class="Paragraph">The protocol handler is asked for its agreement to execute a given URL by a call to the interface method <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XDispatchProvider.html#queryDispatch" title="see queryDispatch of type com.sun.star.frame.XDispatchProvider:queryDispatch">com.sun.star.frame.XDispatchProvider:queryDispatch</a>()</span>. The incoming URL should be parsed and validated. If the URL is valid and the protocol handler is able to handle it, it should return a dispatch object, thus indicating that it accepts the request.</p>
  <p class="Paragraph">The dispatch object must support the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XDispatch.html" title="see type com.sun.star.frame.XDispatch">com.sun.star.frame.XDispatch</a></span> with the methods</p>
  <p class="MethodSignatures">[oneway] void <span class="MethodSignatureEmphasis">dispatch</span>( Â [in] ::com::sun::star::util::URL URL,</p>
  <p class="MethodSignatures">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â [in] sequence&lt; ::com::sun::star::beans::PropertyValue &gt; Â Arguments )</p>
  <p class="MethodSignatures">addStatusListener [oneway] void <span class="MethodSignatureEmphasis">addStatusListener</span>( Â [in] XStatusListener Control,</p>
  <p class="MethodSignatures">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  [in] ::com::sun::star::util::URL Â URL )</p>
  <p class="MethodSignatures">removeStatusListener [oneway] void <span class="MethodSignatureEmphasis">removeStatusListener</span>( Â [in] XStatusListener Control,</p>
  <p class="MethodSignatures">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  [in] ::com::sun::star::util::URL Â URL )</p>
  <p class="Paragraph">Optionally, the dispatch object can support the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XNotifyingDispatch.html" title="see type com.sun.star.frame.XNotifyingDispatch">com.sun.star.frame.XNotifyingDispatch</a></span>, which derives from <span class="Codeintext">XDispatch</span> and introduces a new method <span class="Codeintext">dispatchWithNotification()</span>. This interface is preferred if it is present.</p>
  <p class="MethodSignatures">[oneway] void <span class="MethodSignatureEmphasis">dispatchWithNotification</span>(</p>
  <p class="MethodSignatures">Â  Â  Â  Â  [in] com::sun::star::util::URL URL,</p>
  <p class="MethodSignatures">Â  Â  Â  Â  [in] sequence&lt;com::sun::star::beans::PropertyValue&gt; Arguments,</p>
  <p class="MethodSignatures">Â  Â  Â  Â  [in] com::sun::star::frame::XDispatchResultListener Listener);</p>
  <p class="Paragraph">A basic protocol handler is free to implement <span class="Codeintext">XDispatch</span> itself, so it can simply return itself in the <span class="Codeintext">queryDispatch()</span> implementation. But it is advisable to return specialized helper dispatch objects instead of the protocol handler instance. This helps to decrease the complexity of status updates. It is easier to notify status listeners for a single-use dispatch object instead of multi-use dispatch objects, which have to distinguish the URLs given in <span class="Codeintext">addStatusListener()</span> all the time.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle9"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.596cm; " class="Tabelle9A1">
      <div class="TableContents"><img width="39" height="39" alt="Tip graphics marks a hint section in the text" src="./4 Writing UNO Components_files/tip.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.454cm; " class="Tabelle9B1">
      <p class="TipInTable">To supply the UI with status information for a command, it is required to call back a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XStatusListener.html" title="see type com.sun.star.frame.XStatusListener">com.sun.star.frame.XStatusListener</a></span> during its registration immediately, for example:</p>
      <p class="P47">public void addStatusListener(XStatusListener xControl, URL aURL) {<br /> Â  Â FeatureStateEvent aState = new FeatureStateEvent();<br /> Â  Â aState.FeatureURL = aURL;<br /> Â  Â aState.IsEnabled Â = true;<br /> Â  Â aState.State Â  Â  Â = Boolean.TRUE;<br /> Â  Â xControl.statusChanged(aState);<br /> Â  Â m_lListenerContainer.add(xControl);<br />}</p>
     </td></tr></table></div>
  <p class="Paragraph">A protocol handler can support the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XInitialization.html" title="see type com.sun.star.lang.XInitialization">com.sun.star.lang.XInitialization</a></span> if it wants to be initialized with a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/Frame.html" title="see type com.sun.star.frame.Frame">com.sun.star.frame.Frame</a></span> environment to work with. <span class="Codeintext">XInitialization</span> contains one method:</p>
  <p class="MethodSignatures">void <span class="MethodSignatureEmphasis">initialize</span>( Â [in] sequence&lt; any &gt; aArguments )</p>
  <p class="Paragraph">A protocol handler is generally used in a well known <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/Frame.html" title="see type com.sun.star.frame.Frame">com.sun.star.frame.Frame</a></span> context, therefore the dispatch framework always passes this frame context through <span class="Codeintext">initialize()</span> as the first argument, if <span class="Codeintext">XInitialization</span> is present. Its <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XFrame.html" title="see type com.sun.star.frame.XFrame">com.sun.star.frame.XFrame</a></span> interface provides access to the controller, from which you can get the document model and have a good starting point to work with the document.</p>
  <p class="Paragraph"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#refIllustration2">Illustration 3</a> shows how to get to the controller and the document model from an <span class="Codeintext">XFrame</span> interface. The chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/OfficeDev/OfficeDev.xhtml#1_1_3_Using_the_Component_Framework" title="see chapter 7.1.3 Office Development - OpenOffice.org Application Environment - Using the Component Framework">7.1.3 Office Development - OpenOffice.org Application Environment - Using the Component Framework</a></span> describes the usage of frames, controllers and models in more detail.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle29"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Tabelle29A1">
      <div class="Paragraph"><div style="width: 15.266cm; " id="Rahmen7" class="fr6">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/OfficeDev/FCMNavigation.png" title="link to the full-sized graphic &quot;./../OfficeDev/FCMNavigation.png&quot;"><img border="0" width="675" height="462" alt="UML diagram showing the frame-controller-model organisation" src="./4 Writing UNO Components_files/FCMNavigation.png" class="fr7" /></a>Illustration <a name="refIllustration3">4</a>: Frame-controller-model organization</div>
       </div> </div>
     </td></tr></table></div>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle14"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Tabelle14A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./4 Writing UNO Components_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Tabelle14B1">
      <p class="TipInTable">A protocol handler can be implemented as a singleton, but this poses multithreading difficulties. In a multithreaded environment it is most unlikely that the initial frame context matches every following dispatch request. So you have to be prepared for calls to <span class="Codeintext">initialize()</span> by multiple threads for multiple frames. A dispatch object can also be used more then once, but must be bound to the target frame that was specified in the original <span class="Codeintext">queryDispatch()</span>call. A change of the frame context can cause trouble if the protocol handler returns itself as a dispatch object. A protocol handler singleton must return new dispatch objects for every request, which has to be initialized with the current context of the protocol handler, and you have to synchronize between <span class="Codeintext">initialize()</span> and <span class="Codeintext">queryDispatch()</span>. The protocol handler would have to serve as a kind of factory for specialized dispatch objects. <br />You can avoid these problems, if you write your protocol handler as a multi-instance service.</p>
     </td></tr></table></div>
  <p class="Paragraph">The opportunity to deny a <span class="Codeintext">queryDispatch()</span> call allows you to register a protocol handler for a URL schema using wildcards, and to accept only a subset of all possible URLs. That way the handler object can validate incoming URLs and reject them if they appear to be invalid. However, this feature should not be used to register different protocol handlers for the same URL schema and accept different subsets by different handler objects, because it would be very difficult to avoid ambiguities.</p>
  <p class="Paragraph">Since a protocol handler is a UNO component, it must contain the component operations needed by a UNO service manager. These operations are certain static methods in Java or export functions in C++. It also has to implement the core interfaces used to enable communication with UNO and the application environment. For more information on the component operations and core interfaces, please see <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_3_Component_Architecture" title="see chapter 4.3 Writing UNO Components - Component Architecture">4.3 Writing UNO Components - Component Architecture</a></span> and <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_4_Core_Interfaces_to_Implement" title="see chapter 4.4 Writing UNO Components - Core Interfaces to Implement">4.4 Writing UNO Components - Core Interfaces to Implement</a></span>.</p>
  <h5 class="Head5"><a name="1_7_1_2_1_Java_Protocol_Handler_-_vnd.sun.star.framework.ExampleHandler" />Java Protocol Handler - vnd.sun.star.framework.ExampleHandler</h5>
  <p class="Paragraph">The following example shows a simple protocol handler implementation in Java. For simplicity, the component operations are <span class="T37">omitted.</span> </p>
  <p class="Code">// importsÂ </p>
  <p class="Code">#import com.sun.star.beans.*;Â </p>
  <p class="Code">#import com.sun.star.frame.*;Â </p>
  <p class="Code">#import com.sun.star.uno.*;Â </p>
  <p class="Code">#import com.sun.star.util.*;Â </p>
  <p class="Code">Â </p>
  <p class="Code">// definitionÂ </p>
  <p class="Code">public class <span class="CodeEmphasis">ExampleHandler</span> implements <span class="CodeEmphasis">com.sun.star.frame.XDispatchProvider</span>,</p>
  <p class="Code"><span class="CodeEmphasis">Â  Â  Â  Â  com.sun.star.lang.XInitialization </span>{</p>
  <p class="Code">Â  Â  // member</p>
  <p class="Code">Â  Â  /** points to the frame context in which this handler runs, is set in initialize()*/</p>
  <p class="Code">Â  Â  private com.sun.star.frame.XFrame m_xContext;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  // Dispatch object as inner class</p>
  <p class="Code">Â  Â  <span class="CodeEmphasis">class OwnDispatch implements com.sun.star.frame.XDispatch </span>{</p>
  <p class="Code">Â  Â  Â  Â  /** the target frame, in which context this dispatch must work */</p>
  <p class="Code">Â  Â  Â  Â  private com.sun.star.frame.XFrame m_xContext;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  /** describe the function of this dispatch.</p>
  <p class="Code">Â  Â  Â  Â  Â * Â Because a URL can contain e.g. optional arguments</p>
  <p class="Code">Â  Â  Â  Â  Â * Â this URL means the main part of such URL sets only. */</p>
  <p class="Code">Â  Â  Â  Â  private com.sun.star.util.URL m_aMainURL;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  /** contains all interested status listener for this dispatch */</p>
  <p class="Code">Â  Â  Â  Â  private java.lang.HashMap m_lListener;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  /** take over all neccessary parameters from outside. */</p>
  <p class="Code">Â  Â  Â  Â  public <span class="CodeEmphasis">OwnDispatch</span>(com.sun.star.frame.XFrame xContext, com.sun.star.util.URL aMainURL) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  m_xContext = xContext;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  m_aMainURL = aMainURL;</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  /** execute the functionality, which is described by this URL.</p>
  <p class="Code">Â  Â  Â  Â  Â *</p>
  <p class="Code">Â  Â  Â  Â  Â * Â @param Â aURL</p>
  <p class="Code">Â  Â  Â  Â  Â * Â  Â  Â  Â  Â this URL can describe the main function, we already know;</p>
  <p class="Code">Â  Â  Â  Â  Â * Â  Â  Â  Â  Â but it can specify a sub function too! But queryDispatch()</p>
  <p class="Code">Â  Â  Â  Â  Â * Â  Â  Â  Â  Â and dispatch() are used in a generic way ...</p>
  <p class="Code">Â  Â  Â  Â  Â * Â  Â  Â  Â  Â m_aMainURL and aURL will be the same.</p>
  <p class="Code">Â  Â  Â  Â  Â *</p>
  <p class="Code">Â  Â  Â  Â  Â * Â @param Â lArgs</p>
  <p class="Code">Â  Â  Â  Â  Â * Â  Â  Â  Â  Â optional arguments for this request</p>
  <p class="Code">Â  Â  Â  Â  Â */</p>
  <p class="Code">Â  Â  Â  Â  public void <span class="CodeEmphasis">dispatch</span>(com.sun.star.util.URL aURL, com.sun.star.beans.PropertyValue lArgs)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  throws com.sun.star.uno.RuntimeException {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // ... do function</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // ... inform listener if neccessary</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  /** register a new listener and bind it toe given URL.</p>
  <p class="Code">Â  Â  Â  Â  Â *</p>
  <p class="Code">Â  Â  Â  Â  Â * Â Note: Because the listener does not know the current state</p>
  <p class="Code">Â  Â  Â  Â  Â * Â and may nobody change it next time, it is neccessary to inform it</p>
  <p class="Code">Â  Â  Â  Â  Â * Â immediatly about this current state. So the listener is up to date.</p>
  <p class="Code">Â  Â  Â  Â  Â */</p>
  <p class="Code">Â  Â  Â  Â  public void <span class="CodeEmphasis">addStatusListener</span>(com.sun.star.frame.XStatusListener xListener,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.util.URL aURL) throws com.sun.star.uno.RuntimeException {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // ... register listener for given URL</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // ... inform it immediatly about current state!</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xListener.statusChanged(...);</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  /** deregister a listener for this URL. */</p>
  <p class="Code">Â  Â  Â  Â  public void <span class="CodeEmphasis">removeStatusListener</span>(com.sun.star.frame.XStatusListener xListener,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.util.URLaURL) throws com.sun.star.uno.RuntimeException {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // ... deregister listener for given URL</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  /** set the target frame reference as context for all following dispatches. */</p>
  <p class="Code">Â  Â  public void <span class="CodeEmphasis">initialize</span>(com.sun.star.uno.Any[] lContext) {</p>
  <p class="Code">Â  Â  Â  Â  m_xContext = (com.sun.star.frame.XFrame)com.sun.star.uno.AnyConverter.toObject(lContext[0]);</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  /** should return a valid dispatch object for the given URL.</p>
  <p class="Code">Â  Â  Â *</p>
  <p class="Code">Â  Â  Â * Â In case the URL is not valid an empty reference can be returned.</p>
  <p class="Code">Â  Â  Â * Â The parameter sTarget and nFlags can be ignored. The will be "_self" and 0</p>
  <p class="Code">Â  Â  Â * Â everytime.</p>
  <p class="Code">Â  Â  Â */</p>
  <p class="Code">Â  Â  public com.sun.star.frame.XDispatch <span class="CodeEmphasis">queryDispatch</span>(com.sun.star.util.URL aURL,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  java.lang.String sTarget, int nFlags ) throws com.sun.star.uno.RuntimeException {</p>
  <p class="Code">Â  Â  Â  Â  // check if given URL is valid for this protocol handler</p>
  <p class="Code">Â  Â  Â  Â  if (!aURL.Main.startsWith("myProtocol_1://") &amp;&amp; !aURL.Main.startsWith("myProtocol_2://"))</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  return null;</p>
  <p class="Code">Â  Â  Â  Â  // and return a specialized dispatch object</p>
  <p class="Code">Â  Â  Â  Â  // Of course "return this" would be possible too ...</p>
  <p class="Code">Â  Â  Â  Â  return (com.sun.star.frame.XDispatch)(new OwnDispatch(m_xContext, aURL));</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  /** optimized API call for remote.</p>
  <p class="Code">Â  Â  Â *</p>
  <p class="Code">Â  Â  Â * Â It should be forwarded to queryDispatch() for every request item of the</p>
  <p class="Code">Â  Â  Â * Â given DispatchDescriptor list.</p>
  <p class="Code">Â  Â  Â *</p>
  <p class="Code">Â  Â  Â * Â But note: it is not allowed to pack the return list of dispatch objects.</p>
  <p class="Code">Â  Â  Â * Â Every request in source list must match to a reference (null or valid) in</p>
  <p class="Code">Â  Â  Â * Â the destination list!</p>
  <p class="Code">Â  Â  Â */</p>
  <p class="Code">Â  Â  public com.sun.star.frame.XDispatch[] <span class="CodeEmphasis">queryDispatches</span>( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  com.sun.star.frame.DispatchDescriptor[] lRequests) throws com.sun.star.uno.RuntimeException {</p>
  <p class="Code">Â  Â  Â  Â  int c = lRequests.length;</p>
  <p class="Code">Â  Â  Â  Â  com.sun.star.frame.XDispatch[] lDispatches = new com.sun.star.frame.XDispatch[c];</p>
  <p class="Code">Â  Â  Â  Â  for (int i=0; i&lt;c; ++i)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  lDispatches[i] = queryDispatch(lRequests[i].FeatureURL,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  lRequests[i].FrameName, lRequests[i].SearchFlags);</p>
  <p class="Code">Â  Â  Â  Â  return lDispatches;</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">}Â </p>
  <h5 class="Head5"><a name="1_7_1_2_2_C_2B_2B_Protocol_Handler_-_org.openoffice.Office.addon.example" />C++ Protocol Handler - org.openoffice.Office.addon.example</h5>
  <p class="Paragraph">The next example shows a protocol handler in C++. The section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_7_3_User_Interface_Add-Ons" title="see chapter 4.7.3 Writing UNO Components - Integrating Components into OpenOffice.org - User Interface Add-Ons">4.7.3 Writing UNO Components - Integrating Components into OpenOffice.org - User Interface Add-Ons</a></span> below will integrate this example handler into the graphical user interface of OpenOffice.org.</p>
  <p class="Paragraph">The following code shows the UNO component operations that must be implemented in a C++ protocol handler example. The three C functions return vital information to the UNO environment:Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P48" style="margin-left:2.5cm;"><p class="P48" style="margin-left:0cm;"><span class="Codeintext">component_getImplementationEnvironment()</span>tells the shared library component loader which compiler was used to build the library.</p></li>
   <li class="P48" style="margin-left:2.5cm;"><p class="P48" style="margin-left:0cm;"><span class="Codeintext">component_writeInfo()</span>is called during the registration process by the registration tool <span class="wwwftpemail">regcomp</span> , or indirectly when you Â use the Extension Manager.</p></li>
   <li class="P48" style="margin-left:2.5cm;"><p class="P48" style="margin-left:0cm;"><span class="Codeintext">component_getFactory()</span>provides a single service factory for the requested implementation. This factory can be asked to create an arbitrary number of instances for only one service specification, therefore it is called a single service factory, as opposed to a multi-service factory, where you can order instances for many different service specifications. (A single service factory has nothing to do with a singleton).</p></li>
  </ul>
  <p class="Code">#include &lt;stdio.h&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">#ifndef _RTL_USTRING_HXX_Â </p>
  <p class="Code">#include &lt;rtl/ustring.hxx&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">Â </p>
  <p class="Code">#ifndef _CPPUHELPER_QUERYINTERFACE_HXX_Â </p>
  <p class="Code">#include &lt;cppuhelper/queryinterface.hxx&gt; // helper for queryInterface() implÂ </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">#ifndef _CPPUHELPER_FACTORY_HXX_Â </p>
  <p class="Code">#include &lt;cppuhelper/factory.hxx&gt; // helper for component factoryÂ </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">// generated c++ interfacesÂ </p>
  <p class="Code">Â </p>
  <p class="Code">#ifndef _COM_SUN_STAR_LANG_XSINGLESERVICEFACTORY_HPP_Â </p>
  <p class="Code">#include &lt;com/sun/star/lang/XSingleServiceFactory.hpp&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">#ifndef _COM_SUN_STAR_LANG_XMULTISERVICEFACTORY_HPP_Â </p>
  <p class="Code">#include &lt;com/sun/star/lang/XMultiServiceFactory.hpp&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">#ifndef _COM_SUN_STAR_LANG_XSERVICEINFO_HPP_Â </p>
  <p class="Code">#include &lt;com/sun/star/lang/XServiceInfo.hpp&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">#ifndef _COM_SUN_STAR_REGISTRY_XREGISTRYKEY_HPP_Â </p>
  <p class="Code">#include &lt;com/sun/star/registry/XRegistryKey.hpp&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">Â </p>
  <p class="Code">// include our specific addon header to get access to functions and definitionsÂ </p>
  <p class="Code">#include &lt;addon.hxx&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">using namespace ::rtl;Â </p>
  <p class="Code">using namespace ::osl;Â </p>
  <p class="Code">using namespace ::cppu;Â </p>
  <p class="Code">using namespace ::com::sun::star::uno;Â </p>
  <p class="Code">using namespace ::com::sun::star::lang;Â </p>
  <p class="Code">using namespace ::com::sun::star::registry; Â </p>
  <p class="Code">Â </p>
  <p class="Code">//##################################################################################################Â </p>
  <p class="Code">//#### EXPORTED ####################################################################################Â </p>
  <p class="Code">//##################################################################################################Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â </p>
  <p class="Code">/**Â </p>
  <p class="Code">Â * Gives the environment this component belongs to.</p>
  <p class="Code">Â */</p>
  <p class="Code">extern "C" void SAL_CALL component_getImplementationEnvironment(const sal_Char ** ppEnvTypeName, uno_Environment ** ppEnv)Â </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  Â  Â  *ppEnvTypeName = CPPU_CURRENT_LANGUAGE_BINDING_NAME;</p>
  <p class="Code">}Â </p>
  <p class="Code">Â </p>
  <p class="Code">/**Â </p>
  <p class="Code">Â * This function creates an implementation section in the registry and another subkey</p>
  <p class="Code">Â *</p>
  <p class="Code">Â * for each supported service.</p>
  <p class="Code">Â * @param pServiceManager Â  the service manager</p>
  <p class="Code">Â * @param pRegistryKey Â  Â  Â the registry key</p>
  <p class="Code">Â */</p>
  <p class="Code">extern "C" sal_Bool SAL_CALL component_writeInfo(void * pServiceManager, void * pRegistryKey) {Â </p>
  <p class="Code">Â  Â  sal_Bool result = sal_False;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  if (pRegistryKey) {</p>
  <p class="Code">Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Reference&lt; XRegistryKey &gt; xNewKey(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  reinterpret_cast&lt; XRegistryKey * &gt;( pRegistryKey )-&gt;createKey(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  OUString( RTL_CONSTASCII_USTRINGPARAM("/" IMPLEMENTATION_NAME "/UNO/SERVICES")) ) );</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â   </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  const Sequence&lt; OUString &gt; &amp; rSNL = Addon_getSupportedServiceNames();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  const OUString * pArray = rSNL.getConstArray();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  for ( sal_Int32 nPos = rSNL.getLength(); nPos--; )</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â xNewKey-&gt;createKey( pArray[nPos] );</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â   </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  return sal_True;</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  catch (InvalidRegistryException &amp;) {</p>
  <p class="Code">Â  Â  Â  Â   Â  Â // we should not ignore exceptions</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  Â  return result;</p>
  <p class="Code">}Â </p>
  <p class="Code">Â </p>
  <p class="Code">/**Â </p>
  <p class="Code">Â * This function is called to get service factories for an implementation.</p>
  <p class="Code">Â *</p>
  <p class="Code">Â * @param pImplName Â  Â  Â  name of implementation</p>
  <p class="Code">Â * @param pServiceManager a service manager, need for component creation</p>
  <p class="Code">Â * @param pRegistryKey Â  Â the registry key for this component, need for persistent data</p>
  <p class="Code">Â * @return a component factory </p>
  <p class="Code">Â */</p>
  <p class="Code">extern "C" void * SAL_CALL component_getFactory(const sal_Char * pImplName,Â </p>
  <p class="Code">Â  Â  Â  Â  void * pServiceManager, void * pRegistryKey) {</p>
  <p class="Code">Â  Â  void * pRet = 0;</p>
  <p class="Code">Â  Â  Â  Â   </p>
  <p class="Code">Â  Â  if (rtl_str_compare( pImplName, IMPLEMENTATION_NAME ) == 0) {</p>
  <p class="Code">Â  Â  Â  Â  Reference&lt; XSingleServiceFactory &gt; xFactory(createSingleFactory(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  reinterpret_cast&lt; XMultiServiceFactory * &gt;(pServiceManager),</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  OUString(RTL_CONSTASCII_USTRINGPARAM(IMPLEMENTATION_NAME)),</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Addon_createInstance,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Addon_getSupportedServiceNames()));</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  if (xFactory.is()) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xFactory-&gt;acquire();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  pRet = xFactory.get();</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  return pRet;</p>
  <p class="Code">} Â </p>
  <p class="Code">Â </p>
  <p class="Code">//##################################################################################################<br />//#### Helper functions for the implementation of UNO component interfaces #########################<br />//##################################################################################################<br /> </p>
  <p class="Code">::rtl::OUString Addon_getImplementationName()Â </p>
  <p class="Code">throw (RuntimeException) {Â </p>
  <p class="Code">Â  Â  return ::rtl::OUString ( RTL_CONSTASCII_USTRINGPARAM ( IMPLEMENTATION_NAME ) );</p>
  <p class="Code">}Â </p>
  <p class="Code">Â </p>
  <p class="Code">sal_Bool SAL_CALL Addon_supportsService( const ::rtl::OUString&amp; ServiceName )Â </p>
  <p class="Code">throw (RuntimeException)Â </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  return ServiceName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM ( SERVICE_NAME ) );</p>
  <p class="Code">}Â </p>
  <p class="Code">Â </p>
  <p class="Code">Sequence&lt; ::rtl::OUString &gt; SAL_CALL Addon_getSupportedServiceNames()Â </p>
  <p class="Code">throw (RuntimeException)Â </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  Â  Â  Sequence &lt; ::rtl::OUString &gt; aRet(1);</p>
  <p class="Code">Â  Â  ::rtl::OUString* pArray = aRet.getArray();</p>
  <p class="Code">Â  Â  pArray[0] = Â ::rtl::OUString ( RTL_CONSTASCII_USTRINGPARAM ( SERVICE_NAME ) );</p>
  <p class="Code">Â  Â  return aRet;</p>
  <p class="Code">}Â </p>
  <p class="Code">Â </p>
  <p class="Code">Reference&lt; XInterface &gt; SAL_CALL Addon_createInstance( const Reference&lt; XMultiServiceFactory &gt; &amp; rSMgr)Â </p>
  <p class="Code">Â  Â  Â  Â  throw( Exception )</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  Â  Â  return (cppu::OWeakObject*) new Addon( rSMgr );</p>
  <p class="Code">}Â </p>
  <p class="Paragraph">The C++ protocol handler in the example has the implementation name <span class="Codeintext">org.openoffice.Office.addon.example</span>. It supports the URL protocol schema <span class="wwwftpemail">org.openoffice.Office.addon.example: </span><span class="T38">and provides three different URL commands: </span><span class="T39">Function1</span> <span class="T38">, </span><span class="T39">Function2</span> <span class="T38">and </span><span class="T39">Help</span>.</p>
  <p class="Paragraph"><span class="T38">The protocol handler implements the </span><span class="T39"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XDispatch.html" title="see type com.sun.star.frame.XDispatch">com.sun.star.frame.XDispatch</a></span> interface, so it can return a reference to itself when it is queried for a dispatch object that matches the given URL.</p>
  <p class="Paragraph"><span class="T38">The implementation of the </span><span class="T39">dispatch()</span> <span class="T38">method below shows how the supported commands are routed inside the protocol handler. Based on the path part of the URL, a simple message box displays which function has been called. The message box is implemented using the UNO toolkit and uses the container windows of the given frame as parent window.</span> </p>
  <p class="Code">#ifndef _Addon_HXXÂ </p>
  <p class="Code">#include &lt;addon.hxx&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">#ifndef _OSL_DIAGNOSE_H_Â </p>
  <p class="Code">#include &lt;osl/diagnose.h&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">#ifndef _RTL_USTRING_HXX_Â </p>
  <p class="Code">#include &lt;rtl/ustring.hxx&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">#ifndef _COM_SUN_STAR_LANG_XMULTISERVICEFACTORY_HPP_Â </p>
  <p class="Code">#include &lt;com/sun/star/lang/XMultiServiceFactory.hpp&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">#ifndef _COM_SUN_STAR_BEANS_PROPERTYVALUE_HPP_Â </p>
  <p class="Code">#include &lt;com/sun/star/beans/PropertyValue.hpp&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">#ifndef _COM_SUN_STAR_FRAME_XFRAME_HPP_Â </p>
  <p class="Code">#include &lt;com/sun/star/frame/XFrame.hpp&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">#ifndef _COM_SUN_STAR_FRAME_XCONTROLLER_HPP_Â </p>
  <p class="Code">#include &lt;com/sun/star/frame/XController.hpp&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">#ifndef _COM_SUN_STAR_AWT_XTOOLKIT_HPP_Â </p>
  <p class="Code">#include &lt;com/sun/star/awt/XToolkit.hpp&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">#ifndef _COM_SUN_STAR_AWT_XWINDOWPEER_HPP_Â </p>
  <p class="Code">#include &lt;com/sun/star/awt/XWindowPeer.hpp&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">#ifndef _COM_SUN_STAR_AWT_WINDOWATTRIBUTE_HPP_Â </p>
  <p class="Code">#include &lt;com/sun/star/awt/WindowAttribute.hpp&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">#ifndef _COM_SUN_STAR_AWT_XMESSAGEBOX_HPP_Â </p>
  <p class="Code">#include &lt;com/sun/star/awt/XMessageBox.hpp&gt;Â </p>
  <p class="Code">#endifÂ </p>
  <p class="Code">Â </p>
  <p class="Code">using rtl::OUString;Â </p>
  <p class="Code">using namespace com::sun::star::uno;Â </p>
  <p class="Code">using namespace com::sun::star::frame;Â </p>
  <p class="Code">using namespace com::sun::star::awt;Â </p>
  <p class="Code">using com::sun::star::lang::XMultiServiceFactory;Â </p>
  <p class="Code">using com::sun::star::beans::PropertyValue;Â </p>
  <p class="Code">using com::sun::star::util::URL;Â </p>
  <p class="Code">Â </p>
  <p class="Code">// This is the service name an Add-On has to implementÂ </p>
  <p class="Code">#define SERVICE_NAME "com.sun.star.frame.ProtocolHandler"Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â </p>
  <p class="Code">/**Â </p>
  <p class="Code">Â  * Show a message box with the UNO based toolkit</p>
  <p class="Code">Â  */<br />static void <span class="CodeEmphasis">ShowMessageBox</span>(const Reference&lt; XToolkit &gt;&amp; rToolkit, const Reference&lt; XFrame &gt;&amp; rFrame, const OUString&amp; aTitle, const OUString&amp; aMsgText)</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  if ( rFrame.is() &amp;&amp; rToolkit.is() )</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  // describe window properties.<br /> Â  Â  Â  Â WindowDescriptor Â  Â  Â  Â  Â  Â  Â  Â aDescriptor;<br /> Â  Â  Â  Â aDescriptor.Type Â  Â  Â  Â  Â  Â  Â = WindowClass_MODALTOP Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â ;<br /> Â  Â  Â  Â aDescriptor.WindowServiceName = OUString( RTL_CONSTASCII_USTRINGPARAM( "infobox" ));<br /> Â  Â  Â  Â aDescriptor.ParentIndex Â  Â  Â  = -1 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â ;<br /> Â  Â  Â  Â aDescriptor.Parent Â  Â  Â  Â  Â  Â = Reference&lt; XWindowPeer &gt;( rFrame-&gt;getContainerWindow(),</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  UNO_QUERY ) Â ;<br /> Â  Â  Â  Â aDescriptor.Bounds Â  Â  Â  Â  Â  Â = Rectangle(0,0,300,200) Â  Â  Â  Â  Â  Â  Â  Â ;<br /> Â  Â  Â  Â aDescriptor.WindowAttributes Â = WindowAttribute::BORDER Â  Â  Â  Â  Â  Â  Â  |<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â WindowAttribute::MOVEABLE Â  Â  Â  Â  Â  Â  |<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â WindowAttribute::CLOSEABLE;<br /> </p>
  <p class="Code">Â  Â  Â  Â  Reference&lt; XWindowPeer &gt; xPeer = rToolkit-&gt;createWindow( aDescriptor );<br /> Â  Â  Â  Â if ( xPeer.is() )<br /> Â  Â  Â  Â {<br /> Â  Â  Â  Â  Â  Â Reference&lt; XMessageBox &gt; xMsgBox( xPeer, UNO_QUERY );<br /> Â  Â  Â  Â  Â  Â if ( xMsgBox.is() )<br /> Â  Â  Â  Â  Â  Â {<br /> Â  Â  Â  Â  Â  Â  Â  Â xMsgBox-&gt;setCaptionText( aTitle );<br /> Â  Â  Â  Â  Â  Â  Â  Â xMsgBox-&gt;setMessageText( aMsgText );<br /> Â  Â  Â  Â  Â  Â  Â  Â xMsgBox-&gt;execute();<br /> Â  Â  Â  Â  Â  Â }<br /> Â  Â  Â  Â }<br /> Â  Â }</p>
  <p class="Code">}Â </p>
  <p class="Code">Â </p>
  <p class="Code">//##################################################################################################<br />//#### Implementation of the ProtocolHandler and Dispatch Interfaces Â  Â  Â  Â  Â  Â  ###################<br />//##################################################################################################<br /> </p>
  <p class="Code">// <span class="CodeEmphasis">XInitialization</span> </p>
  <p class="Code">/**Â </p>
  <p class="Code">Â  * Called by the Office framework.</p>
  <p class="Code">Â  * We store the context information</p>
  <p class="Code">Â  * given, like the frame we are bound to, into our members. </p>
  <p class="Code">Â  */<br />void SAL_CALL Addon::<span class="CodeEmphasis">initialize</span>( const Sequence&lt; Any &gt;&amp; aArguments ) throw ( Exception, RuntimeException)</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  Reference &lt; XFrame &gt; xFrame;</p>
  <p class="Code">Â  Â  if ( aArguments.getLength() )</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  aArguments[0] &gt;&gt;= xFrame;</p>
  <p class="Code">Â  Â  Â  Â  mxFrame = xFrame;</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  // Create the toolkit to have access to it later</p>
  <p class="Code">Â  Â  mxToolkit = Reference&lt; XToolkit &gt;( mxMSF-&gt;createInstance( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  OUString( RTL_CONSTASCII_USTRINGPARAM( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.awt.Toolkit" ))), UNO_QUERY );</p>
  <p class="Code">}Â </p>
  <p class="Code">Â </p>
  <p class="Code">// <span class="CodeEmphasis">XDispatchProvider</span> </p>
  <p class="Code">/** Â </p>
  <p class="Code">Â  * Called by the Office framework.</p>
  <p class="Code">Â  * We are ask to query the given URL and return a dispatch object if the URL</p>
  <p class="Code">Â  * contains an Add-On command.</p>
  <p class="Code">Â  */<br />Reference&lt; XDispatch &gt; SAL_CALL Addon::<span class="CodeEmphasis">queryDispatch</span>( const URL&amp; aURL, const ::rtl::OUString&amp; sTargetFrameName, sal_Int32 nSearchFlags )</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â  throw( RuntimeException )</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  Reference &lt; XDispatch &gt; xRet;</p>
  <p class="Code">Â  Â  if ( aURL.Protocol.compareToAscii("org.openoffice.Office.addon.example:") == 0 )</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  if ( aURL.Path.compareToAscii( "Function1" ) == 0 )</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xRet = this;</p>
  <p class="Code">Â  Â  Â  Â  else if ( aURL.Path.compareToAscii( "Function2" ) == 0 )</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xRet = this;</p>
  <p class="Code">Â  Â  Â  Â  else if ( aURL.Path.compareToAscii( "Help" ) == 0 )</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xRet = this;</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  return xRet;</p>
  <p class="Code">}Â </p>
  <p class="Code">Â </p>
  <p class="Code">/** Â </p>
  <p class="Code">Â  * Called by the Office framework.</p>
  <p class="Code">Â  * We are ask to query the given sequence of URLs and return dispatch objects if the URLs</p>
  <p class="Code">Â  * contain Add-On commands.</p>
  <p class="Code">Â  */<br />Sequence &lt; Reference&lt; XDispatch &gt; &gt; SAL_CALL Addon::<span class="CodeEmphasis">queryDispatches</span>( </p>
  <p class="Code">Â  Â  Â  Â  const Sequence &lt; DispatchDescriptor &gt;&amp; seqDescripts )</p>
  <p class="Code">Â  Â  Â  Â  throw( RuntimeException )</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  sal_Int32 nCount = seqDescripts.getLength();</p>
  <p class="Code">Â  Â  Sequence &lt; Reference &lt; XDispatch &gt; &gt; lDispatcher( nCount );</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  for( sal_Int32 i=0; i&lt;nCount; ++i )</p>
  <p class="Code">Â  Â  Â  Â  lDispatcher[i] = queryDispatch( seqDescripts[i].FeatureURL, seqDescripts[i].FrameName, seqDescripts[i].SearchFlags );</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  return lDispatcher;</p>
  <p class="Code">}Â </p>
  <p class="Code">Â </p>
  <p class="Code">// <span class="CodeEmphasis">XDispatch</span> </p>
  <p class="Code">/** Â </p>
  <p class="Code">Â  * Called by the Office framework.</p>
  <p class="Code">Â  * We are ask to execute the given Add-On command URL.</p>
  <p class="Code">Â  */</p>
  <p class="Code">void SAL_CALL Addon::<span class="CodeEmphasis">dispatch</span>( const URL&amp; aURL, const Sequence &lt; PropertyValue &gt;&amp; lArgs ) throw (RuntimeException)</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  if ( aURL.Protocol.compareToAscii("org.openoffice.Office.addon.example:") == 0 )</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  if ( aURL.Path.compareToAscii( "Function1" ) == 0 )</p>
  <p class="Code">Â  Â  Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  ShowMessageBox( mxToolkit, mxFrame, </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  OUString( RTL_CONSTASCII_USTRINGPARAM( "SDK Add-On example" )),</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  OUString( RTL_CONSTASCII_USTRINGPARAM( "Function 1 activated" )) );</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  else if ( aURL.Path.compareToAscii( "Function2" ) == 0 )</p>
  <p class="Code">Â  Â  Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  ShowMessageBox( mxToolkit, mxFrame, </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  OUString( RTL_CONSTASCII_USTRINGPARAM( "SDK Add-On example" )),</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  OUString( RTL_CONSTASCII_USTRINGPARAM( "Function 2 activated" )) );</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  else if ( aURL.Path.compareToAscii( "Help" ) == 0 )</p>
  <p class="Code">Â  Â  Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // Show info box</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  ShowMessageBox( mxToolkit, mxFrame, </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  OUString( RTL_CONSTASCII_USTRINGPARAM( "About SDK Add-On example" )),</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  OUString( RTL_CONSTASCII_USTRINGPARAM( "This is the SDK Add-On example")));</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">}Â </p>
  <p class="Code">/** Â </p>
  <p class="Code">Â  * Called by the Office framework.</p>
  <p class="Code">Â  * We are asked to store a status listener for the given URL.</p>
  <p class="Code">Â  */</p>
  <p class="Code">void SAL_CALL Addon::<span class="CodeEmphasis">addStatusListener</span>( const Reference&lt; XStatusListener &gt;&amp; xControl, const URL&amp; aURL ) Â  Â  Â  Â  throw (RuntimeException)</p>
  <p class="Code">{Â </p>
  <p class="Code">}Â </p>
  <p class="Code">Â </p>
  <p class="Code">/** Â </p>
  <p class="Code">Â  * Called by the Office framework.</p>
  <p class="Code">Â  * We are asked to remove a status listener for the given URL.</p>
  <p class="Code">Â  */</p>
  <p class="Code">void SAL_CALL Addon::<span class="CodeEmphasis">removeStatusListener</span>( const Reference&lt; XStatusListener &gt;&amp; xControl, </p>
  <p class="Code">Â  Â  Â  Â  const URL&amp; aURL ) </p>
  <p class="Code">Â  Â  Â  Â  throw (RuntimeException)</p>
  <p class="Code">{Â </p>
  <p class="Code">}Â </p>
  <p class="Code">Â </p>
  <p class="Code">//##################################################################################################<br />//#### Implementation of the recommended/mandatory interfaces of a UNO component ###################<br />//##################################################################################################<br /> </p>
  <p class="Code">// <span class="CodeEmphasis">XServiceInfo</span> </p>
  <p class="Code">::rtl::OUString SAL_CALL Addon::<span class="CodeEmphasis">getImplementationName</span>( Â )</p>
  <p class="Code">Â  Â  Â  Â  throw (RuntimeException)</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  Â  Â  return Addon_getImplementationName();</p>
  <p class="Code">}Â </p>
  <p class="Code">Â </p>
  <p class="Code">sal_Bool SAL_CALL Addon::<span class="CodeEmphasis">supportsService</span>( const ::rtl::OUString&amp; rServiceName )</p>
  <p class="Code">Â  Â  Â  Â  throw (RuntimeException)</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  return Addon_supportsService( rServiceName );</p>
  <p class="Code">}Â </p>
  <p class="Code">Â </p>
  <p class="Code">Sequence&lt; ::rtl::OUString &gt; SAL_CALL Addon::<span class="CodeEmphasis">getSupportedServiceNames</span>( Â )</p>
  <p class="Code">Â  Â  Â  Â  throw (RuntimeException)</p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  return Addon_getSupportedServiceNames();</p>
  <p class="Code">}Â </p>
  <h4 class="Head4"><a name="1_7_1_3_Configuration" />Configuration</h4>
  <p class="P49">A protocol handler needs configuration entries, which provide the framework with the necessary information to find the handler. <span class="T23">The schema of the configuration branch </span><span class="T40">org.openoffice.Office.ProtocolHandler</span> <span class="T23">defines how to bind handler instances to their URL schemas:</span> </p>
  <p class="Code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;Â </p>
  <p class="Code">&lt;!DOCTYPE oor:component-schema SYSTEM "../../../../component-schema.dtd"&gt;Â </p>
  <p class="Code">&lt;oor:component-schema xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" oor:name="ProtocolHandler" oor:package="org.openoffice.Office" xml:lang="en-US"&gt;Â </p>
  <p class="Code">Â  Â  Â  Â  &lt;templates&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â  &lt;group oor:name="Handler"&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â  &lt;prop oor:name="Protocols" oor:type="oor:string-list"/&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/templates&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â  &lt;component&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â  &lt;set oor:name="HandlerSet" oor:node-type="Handler"/&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â  &lt;/component&gt;</p>
  <p class="Code">&lt;/oor:component-schema&gt;Â </p>
  <p class="Paragraph">Each set node entry specifies one protocol handler, using its UNO implementation name. The only property it has is the <span class="Codeintext">Protocols</span> item. Its type must be <span class="Codeintext">[string-list]</span> and it contains a list of URL schemas bound to the handler. Wildcards are allowed, otherwise the entire string must match the dispatched URL.</p>
  <h5 class="Head5"><a name="1_7_1_3_1_Configuration_for_vnd.sun.star.framework.ExampleHandler" />Configuration for vnd.sun.star.framework.ExampleHandler</h5>
  <p class="Paragraph">The following example <span class="wwwftpemail">ProtocolHandler.xcu</span> contains the protocol handler configuration for the example's Java protocol handler:</p>
  <p class="Code">&lt;?xml version='1.0' encoding='UTF-8'?&gt;Â </p>
  <p class="Code">&lt;oor:component-data oor:name="<span class="CodeEmphasis">ProtocolHandler</span>" oor:package="<span class="CodeEmphasis">org.openoffice.Office</span>" xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;node oor:name="<span class="CodeEmphasis">HandlerSet</span>"&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â  &lt;node oor:name="<span class="CodeEmphasis">vnd.sun.star.framework.ExampleHandler</span>" oor:op="replace"&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â  &lt;prop oor:name="<span class="CodeEmphasis">Protocols</span>"&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â  &lt;value&gt;<span class="CodeEmphasis">myProtocol_1://* myProtocol_2://*</span>&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/oor:component-data&gt;Â </p>
  <p class="Paragraph">The example adds two new URL protocols using wildcards: Â </p>
  <p class="Code">myProtocol_1://*Â </p>
  <p class="Code">myProtocol_2://*Â </p>
  <p class="Paragraph">Both protocols are bound to the handler implementation <span class="Codeintext">vnd.sun.star.framework.ExampleHandler</span>. Note that this must be the implementation name of the handler, not the name of the service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/ProtocolHandler.html" title="see type com.sun.star.frame.ProtocolHandler">com.sun.star.frame.ProtocolHandler</a></span> it implements. Because all implementations of the service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/ProtocolHandler.html" title="see type com.sun.star.frame.ProtocolHandler">com.sun.star.frame.ProtocolHandler</a></span> share the same UNO service name, you cannot use this name in the configuration files. </p>
  <p class="Paragraph">To prevent ambiguous implementation names, the following naming schema for implementation names is frequently used:Â </p>
  <p class="Paragraph"><span class="T39">vnd.&lt;namespace_of_company&gt;.&lt;namespace_of_implementation&gt;.&lt;class_name&gt;</span> </p>
  <p class="Paragraph">e.g. <span class="Codeintext">vnd.sun.star.framework.ExampleHandler</span> <br /> <span class="Codeintext">&lt;namespace_of_company&gt;Â  Â  Â  Â   Â  Â  Â  Â  = sun.star<br />&lt;namespace_of_implementation&gt;Â  Â  Â  Â  = framework<br />&lt;class_name&gt;Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â  = ExampleHandler</span> </p>
  <p class="Paragraph">An alternative would be the naming convention proposed in <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_4_3_XServiceInfo" title="see chapter 4.4.3 Writing UNO Components - Core Interfaces to Implement - XServiceInfo">4.4.3 Writing UNO Components - Core Interfaces to Implement - XServiceInfo</a></span>:</p>
  <p class="Paragraph"><span class="T39">&lt;namespace_of_creator&gt;.comp.&lt;namespace_of_implementation&gt;.&lt;class_name&gt;</span> </p>
  <p class="Paragraph">e.g. <span class="Codeintext">org.openoffice.comp.framework.OProtocolHandler</span> </p>
  <p class="Paragraph">All of these conventions are proposals; what matters is: Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P50" style="margin-left:2.5cm;"><p class="P50" style="margin-left:0cm;">use the implementation name in the configuration file, not the general service name "com.sun.star.frame.ProtocolHandler"Â </p></li>
   <li class="P50" style="margin-left:2.5cm;"><p class="P50" style="margin-left:0cm;">be careful to choose an implementation name that is likely to be unique, and be aware that your handler ceases to function when another developer adds a handler with the same name.Â </p></li>
  </ul>
  <h5 class="Head5"><a name="1_7_1_3_2_Configuration_for_org.openoffice.Office.addon.example" />Configuration for org.openoffice.Office.addon.example</h5>
  <p class="Paragraph">The following <span class="wwwftpemail">ProtocolHandler.xcu</span> file configures the example's C++ protocol handler with the implementation name <span class="wwwftpemail">org.openoffice.Office.addon.example</span> in the configuration branch <span class="wwwftpemail">org.openoffice.Office.ProtocolHandler </span>followingthe same schema.</p>
  <p class="Code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;oor:component-data xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" oor:name="ProtocolHandler" oor:package="org.openoffice.Office"&gt;<br /> &lt;node oor:name="HandlerSet"&gt;<br /> Â &lt;node oor:name="org.openoffice.Office.addon.example" oor:op="replace"&gt;<br /> Â  &lt;prop oor:name="Protocols" oor:type="oor:string-list"&gt;<br /> Â  Â &lt;value&gt;org.openoffice.Office.addon.example:*&lt;/value&gt;<br /> Â  &lt;/prop&gt;<br /> Â &lt;/node&gt;<br /> &lt;/node&gt;<br />&lt;/oor:component-data&gt;</p>
  <p class="Paragraph">The configuration adds one new URL protocol using wildcards: Â </p>
  <p class="Code">org.openoffice.Office.addon.example:*Â </p>
  <p class="Paragraph">Based on this URL protocol, the C++ protocol handler can route, for example, a dispatched URL Â </p>
  <p class="Paragraph"><span class="wwwftpemail">org.openoffice.Office.addon.example:Function1</span> </p>
  <p class="Paragraph">to the corresponding target routine. See the implementation of the <span class="Codeintext">dispatch()</span> method in the <span class="Codeintext">XDispatch</span> interface of the C++ source fragment above.</p>
  <h4 class="Head4"><a name="1_7_1_4_Installation" />Installation</h4>
  <p class="Paragraph">When the office finds a protocol handler implementation for a URL in the configuration files, it asks the global service manager to instantiate that implementation. All components must be registered with the service manager before they can be instantiated. This happens automatically when an extension is being installed (see chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#1_Extensions" title="see chapter 5 Extensions">5 Extensions</a>).</span> </p>
  <p class="Paragraph">The easiest method to configure and register a new protocol handler in a single step is therefore to use the Extension Manager<span class="T40">. </span>An Â extension Â for the example protocol handler could contain the following directory structure:</p>
  <p class="Code">ExampleHandler.oxt:Â </p>
  <p class="Code">Â  Â  META-INF/manifest.xml</p>
  <p class="Code">Â  Â  ProtocolHandler.xcu</p>
  <p class="Code">Â  Â  windows.plt/</p>
  <p class="Code">Â  Â  Â  Â  examplehandler.dll</p>
  <p class="Code">Â  Â  solaris_sparc.plt/</p>
  <p class="Code">Â  Â  Â  Â  libexamplehandler.so</p>
  <p class="Code">Â  Â  linux_x86.plt/</p>
  <p class="Code">Â  Â  Â  Â  libexamplehandler.so</p>
  <p class="Paragraph">The <span class="wwwftpemail">.xcu</span> file can go directly into the root of the extension, the shared libraries for the various platforms go to their respective <span class="wwwftpemail">.plt</span> directories. Both the .xcu and the libraries have to be referenced in the manifest.xml</p>
  <p class="Paragraph">The package installation is as simple as changing to the <span class="wwwftpemail">&lt;OfficePath&gt;/program</span> directory with a command-line shell and running</p>
  <p class="Output">$ unopkg add /foo/bar/ExampleHandler.oxtÂ </p>
  <p class="Paragraph">or simply starting the Extension Manager in your office to install the extensions via the UI.Â </p>
  <p class="Paragraph">For an detailedexplanation of the extension structure please refer to <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#1_Extensions" title="see chapter 5 Extensions">5 Extensions</a></span>.</p>
  <h3 class="Head3"><a name="1_7_2_Jobs" />4.7.2Â Â Jobs</h3>
  <h4 class="Head4"><a name="1_7_2_1_Overview" />Overview</h4>
  <p class="Paragraph">A job in OpenOffice.org is a UNO component that can be executed by the job execution environment upon an event. It can read and write its own set of configuration data in the configuration branch <span class="wwwftpemail">org.openoffice.Office.Jobs, </span>and it can be activated and deactivated from a certain point in time using special time stamps. It may be started with or without an environment, and it is protected against termination and lifetime issues.</p>
  <p class="Paragraph">The event that starts a job can be triggered by:Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P51" style="margin-left:2.5cm;"><p class="P51" style="margin-left:0cm;">any code in OpenOffice.org that detects a defined state at runtime and passes an event string to the service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/JobExecutor.html" title="see type com.sun.star.task.JobExecutor">com.sun.star.task.JobExecutor</a></span> through its interface method <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/XJobExecutor.html#trigger" title="see trigger of type com.sun.star.task.XJobExecutor:trigger">com.sun.star.task.XJobExecutor:trigger</a>()</span>. The job executor looks in the configuration of OpenOffice.org if there are any jobs registered for this event and executes them.</p></li>
   <li class="P51" style="margin-left:2.5cm;"><p class="P51" style="margin-left:0cm;">the global document event broadcasterÂ </p></li>
   <li class="P51" style="margin-left:2.5cm;"><p class="P51" style="margin-left:0cm;">the dispatch framework, which provides for a <span class="wwwftpemail">vnd.star.sun.job:</span> URL schema to start jobs using a command URL. This URL schema can execute jobs in three different ways: it can issue an <span class="Emphasis">event</span> for job components that are configured to wait for it, it can call a component by an <span class="Emphasis">alias</span> that has been given to the component in the configuration or it can execute a job component directly by its <span class="Emphasis">implementation</span> <span class="Emphasis">name</span>.</p></li>
  </ul>
  <p class="Paragraph">If you call <span class="Codeintext">trigger()</span> at the job executor or employ the global event broadcaster, the office needs a valid set of configuration data for every job you want to run. The third approach, to use a <span class="wwwftpemail">vnd.star.sun.job:</span> command URL, works with or without prior configuration.</p>
  <p class="Paragraph"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#refIllustration3">Illustration 4</a> shows an example job that counts how many times it has been triggered by an event and deactivates itself when it has been executed twice. It uses its own job-specific configuration layer to store the number of times it has been invoked. This value is passed to each newly created job instance as an initialization argument, and can be checked and written back to the configuration. When the counter exceeds two, the job uses the special deactivation feature of the job execution environment. Each job can have a user time stamp and and administrator time stamp to control activation and deactivation. When a job is deactivated, the execution environment updates the user time stamp value, so that subsequent events do not start this job again. It can be enabled by a newer time stamp value in the administration layer.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle15"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Tabelle15A1">
      <div class="Paragraph"><div style="width: 14.9cm; " id="Rahmen31" class="fr8">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/uml_job_execution.png" title="link to the full-sized graphic &quot;./uml_job_execution.png&quot;"><img border="0" width="652" height="689" alt="Sequence diagram showing  a job execution" src="./4 Writing UNO Components_files/uml_job_execution.png" class="fr9" /></a>Illustration <a name="refIllustration4">5</a>: Flow diagram of an example job</div>
       </div> </div>
     </td></tr></table></div>
  <h4 class="Head4"><a name="1_7_2_2_Execution_Environment" />Execution Environment</h4>
  <p class="Paragraph">Jobs are executed in a job execution environment, which handles a number of tasks and problems that can occur when jobs are executed. In particular,Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P52" style="margin-left:2.5cm;"><p class="P52" style="margin-left:0cm;">it initializes the job with all necessary dataÂ </p></li>
   <li class="P52" style="margin-left:2.5cm;"><p class="P52" style="margin-left:0cm;">it starts the job using the correct interfacesÂ </p></li>
   <li class="P52" style="margin-left:2.5cm;"><p class="P52" style="margin-left:0cm;">it keeps the job alive by acquiring a UNO referenceÂ </p></li>
   <li class="P52" style="margin-left:2.5cm;"><p class="P52" style="margin-left:0cm;">it waits until the job finishes its work, including listening for asynchronous jobsÂ </p></li>
   <li class="P52" style="margin-left:2.5cm;"><p class="P52" style="margin-left:0cm;">it updates the configuration of a job after it has finishedÂ </p></li>
   <li class="P52" style="margin-left:2.5cm;"><p class="P52" style="margin-left:0cm;">it informs listeners about the executionÂ </p></li>
   <li class="P52" style="margin-left:2.5cm;"><p class="P52" style="margin-left:0cm;">it protects the job from office termination, or informs it when it is impossible to veto terminationÂ </p></li>
  </ul>
  <p class="Paragraph">For this purpose, the job execution environment creates special wrapper objects for jobs. This wrapper object implements mechanisms to support lifetime control. The wrapper vetoes termination of the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/Desktop.html" title="see type com.sun.star.frame.Desktop">com.sun.star.frame.Desktop</a></span> and the closing of frames that contain document models as long as there are dependent active jobs. It might also register as a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/util/XCloseListener.html" title="see type com.sun.star.util.XCloseListener">com.sun.star.util.XCloseListener</a></span> at a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/Frame.html" title="see type com.sun.star.frame.Frame">com.sun.star.frame.Frame</a></span> or <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/document/OfficeDocument.html" title="see type com.sun.star.document.OfficeDocument">com.sun.star.document.OfficeDocument</a></span> to handle the close communication on behalf of the job. It also listens for asynchronous job instances, and it is responsible for updates to the configuration data after a job has finished (see <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_7_2_5_Returning_Results" title="see chapter 4.7.2 Writing UNO Components - Integrating Components into OpenOffice.org - Jobs - Returning Results">4.7.2 Writing UNO Components - Integrating Components into OpenOffice.org - Jobs - Returning Results</a></span>).</p>
  <p class="Paragraph">A central problem of external components in OpenOffice.org is their lifetime control. Every external component must deal with the possibility that the environment will terminate. It is not efficient to implement lifetime strategies in every job, so the job execution environment takes care of this problem. That way, a job can execute, while difficult situations are handled by the execution environment. Â </p>
  <p class="Paragraph">Another advantage of this approach is that it ensures future compatibility. If the mechanism changes in the future, termination is detected and prevented, and it is unnecessary to adapt every existing job implementation.Â </p>
  <h4 class="Head4"><a name="1_7_2_3_Implementation" />Implementation</h4>
  <p class="P49">A job must implement the service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/Job.html" title="see type com.sun.star.task.Job">com.sun.star.task.Job</a></span> if it needs to block the thread in which it is executed or <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/AsyncJob.html" title="see type com.sun.star.task.AsyncJob">com.sun.star.task.AsyncJob</a></span> if the current state of the office is unimportant for the job. The service that a job implementation supports is detected at runtime. If both are available, the synchronous service <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/Job.html" title="see type com.sun.star.task.Job">com.sun.star.task.Job</a></span> is preferred by the job execution environment.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle2"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Tabelle2A1">
      <div class="Paragraph"><div style="width: 12.739cm; " id="Rahmen4" class="fr10">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/JobAsyncJob.png" title="link to the full-sized graphic &quot;./JobAsyncJob.png&quot;"><img border="0" width="543" height="549" alt="UML diagram showing the com.sun.star.task.Job and com.sun.star.task.AsyncJob services" src="./4 Writing UNO Components_files/JobAsyncJob.png" class="fr11" /></a>Illustration <a name="refIllustration5">6</a>: Job framework</div>
       </div> </div>
     </td></tr></table></div>
  <p class="P49">A synchronous job must not make assumptions about the environment, neither that it is the only job that runs currently nor that another object waits for its results. Only the thread context of a synchronous job is blocked until the job finishes its work.</p>
  <p class="Paragraph">An asynchronous job is not allowed to use threads internally, because OpenOffice.org needs to control thread creation. How asynchronous jobs are executed is an implementation detail of the global job execution environment.</p>
  <p class="Paragraph">Jobs that need a user interface must proceed with care, so that they do not interfere with the message loop of OpenOffice.org. The following rules apply: Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P53" style="margin-left:2.5cm;"><p class="P53" style="margin-left:0cm;">You cannot display any user interface from a synchronous job, because repaint errors and other threading issues will occur.Â </p></li>
  </ul>
  <ul style="margin-left:0.5cm;">
   <li class="P54" style="margin-left:2.5cm;"><p class="P54" style="margin-left:0cm;">The easiest way to have a user interface for an asynchronous job is to use a non-modal dialog. If you need a modal dialog to get user input, problems can occur. The best way is to use the frame reference that is part of the job environment <span class="T37">initialization</span> data, and to get its container window as a parent window. This parent window can be used to create a dialog with the user interface toolkit <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/Toolkit.html" title="see type com.sun.star.awt.Toolkit">com.sun.star.awt.Toolkit</a></span>. The C++ protocol handler discussed in <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_7_1_2_Implementation" title="see chapter 4.7.1 Writing UNO Components - Integrating Components into OpenOffice.org - Protocol Handler - Implementation">4.7.1 Writing UNO Components - Integrating Components into OpenOffice.org - Protocol Handler - Implementation</a></span> shows how a modal message box uses this approach.</p></li>
  </ul>
  <ul style="margin-left:0.5cm;">
   <li class="P55" style="margin-left:2.5cm;"><p class="P55" style="margin-left:0cm;">Using a native toolkit or the Java AWT for your GUI can lead to a non-painting OpenOffice.org. To avoid this, the user interface must be non-modal and the implementation must allow the office to abort the job by supporting <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XComponent.html" title="see type com.sun.star.lang.XComponent">com.sun.star.lang.XComponent</a></span> or <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/util/XCloseable.html" title="see type com.sun.star.util.XCloseable">com.sun.star.util.XCloseable</a></span>.</p></li>
  </ul>
  <p class="Paragraph">The optional interfaces <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XComponent.html" title="see type com.sun.star.lang.XComponent">com.sun.star.lang.XComponent</a></span> or <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/util/XCloseable.html" title="see type com.sun.star.util.XCloseable">com.sun.star.util.XCloseable</a></span> should be supported so that jobs can be disposed of in a controlled manner. When these interfaces are present, the execution environment can call <span class="Codeintext">dispose()</span> or <span class="Codeintext">close()</span> rather than waiting for a job to finish. Otherwise OpenOffice.org must wait until the job is done. Invisible jobs can be especially problematic, because they cannot be recognized as the reason why OpenOffice.org refuses to exit.</p>
  <h4 class="Head4"><a name="1_7_2_4_Initialization" />Initialization</h4>
  <p class="P49">A job is initialized by a call to its main interface method, which starts the job. For synchronous jobs, the execution environment calls <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/XJob.html#execute" title="see execute of type com.sun.star.task.XJob:execute">com.sun.star.task.XJob:execute</a>()</span>, whereas asynchronous jobs are run through <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/XAsyncJob.html#executeAsync" title="see executeAsync of type com.sun.star.task.XAsyncJob:executeAsync">com.sun.star.task.XAsyncJob:executeAsync</a>()</span>. </p>
  <p class="P49">Both methods take one parameter <span class="Codeintext">Arguments</span>, which is a sequence of <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/NamedValue.html" title="see type com.sun.star.beans.NamedValue">com.sun.star.beans.NamedValue</a></span> structs. This sequence describes the job context. </p>
  <p class="P49">It contains the <span class="Emphasis">environment</span> where the job is running, which tells if the job was called by the job executor, the dispatch framework or the global event broadcaster service, and possibly provides a frame or a document model for the job to work with.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle27"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.596cm; " class="Tabelle27A1">
      <div class="TableContents"><img width="39" height="39" alt="Tip graphics marks a hint section in the text" src="./4 Writing UNO Components_files/tip.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.454cm; " class="Tabelle27B1">
      <p class="TipInTable">Section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_7_1_2_Implementation" title="see chapter 4.7.1 Writing UNO Components - Integrating Components into OpenOffice.org - Protocol Handler - Implementation">4.7.1 Writing UNO Components - Integrating Components into OpenOffice.org - Protocol Handler - Implementation</a></span> shows how to use a frame to get its associated document model.</p>
     </td></tr></table></div>
  <p class="P49">The <span class="Codeintext">Arguments</span> parameter also yields <span class="Emphasis">configuration</span> data, if the job has been configured in the configuration branch <span class="wwwftpemail">org.openoffice.Office.Jobs. </span>This data is separated into basic configuration and additional arguments stored in the configuration. The job configuration is described in section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_7_2_6_Configuration" title="see chapter 4.7.2 Writing UNO Components - Integrating Components into OpenOffice.org - Jobs - Configuration">4.7.2 Writing UNO Components - Integrating Components into OpenOffice.org - Jobs - Configuration</a></span>.</p>
  <p class="Paragraph">Finally, <span class="Codeintext">Arguments</span> can contain <span class="Emphasis">dynamic parameters</span> given to the job at runtime. For instance, if a job has been called by the dispatch framework, and the dispatched command URL used parameters, these parameters can be passed on to the job through the execution arguments.</p>
  <p class="P49">The following table shows the exact specification for the execution <span class="Codeintext">Arguments</span>:</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle3"><colgroup><col width="116" /><col width="638" /></colgroup><tr><td colspan="2" style="text-align:left;width:2.544cm; " class="Tabelle3A1">
      <p class="P23">Elements of the Execution Arguments SequenceÂ </p>
     </td></tr><tr><td style="text-align:left;width:2.544cm; " class="Tabelle3A2">
     <p class="TableCode">EnvironmentÂ </p>
    </td><td style="text-align:left;">
     <table border="0" cellspacing="0" cellpadding="0" width="100%"><colgroup><col width="80" /><col width="558" /></colgroup><tr><td colspan="2" style="text-align:left;width:1.741cm; " class="Tabelle3B211">
        <p class="TextInTable">sequence&lt; <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/NamedValue.html" title="see type com.sun.star.beans.NamedValue">com.sun.star.beans.NamedValue</a> &gt;. Contains environment data. The following named values are defined:Â </p>
       </td></tr><tr><td style="text-align:left;width:1.741cm; " class="Tabelle3A2">
        <p class="TextInTable"><span class="Codeintext">EnvType</span> </p>
       </td><td style="text-align:left;width:12.226cm; " class="Tabelle3B211">
        <p class="TextInTable">string. <span class="T37">Determines</span> in which environment a job is executed. Defined Values:<br /> <span class="Codeintext">"EXECUTOR": </span>job has been executed by a call to <span class="Codeintext">trigger()</span> at the job executor<br /> <span class="Codeintext">"DISPATCH": </span>job is dispatched as <span class="wwwftpemail">vnd.sun.star.job:</span> URL<br /> <span class="Codeintext">"DOCUMENTEVENT": </span>job has been executed by the global event broadcaster mechanism</p>
       </td></tr><tr><td style="text-align:left;width:1.741cm; " class="Tabelle3A2">
        <p class="TableCode">EventNameÂ </p>
       </td><td style="text-align:left;width:12.226cm; " class="Tabelle3B211">
        <p class="TextInTable">[optional] string. Only exists, if <span class="Codeintext">EnvType</span> is <span class="Codeintext">"EXECUTOR" or "DOCUMENTEVENT"</span>. Contains the name of the event for which this job was registered in configuration. During runtime, this information can be used to handle different function sets by the same component implementation.</p>
       </td></tr><tr><td style="text-align:left;width:1.741cm; " class="Tabelle3A2">
        <p class="TableCode">FrameÂ </p>
       </td><td style="text-align:left;width:12.226cm; " class="Tabelle3B211">
        <p class="TextInTable">[optional] <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XFrame.html" title="see type com.sun.star.frame.XFrame">com.sun.star.frame.XFrame</a>. Only exists, if <span class="Codeintext">EnvType</span> is <span class="Codeintext">"DISPATCH"</span>. Contains the frame context of this job. Furthermore, the sub list <span class="Codeintext">DynamicData</span> can contain the optional argument list of the corresponding <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XDispatch.html#dispatch" title="see dispatch of type com.sun.star.frame.XDispatch:dispatch">com.sun.star.frame.XDispatch:dispatch</a>()</span> request.</p>
       </td></tr><tr><td style="text-align:left;width:1.741cm; " class="Tabelle3A2">
        <p class="TableCode">ModelÂ </p>
       </td><td style="text-align:left;width:12.226cm; " class="Tabelle3B211">
        <p class="TextInTable">[optional] <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XModel.html" title="see type com.sun.star.frame.XModel">com.sun.star.frame.XModel</a>. Only exists, if <span class="Codeintext">EnvType</span> is <span class="Codeintext">"DOCUMENTEVENT"</span>. Contains the document model that can be used by the job.</p>
       </td></tr></table>
    </td></tr><tr><td style="text-align:left;width:2.544cm; " class="Tabelle3A2">
     <p class="TableCode">ConfigÂ </p>
    </td><td style="text-align:left;">
     <table border="0" cellspacing="0" cellpadding="0" width="100%"><colgroup><col width="90" /><col width="548" /></colgroup><tr><td colspan="2" style="text-align:left;width:1.976cm; " class="Tabelle3B211">
        <p class="TextInTable">[optional] [sequence&lt; <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/NamedValue.html" title="see type com.sun.star.beans.NamedValue">com.sun.star.beans.NamedValue</a> &gt;]. Contains the generic set of job configuration properties as described in <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_7_2_6_Configuration" title="see chapter 4.7.2 Writing UNO Components - Integrating Components into OpenOffice.org - Jobs - Configuration">4.7.2 Writing UNO Components - Integrating Components into OpenOffice.org - Jobs - Configuration</a></span> <span class="Emphasis">but not</span> the job specific data set. That is, this sub list only includes the properties <span class="Codeintext">Alias</span> and <span class="Codeintext">Service</span>, not the property <span class="Codeintext">Arguments</span>. The property <span class="Codeintext">Arguments </span>is reflected in the element <span class="Codeintext">JobConfig</span> (see next element below)<br />Note: this sub list only exists if the job is configured with this data.</p>
       </td></tr><tr><td style="text-align:left;width:1.976cm; " class="Tabelle3A2">
        <p class="TableCode">AliasÂ </p>
       </td><td style="text-align:left;width:11.991cm; " class="Tabelle3B211">
        <p class="TextInTable">string. This property is declared as the name of the corresponding set node in the configuration set <span class="wwwftpemail">Jobs</span>. It must be a unique name, which represents the structured information of a job.</p>
       </td></tr><tr><td style="text-align:left;width:1.976cm; " class="Tabelle3A2">
        <p class="TableCode">ServiceÂ </p>
       </td><td style="text-align:left;width:11.991cm; " class="Tabelle3B211">
        <p class="TextInTable">string. Represents the UNO implementation name of the job component.Â </p>
       </td></tr></table>
    </td></tr><tr><td style="text-align:left;width:2.544cm; " class="Tabelle3A2">
     <p class="TableCode">JobConfigÂ </p>
    </td><td style="text-align:left;width:13.966cm; " class="Tabelle3B211">
     <p class="TextInTable">[optional] [sequence&lt; <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/NamedValue.html" title="see type com.sun.star.beans.NamedValue">com.sun.star.beans.NamedValue</a> &gt;]<br />This sub list contains the job-specific set of configuration data as specified in the <span class="Codeintext">Arguments</span> property of the job configuration. Its items depend on the job implementation. Note: this sub list only exists if the job is configured with this data.</p>
    </td></tr><tr><td style="text-align:left;width:2.544cm; " class="Tabelle3A2">
     <p class="TableCode">DynamicDataÂ </p>
    </td><td style="text-align:left;width:13.966cm; " class="Tabelle3B211">
     <p class="TextInTable">[optional] [sequence&lt; <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/NamedValue.html" title="see type com.sun.star.beans.NamedValue">com.sun.star.beans.NamedValue</a> &gt;]. Contains optional parameters of the call that started the execution of this job. In particular, it can include the parameters of a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XDispatch.html#dispatch" title="see dispatch of type com.sun.star.frame.XDispatch:dispatch">com.sun.star.frame.XDispatch:dispatch</a>()</span> request, if <span class="Codeintext">Environment-EnvType</span> is <span class="Codeintext">"DISPATCH"</span> </p>
    </td></tr></table></div>
  <p class="Paragraph">The following example shows how a job can analyze the given arguments and how the environment in which the job is executed can be detected:Â </p>
  <p class="Code">public synchronized java.lang.Object execute(com.sun.star.beans.NamedValue[] lArgs)Â </p>
  <p class="Code">Â  Â  Â  Â  throws com.sun.star.lang.IllegalArgumentException, com.sun.star.uno.Exception {</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  // extract all possible sub list of given argument list</p>
  <p class="Code">Â  Â  com.sun.star.beans.NamedValue[] lGenericConfig = null;</p>
  <p class="Code">Â  Â  com.sun.star.beans.NamedValue[] lJobConfig Â  Â  = null;</p>
  <p class="Code">Â  Â  com.sun.star.beans.NamedValue[] lEnvironment Â  = null;</p>
  <p class="Code">Â  Â  com.sun.star.beans.NamedValue[] lDispatchArgs Â = null;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  int c = lArgs.length;</p>
  <p class="Code">Â  Â  for (int i=0; i&lt;c; ++i) {</p>
  <p class="Code">Â  Â  Â  Â  if (lArgs[i].Name.equals("Config"))</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  lGenericConfig = (com.sun.star.beans.NamedValue[])</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.uno.AnyConverter.toArray(lArgs[i].Value);</p>
  <p class="Code">Â  Â  Â  Â  else</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (lArgs[i].Name.equals("JobConfig"))</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  lJobConfig = (com.sun.star.beans.NamedValue[])</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.uno.AnyConverter.toArray(lArgs[i].Value);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  else</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  if (lArgs[i].Name.equals("Environment"))</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  lEnvironment = (com.sun.star.beans.NamedValue[])</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.uno.AnyConverter.toArray(lArgs[i].Value);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  else</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (lArgs[i].Name.equals("DynamicData"))</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  lDispatchArgs = (com.sun.star.beans.NamedValue[])</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.uno.AnyConverter.toArray(lArgs[i].Value);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  else</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // It is not realy an error â because unknown items can be ignored ...</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw new com.sun.star.lang.IllegalArgumentException("unknown sub list detected");</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  // Analyze the environment info. This sub list is the only guarenteed one!</p>
  <p class="Code">Â  Â  if (lEnvironment==null)</p>
  <p class="Code">Â  Â  Â  Â  throw new com.sun.star.lang.IllegalArgumentException("no environment");</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  java.lang.String Â  Â  Â  Â  Â sEnvType Â  = null;</p>
  <p class="Code">Â  Â  java.lang.String Â  Â  Â  Â  Â sEventName = null;</p>
  <p class="Code">Â  Â  com.sun.star.frame.XFrame xFrame Â  Â  = null;<br /> Â  Â com.sun.star.frame.XModel xModel Â  Â  = null;</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  c = lEnvironment.length;</p>
  <p class="Code">Â  Â  for (int i=0; i&lt;c; ++i) {</p>
  <p class="Code">Â  Â  Â  Â  if (lEnvironment[i].Name.equals("EnvType"))</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  sEnvType = com.sun.star.uno.AnyConverter.toString(lEnvironment[i].Value);</p>
  <p class="Code">Â  Â  Â  Â  else</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (lEnvironment[i].Name.equals("EventName"))</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  sEventName = com.sun.star.uno.AnyConverter.toString(lEnvironment[i].Value);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  else</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  if (lEnvironment[i].Name.equals("Frame"))</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  xFrame = (com.sun.star.frame.XFrame)com.sun.star.uno.AnyConverter.toObject(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â new com.sun.star.uno.Type(com.sun.star.frame.XFrame.class), lEnvironment[i].Value);<br /> Â  Â  Â  Â  Â  Â  Â  Â else</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (lEnvironment[i].Name.equals("Model"))</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  xModel = (com.sun.star.frame.XModel)com.sun.star.uno.AnyConverter.toObject(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  new com.sun.star.uno.Type(com.sun.star.frame.XModel.class),</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  lEnvironment[i].Value);<br /> Â  Â }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  // Further the environment property "EnvType" is required as minimum.</p>
  <p class="Code">Â  Â  if (</p>
  <p class="Code">Â  Â  Â  Â  (sEnvType==null) ||</p>
  <p class="Code">Â  Â  Â  Â  (</p>
  <p class="Code">Â  Â  Â  Â  Â (!sEnvType.equals("EXECUTOR" Â  Â  )) &amp;&amp;</p>
  <p class="Code">Â  Â  Â  Â  Â (!sEnvType.equals("DISPATCH" Â  Â  )) &amp;&amp;</p>
  <p class="Code">Â  Â  Â  Â  Â (!sEnvType.equals("DOCUMENTEVENT"))</p>
  <p class="Code">Â  Â  Â  Â  )</p>
  <p class="Code">Â  Â  Â  Â )</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  throw new com.sun.star.lang.IllegalArgumentException("no valid value for EnvType");</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  // Analyze the set of shared config data.</p>
  <p class="Code">Â  Â  java.lang.String sAlias = null;</p>
  <p class="Code">Â  Â  if (lGenericConfig!=null) {</p>
  <p class="Code">Â  Â  Â  Â  c = lGenericConfig.length;</p>
  <p class="Code">Â  Â  Â  Â  for (int i=0; i&lt;c; ++i) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (lGenericConfig[i].Name.equals("Alias"))</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  sAlias = com.sun.star.uno.AnyConverter.toString(lGenericConfig[i].Value);</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">}Â </p>
  <h4 class="Head4"><a name="1_7_2_5_Returning_Results" />Returning Results</h4>
  <p class="Paragraph">Once a synchronous job has finished its work, it returns its result using the <span class="Codeintext">any</span> return value of the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/XJob.html#execute" title="see execute of type com.sun.star.task.XJob:execute">com.sun.star.task.XJob:execute</a>()</span> method. An asynchronous jobs send back the result through the callback method <span class="Codeintext">jobFinished()</span> to its <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/XJobListener.html" title="see type com.sun.star.task.XJobListener">com.sun.star.task.XJobListener</a></span>. The returned <span class="Codeintext">any</span> parameter must contain a <span class="Codeintext">sequence&lt; <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/NamedValue.html" title="see type com.sun.star.beans.NamedValue">com.sun.star.beans.NamedValue</a> &gt;</span> with the following elements:</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle4"><colgroup><col width="173" /><col width="582" /></colgroup><tr><td colspan="2" style="text-align:left;width:3.799cm; " class="Tabelle4A1">
      <p class="P23">Elements of the Job Return ValueÂ </p>
     </td></tr><tr><td style="text-align:left;width:3.799cm; " class="Tabelle4A2">
     <p class="TableCode">DeactivateÂ </p>
    </td><td style="text-align:left;width:12.749cm; " class="Tabelle4B2">
     <p class="TextInTable">boolean. Asks the job executor to disable a job from further execution. Note that this feature is only available if the next event is triggered by the job executor or the event broadcaster. If it comes, for example, from the dispatch framework using an URL with an Â <span class="Codeintext">&lt;alias&gt;</span> argument, the deactivation will be ignored.<br />This value should be used carefully if the <span class="Codeintext">Environment-EnvType </span>Â is <span class="Codeintext">"DISPATCH"</span>, because users will be irritated if clicking a UI element, such as an Add-On menu entry, has no effect.</p>
    </td></tr><tr><td style="text-align:left;width:3.799cm; " class="Tabelle4A2">
     <p class="TableCode">SaveArgumentsÂ </p>
    </td><td style="text-align:left;width:12.749cm; " class="Tabelle4B2">
     <p class="TextInTable">sequence&lt; <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/NamedValue.html" title="see type com.sun.star.beans.NamedValue">com.sun.star.beans.NamedValue</a> &gt;. Must contain a list of job specific data, which are written directly to the <span class="Codeintext">Arguments</span> list into the job configuration. Note: Merging is not supported. The list must be complete and replaces all values in the configu<span class="T35">ration. The necessary data can be copied and adjusted from the </span><span class="T36">JobConfig</span> <span class="T35">element of the execution arguments.</span> </p>
    </td></tr><tr><td style="text-align:left;width:3.799cm; " class="Tabelle4A2">
     <p class="TableCode">SendDispatchResultÂ </p>
    </td><td style="text-align:left;width:12.749cm; " class="Tabelle4B2">
     <p class="TextInTable"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/DispatchResultEvent.html" title="see type com.sun.star.frame.DispatchResultEvent">com.sun.star.frame.DispatchResultEvent</a>. If a job is designed to be usable in the dispatch framework, this contains a struct, which is send to all interested dispatch result listeners.Â </p>
     <p class="TextInTable">Tip: This value should be omitted if <span class="Codeintext">Environment-EnvType</span> is not <span class="Codeintext">"DISPATCH"</span>.</p>
    </td></tr></table></div>
  <h4 class="Head4"><a name="1_7_2_6_Configuration" />Configuration</h4>
  <p class="Paragraph">Although jobs that are called through a <span class="wwwftpemail">vnd.sun.star.jobs:</span> URL by their implementation name do not require it, a job usually has configuration data. The configuration package <span class="wwwftpemail">org.openoffice.Office.Jobs</span> contains all necessary information:</p>
  <p class="Code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;!DOCTYPE oor:component-schema SYSTEM "../../../../component-schema.dtd"&gt;</p>
  <p class="Code">&lt;oor:component-schema xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" oor:name="Jobs" oor:package="org.openoffice.Office" xml:lang="en-US"&gt;Â </p>
  <p class="Code">Â  &lt;templates&gt;</p>
  <p class="Code">Â  Â  &lt;group oor:name="Job"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="Service" oor:type="xs:string"/&gt;</p>
  <p class="Code">Â  Â  Â  &lt;group oor:name="Arguments" oor:extensible="true"/&gt;</p>
  <p class="Code">Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  Â  &lt;group oor:name="TimeStamp"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="AdminTime" oor:type="xs:string"/&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="UserTime" oor:type="xs:string"/&gt;</p>
  <p class="Code">Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  Â  &lt;group oor:name="Event"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;set oor:name="JobList" oor:node-type="TimeStamp"/&gt;</p>
  <p class="Code">Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  &lt;/templates&gt;</p>
  <p class="Code">Â  &lt;component&gt;</p>
  <p class="Code">Â  Â  &lt;set oor:name="Jobs" oor:node-type="Job"/&gt;</p>
  <p class="Code">Â  Â  &lt;set oor:name="Events" oor:node-type="Event"/&gt;</p>
  <p class="Code">Â  &lt;/component&gt;</p>
  <p class="Code">&lt;/oor:component-schema&gt;Â </p>
  <p class="Paragraph">The <span class="Codeintext">Job</span> template contains all properties that describe a job component. Instances of this template are located inside the configuration set <span class="Codeintext">Jobs</span>.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle7"><colgroup><col width="85" /><col width="622" /></colgroup><tr><td colspan="2" style="text-align:left;width:1.854cm; " class="Tabelle7A1">
      <p class="P23">Properties of the Job templateÂ </p>
     </td></tr><tr><td style="text-align:left;width:1.854cm; " class="Tabelle7A2">
     <p class="TableCode">AliasÂ </p>
    </td><td style="text-align:left;width:13.624cm; " class="Tabelle7B2">
     <p class="TextInTable">string. This property is declared as the name of the corresponding set node inside the configuration set <span class="Codeintext">Jobs</span>. It must be a unique name, which represents the structured information of a job. In the example <span class="wwwftpemail">.xcu</span> file below its value is <span class="Codeintext">"SyncJob"</span>. In the job execution arguments this property is passed as <span class="Codeintext">Config - Alias</span> </p>
    </td></tr><tr><td style="text-align:left;width:1.854cm; " class="Tabelle7A2">
     <p class="TableCode">ServiceÂ </p>
    </td><td style="text-align:left;width:13.624cm; " class="Tabelle7B2">
     <p class="TextInTable">string. Represents the UNO implementation name of the job component. In the job execution arguments this property is passed as <span class="Codeintext">Config - Service</span> </p>
    </td></tr><tr><td style="text-align:left;width:1.854cm; " class="Tabelle7A2">
     <p class="TableCode">ArgumentsÂ </p>
    </td><td style="text-align:left;width:13.624cm; " class="Tabelle7B2">
     <p class="TextInTable">set of <span class="Codeintext">any</span> entries. This list can be filled with any values and represents the private set of configuration data for this job. In the job execution arguments this property is passed as <span class="Codeintext">JobConfig</span> </p>
    </td></tr></table></div>
  <p class="Paragraph">The job property <span class="Codeintext">Alias</span> was created to provide you with more flexibility for a developing components. You can use the same UNO implementation, but register it with different Aliases. At runtime the job instance will be initialized with its own configuration data and can detect which representation is used.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle8"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Tabelle8A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./4 Writing UNO Components_files/important.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Tabelle8B1">
      <p class="TipInTable">You cannot use the generic UNO service names <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/Job.html" title="see type com.sun.star.task.Job">com.sun.star.task.Job</a></span> or <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/AsyncJob.html" title="see type com.sun.star.task.AsyncJob">com.sun.star.task.AsyncJob</a></span> for the <span class="Codeintext">Service</span> job property, because the job executor cannot identify the correct job implementation. To avoid ambiguities, it is necessary to use the UNO implementation name of the component.</p>
     </td></tr></table></div>
  <p class="Paragraph">Every job instance can be bound to multiple events. An event indicates a special office state, which can be detected at runtime (for example, <span class="Codeintext">OnFirstVisibleTask</span> ), and which can be triggered by a call to the job executor when the first document window is displayed.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle11"><colgroup><col width="91" /><col width="665" /></colgroup><tr><td colspan="2" style="text-align:left;width:1.983cm; " class="Tabelle11A1">
      <p class="P23">Properties of the Event templateÂ </p>
     </td></tr><tr><td style="text-align:left;width:1.983cm; " class="Tabelle11A2">
     <p class="TableCode">EventNameÂ </p>
    </td><td style="text-align:left;width:14.566cm; " class="Tabelle11B2">
     <p class="TextInTable">string. This property is declared as the name of the corresponding set node inside the configuration set <span class="Codeintext">Events</span>. It must be a unique name, which describes a functional state. In the example <span class="wwwftpemail">.xcu</span> file below its value is <span class="Codeintext">"onFirstVisibleTask"</span>.</p>
     <p class="TextInTable">Section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_7_2_8_List_of_Supported_Events" title="see chapter 4.7.2 Writing UNO Components - Integrating Components into OpenOffice.org - Jobs - List of Supported Events">4.7.2 Writing UNO Components - Integrating Components into OpenOffice.org - Jobs - List of Supported Events</a></span> summarizes the events currently triggered by the office. In addition, developers can use arbitrary event strings with the <span class="wwwftpemail">vnd.sun.star.jobs:</span> URL or in calls to <span class="Codeintext">trigger()</span> at the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/JobExecutor.html" title="see type com.sun.star.task.JobExecutor">com.sun.star.task.JobExecutor</a></span> service.</p>
    </td></tr><tr><td style="text-align:left;width:1.983cm; " class="Tabelle11A2">
     <p class="TableCode">JobListÂ </p>
    </td><td style="text-align:left;width:14.566cm; " class="Tabelle11B2">
     <p class="TextInTable">set of <span class="Codeintext">TimeStamp</span> entries. This set contains a list of all <span class="Codeintext">Alias</span> names of jobs that are bound to this event. Every job registration can be combined with time stamp values. Please refer to the description of the template <span class="Codeintext">TimeStamp</span> below for details</p>
    </td></tr></table></div>
  <p class="Paragraph">As an optional feature, every job registration that is bound to an event can be enabled or disabled by two time stamp values. In a shared installation of OpenOffice.org, an administrator can use the <span class="Codeintext">AdminTime</span> value to reactivate jobs for every newly started user office instance; regardless of earlier executions of these jobs. That can be useful, for example, for updating user installations if new functions have been added to the shared installation.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle10"><colgroup><col width="91" /><col width="665" /></colgroup><tr><td colspan="2" style="text-align:left;width:1.983cm; " class="Tabelle10A1">
      <p class="P23">Properties of the TimeStamp templateÂ </p>
     </td></tr><tr><td style="text-align:left;width:1.983cm; " class="Tabelle10A2">
     <p class="TableCode">AdminTimeÂ </p>
    </td><td style="text-align:left;width:14.566cm; " class="Tabelle10B2">
     <p class="TextInTable">string. This value must be formatted according to the ISO 8601. It contains the time stamp, which can only be adjusted by an administrator, to reactivate this job.Â </p>
    </td></tr><tr><td style="text-align:left;width:1.983cm; " class="Tabelle10A2">
     <p class="TableCode">UserTimeÂ </p>
    </td><td style="text-align:left;width:14.566cm; " class="Tabelle10B2">
     <p class="TextInTable">string. This value must be formatted according to the ISO 8601. It contains the time, when this job was finished successfully last time upon the configured event.Â </p>
    </td></tr></table></div>
  <p class="Paragraph">Using this time stamp feature can sometimes be complicated. For example, assume that there is a job that was installed using the Extension Manager. The job is enabled for a registered event by default, but after the first execution it is disabled. By default, both values (<span class="Codeintext">AdminTime</span> and <span class="Codeintext">UserTime</span>) do not exist for a configured event. A <span class="wwwftpemail">Jobs.xcu</span> fragment, as part of the extension, must also not contain the <span class="Codeintext">AdminTime</span> and <span class="Codeintext">UserTime</span> entries. Because both values are not there, no check can be made and the job is enabled. A job can be deactivated by the global job executor once it has finished its work successfully (depending on the <span class="Codeintext">Deactivate</span> return value). In that case, the <span class="Codeintext">UserTime</span> entry is generated and set to the current time. An administrator can set a newer and valid <span class="Codeintext">AdminTime</span> value in order to reactivate the job again, or the user can remove his <span class="Codeintext">UserTime</span> entry manually from the configuration file of the user installation.</p>
  <p class="Paragraph">The following <span class="wwwftpemail">Jobs.xcu</span> file shows an example job configuration:</p>
  <p class="Code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;!DOCTYPE oor:component-data SYSTEM "../../../../component-update.dtd"&gt;</p>
  <p class="Code">&lt;oor:component-data oor:name="Jobs" oor:package="org.openoffice.Office" xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;Â </p>
  <p class="Code">Â  &lt;node oor:name="Jobs"&gt;</p>
  <p class="Code">Â  Â  &lt;node oor:name="SyncJob" oor:op="replace"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="Service"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;value&gt;com.sun.star.comp.framework.java.services.SyncJob&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="Arguments"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name=âarg_1â oor:type=âxs:stringâ oor:op="replace"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;val_1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;node oor:name="Events"&gt;</p>
  <p class="Code">Â  Â  &lt;node oor:name="onFirstVisibleTask" oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="JobList"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;node oor:name="SyncJob" oor:op="replace"/&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/oor:component-data&gt;Â </p>
  <p class="Paragraph">This example job has the following characteristics:Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P56" style="margin-left:2.5cm;"><p class="P56" style="margin-left:0cm;">Its alias name is <span class="Codeintext">"SyncJob"</span> </p></li>
   <li class="P56" style="margin-left:2.5cm;"><p class="P56" style="margin-left:0cm;">The UNO implementation name of the component is <span class="Codeintext">com.sun.star.comp.framework.java.services.SyncJob</span>.</p></li>
   <li class="P56" style="margin-left:2.5cm;"><p class="P56" style="margin-left:0cm;">The job has its own set of configuration data with one item. It is a <span class="Codeintext">string</span>, its name is <span class="Codeintext">arg_1</span> and its value is <span class="Codeintext">"val_1"</span>.</p></li>
   <li class="P56" style="margin-left:2.5cm;"><p class="P56" style="margin-left:0cm;">The job is bound to the global event <span class="Codeintext">onFirstVisibleTask</span>, which is triggered when the first document window of a new OpenOffice.org instance is displayed. The next execution of this job is guaranteed, because there are no time stamp values present.</p></li>
  </ul>
  <p class="Paragraph">When specifying the event to which the job is bound (onFirstVisibleTask in the above example), it is important to use oor:op="fuse", so that multiple Jobs.xcu particles merge losslessly. but note that <span class="Codeintext">oor:op="fuse"</span> is only available since OpenOffice.org 2.0.3, and that a Jobs.xcu file that uses it cannot be used with older versions of OpenOffice.org. With older versions of OpenOffice.org, it was common to use <span class="Codeintext">oor:op="replace"</span> instead of <span class="Codeintext">oor:op="fuse"</span>, which potentially caused event bindings to get lost when multiple Jobs.xcu particles were merged.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle23"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Tabelle23A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./4 Writing UNO Components_files/important.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Tabelle23B1">
      <p class="TipInTable">A job is not executed when it has deactivated itself and is called afterwards by a <span class="wwwftpemail">vnd.sun.star.jobs:event=...</span> command URL. This can be confusing to users, especially with add-ons, since it would seem that the customized UI items do not function.</p>
     </td></tr></table></div>
  <h4 class="Head4"><a name="1_7_2_7_Installation" />Installation</h4>
  <p class="Paragraph">The easiest way to register an external job component is to use the Extension Manager (see chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#1_Extensions" title="see chapter 5 Extensions">5 Extensions</a></span>). An Â extension for the example job of this chapter can have the following directory structure:</p>
  <p class="P57">SyncJob.oxt:Â </p>
  <p class="P57">Â  Â  META-INF/manifest.xml</p>
  <p class="P57">Â  Â  Jobs.xcu</p>
  <p class="P57">Â  Â  windows.plt/</p>
  <p class="P57">Â  Â  Â  Â  SyncJob.jar</p>
  <h4 class="P58"><a name="1_7_2_8_Using_the_vnd.sun.star.jobs_3A_URL_Schema" />Using the vnd.sun.star.jobs: URL Schema </h4>
  <p class="P59">This section describes the necessary steps to execute a job by issuing a command URL at the dispatch framework. Based upon the protocol handler mechanism, a specialized URL schema has been implemented in OpenOffice.org. It is registered for the URL schema <span class="Codeintext">"vnd.sun.star.jobs:*"</span> which uses the following syntax:</p>
  <p class="P59"><span class="Codeintext">vnd.sun.star.jobs:{[event=&lt;name&gt;]}{,[alias=&lt;name&gt;]}{,[service=&lt;name&gt;]}</span> </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table39"><colgroup><col width="134" /><col width="573" /></colgroup><tr><td colspan="2" style="text-align:left;width:2.932cm; " class="Table39A1">
      <p class="P23">Elements of a vnd.sun.star.jobs: URLÂ </p>
     </td></tr><tr><td style="text-align:left;width:2.932cm; " class="Table39A2">
     <p class="TableCode">event=&lt;name&gt;Â </p>
    </td><td style="text-align:left;width:12.547cm; " class="Table39B2">
     <p class="TextInTable"><span class="T41">string</span>. Contains an event string, which can also be used as parameter of the interface method <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/XJobExecutor.html#trigger" title="see trigger of type com.sun.star.task.XJobExecutor:trigger">com.sun.star.task.XJobExecutor:trigger</a>()</span>. It corresponds to the node name of the set <span class="Codeintext">Events</span> in the configuration package <span class="T40">org.openoffice.Office.Jobs</span>. Using the <span class="Codeintext">event</span> parameter of a <span class="Codeintext">vnd.sun.star.jobs:</span> URL will start all jobs that are registered for this event in the configuration.<br />Note: Disabled jobs, that is jobs with a user time stamp that is newer than the administrator time stamp, are not triggered by event URLs.</p>
    </td></tr><tr><td style="text-align:left;width:2.932cm; " class="Table39A2">
     <p class="TableCode">alias=&lt;name&gt;Â </p>
    </td><td style="text-align:left;width:12.547cm; " class="Table39B2">
     <p class="TextInTable">string. Contains an alias name of a configured job. This name is not used by the job execution API. It is a node name of the set <span class="Codeintext">Jobs</span> in the configuration package <span class="wwwftpemail">org.openoffice.Office.Jobs</span> <span class="T22">.</span> Using the <span class="Codeintext">alias</span> part of a <span class="Codeintext">vnd.sun.star.jobs:</span> URL only starts the requested job.</p>
    </td></tr><tr><td style="text-align:left;width:2.932cm; " class="Table39A2">
     <p class="TableCode">service=&lt;name&gt;Â </p>
    </td><td style="text-align:left;width:12.547cm; " class="Table39B2">
     <p class="TextInTable">string. Contains the UNO implementation name of a configured or unconfigured <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/Job.html" title="see type com.sun.star.task.Job">com.sun.star.task.Job</a> or <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/AsyncJob.html" title="see type com.sun.star.task.AsyncJob">com.sun.star.task.AsyncJob</a> service. It is not necessary that such jobs are registered in the configuration, provided that they work without configuration data or implements necessary configuration on their own.Â </p>
    </td></tr></table></div>
  <p class="Paragraph">It is possible to combine elements so as to start several jobs at once with a single URL. For instance, you could dispatch a URL <span class="wwwftpemail">vnd.sun.star.jobs:event=e1,alias=a1,event=e2 ,...</span>. However, URLs that start several jobs at once should be used carefully, since there is no check for double or concurrent requests. If a service is designed asynchronously, it will be run concurrently with another, synchronous job. If both services work at the same area, there might be race conditions and they must synchronize their work. The generic job execution mechanism does not provide this functionality.</p>
  <p class="Paragraph">The following configuration file for the configuration package <span class="wwwftpemail">org.openoffice.Office.Jobs</span> shows two jobs, which are registered for different events:</p>
  <p class="Code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;!DOCTYPE oor:component-data SYSTEM "../../../../component-update.dtd"&gt;</p>
  <p class="Code">&lt;oor:component-data oor:name="Jobs" oor:package="org.openoffice.Office" xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;Â </p>
  <p class="Code">Â  &lt;node oor:name="Jobs"&gt;</p>
  <p class="Code">Â  Â  &lt;node oor:name="Job_1" oor:op="replace"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="Service"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;value&gt;vnd.sun.star.jobs.Job_1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="Arguments"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;prop oor:name=âarg_1â oor:type=âxs:stringâ oor:op="replace"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;value&gt;val_1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;node oor:name="Job_2" oor:op="replace"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;prop oor:name="Service"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;value&gt;vnd.sun.star.jobs.Job_2&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="Arguments"/&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;node oor:name="Events"&gt;</p>
  <p class="Code">Â  Â  &lt;node oor:name="onFirstVisibleTask" oor:op="fuse"&gt;</p>
  <p class="Code">Â  Â  Â  &lt;node oor:name="JobList"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;node oor:name="Job_1" oor:op="replace"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;prop oor:name="AdminTime"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;value&gt;01.01.2003/00:00:00&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;prop oor:name="UserTime"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;value&gt;01.01.2003/00:00:01&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;node oor:name="Job_2" oor:op="replace"/&gt;</p>
  <p class="Code">Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/oor:component-data&gt;Â </p>
  <p class="Paragraph">The first job can be described by the following properties:Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle17"><colgroup><col width="209" /><col width="547" /></colgroup><tr><td colspan="2" style="text-align:left;width:4.572cm; " class="Tabelle17A1">
      <p class="P23">Properties of âJob_1âÂ </p>
     </td></tr><tr><td style="text-align:left;width:4.572cm; " class="Tabelle17A2">
     <p class="TableCode">aliasÂ </p>
    </td><td style="text-align:left;width:11.977cm; " class="Tabelle17B2">
     <p class="TableCode"><span class="Codeintext">Job_1</span> </p>
    </td></tr><tr><td style="text-align:left;width:4.572cm; " class="Tabelle17A2">
     <p class="TableCode">UNO implementation nameÂ </p>
    </td><td style="text-align:left;width:11.977cm; " class="Tabelle17B2">
     <p class="TableCode"><span class="CODE">vnd.sun.star.jobs.Job_1</span> </p>
    </td></tr><tr><td style="text-align:left;width:4.572cm; " class="Tabelle17A2">
     <p class="TableCode">activation stateÂ </p>
    </td><td style="text-align:left;width:11.977cm; " class="Tabelle17B2">
     <p class="TextInTable">Disabled for job execution (because its AdminTime is older than its UserTime) Â </p>
    </td></tr><tr><td style="text-align:left;width:4.572cm; " class="Tabelle17A2">
     <p class="TableCode">own configurationÂ </p>
    </td><td style="text-align:left;width:11.977cm; " class="Tabelle17B2">
     <p class="TextInTable">contains one <span class="Codeintext">string</span> item <span class="Codeintext">arg1</span> with the value <span class="Codeintext">"val1"</span> </p>
    </td></tr><tr><td style="text-align:left;width:4.572cm; " class="Tabelle17A2">
     <p class="TableCode">event registrationÂ </p>
    </td><td style="text-align:left;width:11.977cm; " class="Tabelle17B2">
     <p class="TextInTable">job is registered for the event string <span class="Codeintext">"onFirstVisibleTask"</span> </p>
    </td></tr></table></div>
  <p class="Paragraph">The second job can be described by these properties:Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle18"><colgroup><col width="209" /><col width="547" /></colgroup><tr><td colspan="2" style="text-align:left;width:4.572cm; " class="Tabelle18A1">
      <p class="P23">Properties of âJob_2âÂ </p>
     </td></tr><tr><td style="text-align:left;width:4.572cm; " class="Tabelle18A2">
     <p class="TableCode">aliasÂ </p>
    </td><td style="text-align:left;width:11.977cm; " class="Tabelle18B2">
     <p class="TableCode"><span class="Codeintext">Job_2</span> </p>
    </td></tr><tr><td style="text-align:left;width:4.572cm; " class="Tabelle18A2">
     <p class="TableCode">UNO implementation nameÂ </p>
    </td><td style="text-align:left;width:11.977cm; " class="Tabelle18B2">
     <p class="TableCode"><span class="CODE">vnd.sun.star.jobs.Job_2</span> </p>
    </td></tr><tr><td style="text-align:left;width:4.572cm; " class="Tabelle18A2">
     <p class="TableCode">activation stateÂ </p>
    </td><td style="text-align:left;width:11.977cm; " class="Tabelle18B2">
     <p class="TextInTable">Enabled for job execution (because it uses default values for <span class="Codeintext">AdminTime</span> and <span class="Codeintext">UserTime</span>)</p>
    </td></tr><tr><td style="text-align:left;width:4.572cm; " class="Tabelle18A2">
     <p class="TableCode">own configurationÂ </p>
    </td><td style="text-align:left;width:11.977cm; " class="Tabelle18B2">
     <p class="TextInTable">no own configuration items registeredÂ </p>
    </td></tr><tr><td style="text-align:left;width:4.572cm; " class="Tabelle18A2">
     <p class="TableCode">event registrationÂ </p>
    </td><td style="text-align:left;width:11.977cm; " class="Tabelle18B2">
     <p class="TextInTable">job is registered for the event string <span class="Codeintext">"onFirstVisibleTask"</span> </p>
    </td></tr></table></div>
  <p class="Paragraph">The following demonstrates use cases for all possible <span class="wwwftpemail">vnd.sun.star.job:</span> URLs. Not all possible scenarios are shown here. The job dispatch can be used in different ways and the combination of jobs can produce different results:</p>
  <p class="Paragraph"><span class="Codeintext">vnd.sun.star.jobs:event=onFirstVisibleTask</span> </p>
  <p class="Paragraph">This URL starts Â <span class="Codeintext">Job_2</span> only, <span class="Codeintext">Job_1</span> is marked <span class="Codeintext">DISABLED</span>, since its <span class="Codeintext">AdminTime</span> stamp is older than its <span class="Codeintext">UserTime</span> stamp.</p>
  <p class="Paragraph">The job is initialized with environment information through the <span class="Codeintext">Environment </span>sub list, as shown in section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_7_2_4_Initialization" title="see chapter 4.7.2 Writing UNO Components - Integrating Components into OpenOffice.org - Jobs - Initialization">4.7.2 Writing UNO Components - Integrating Components into OpenOffice.org - Jobs - Initialization</a></span>. Optional dispatch arguments are passed in <span class="Codeintext">DynamicData</span>, and generic configuration data, including the event string, is received in <span class="Codeintext">Config</span>. However, it is not initialized with configuration data of its own in <span class="Codeintext">JobConfig</span> because <span class="Codeintext">Job_2</span> is not configured with such information. On the other hand, <span class="Codeintext">Job_2</span> may return data after finishing its work, which will be written back to the configuration.</p>
  <p class="Paragraph">Furthermore, the job instance can expect that the <span class="Codeintext">Frame</span> property from the <span class="Codeintext">Environment</span> sub list points to the frame in which the dispatch request is to be executed.</p>
  <p class="Paragraph"><span class="Codeintext">vnd.sun.star.jobs:alias=Job_1</span> </p>
  <p class="Paragraph">This starts <span class="Codeintext">Job_1</span> only. It is initialized with an environment, and optionally initialized with dispatch arguments, generic configuration data, and configuration data of its own. However, the event name is not set here because this job was triggered directly, not using an event name.</p>
  <p class="Paragraph"><span class="Codeintext">vnd.sun.star.jobs:service=vnd.sun.star.jobs.Job_3</span> </p>
  <p class="Paragraph">A <span class="Codeintext">vnd.sun.star.jobs.Job_3</span> is not registered in the job configuration package. However, if this Â implementation was registered with the global service manager, and if it provided the Â <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/XJob.html" title="see type com.sun.star.task.XJob">com.sun.star.task.XJob</a></span> or <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/task/XAsyncJob.html" title="see type com.sun.star.task.XAsyncJob">com.sun.star.task.XAsyncJob</a></span> interfaces, it would be executed by this URL. If both interfaces are present, the synchronous version is preferred.</p>
  <p class="Paragraph">The given UNO implementation name <span class="Codeintext">vnd.sun.star.jobs.Job_3</span> is used directly for creation at the UNO service manager. In addition, this job instance is only initialized with an environment and possibly with optional dispatch argumentsâthere is no configuration data for the job to use.</p>
  <h4 class="Head4"><a name="1_7_2_9_List_of_supported_Events" />List of supported Events</h4>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle24"><colgroup><col width="204" /><col width="502" /></colgroup><tr><td colspan="2" style="text-align:left;width:4.475cm; " class="Tabelle24A1">
      <p class="TableHead">Supported events triggered by codeÂ </p>
     </td></tr><tr><td style="text-align:left;width:4.475cm; " class="Tabelle24A2">
     <p class="TableCode">onFirstRunInitializationÂ </p>
    </td><td style="text-align:left;width:11.003cm; " class="Tabelle24B2">
     <p class="TextInTable">Called on startup once after OpenOffice.org is installed. Should be used for post-setup operations.Â </p>
    </td></tr><tr><td style="text-align:left;width:4.475cm; " class="Tabelle24A2">
     <p class="TableCode">onFirstVisibleTaskÂ </p>
    </td><td style="text-align:left;width:11.003cm; " class="Tabelle24B2">
     <p class="TextInTable">Called after a document window has been shown for the first time after launching the application. Note: The quickstarter influences this behavior. With the quickstarter, closing the last document does not close the application. Opening a new document in this situation does not trigger this event.Â </p>
    </td></tr><tr><td style="text-align:left;width:4.475cm; " class="Tabelle24A2">
     <p class="TableCode">onDocumentOpenedÂ </p>
    </td><td style="text-align:left;width:11.003cm; " class="Tabelle24B2">
     <p class="TextInTable">Indicates that a new document was opened. It does not matter if a new or an existing document was opened. Thus it represents the combined <span class="Codeintext">OnNew</span> and <span class="Codeintext">OnLoad</span> events of the global event broadcaster.</p>
    </td></tr></table></div>
  <p class="Standard">Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle25"><colgroup><col width="219" /><col width="537" /></colgroup><tr><td colspan="2" style="text-align:left;width:4.785cm; " class="Tabelle25A1">
      <p class="TableHead">Supported events triggered by the global event broadcasterÂ </p>
     </td></tr><tr><td style="text-align:left;width:4.785cm; " class="Tabelle25A2">
     <p class="TableCode">OnStartAppÂ </p>
    </td><td style="text-align:left;width:11.763cm; " class="Tabelle25B2">
     <p class="TextInTable">Application has been startedÂ </p>
    </td></tr><tr><td style="text-align:left;width:4.785cm; " class="Tabelle25A2">
     <p class="TableCode">OnCloseAppÂ </p>
    </td><td style="text-align:left;width:11.763cm; " class="Tabelle25B2">
     <p class="TextInTable">Application is going to be closedÂ </p>
    </td></tr><tr><td style="text-align:left;width:4.785cm; " class="Tabelle25A2">
     <p class="TableCode">OnNewÂ </p>
    </td><td style="text-align:left;width:11.763cm; " class="Tabelle25B2">
     <p class="TextInTable">New Document was createdÂ </p>
    </td></tr><tr><td style="text-align:left;width:4.785cm; " class="Tabelle25A2">
     <p class="TableCode">OnLoadÂ </p>
    </td><td style="text-align:left;width:11.763cm; " class="Tabelle25B2">
     <p class="TextInTable">Document has been loadedÂ </p>
    </td></tr><tr><td style="text-align:left;width:4.785cm; " class="Tabelle25A2">
     <p class="TableCode">OnSaveAsÂ </p>
    </td><td style="text-align:left;width:11.763cm; " class="Tabelle25B2">
     <p class="TextInTable">Document is going to be saved under a new nameÂ </p>
    </td></tr><tr><td style="text-align:left;width:4.785cm; " class="Tabelle25A2">
     <p class="TableCode">OnSaveAsDoneÂ </p>
    </td><td style="text-align:left;width:11.763cm; " class="Tabelle25B2">
     <p class="TextInTable">Document was saved under a new nameÂ </p>
    </td></tr><tr><td style="text-align:left;width:4.785cm; " class="Tabelle25A2">
     <p class="TableCode">OnSaveÂ </p>
    </td><td style="text-align:left;width:11.763cm; " class="Tabelle25B2">
     <p class="TextInTable">Document is going to be savedÂ </p>
    </td></tr><tr><td style="text-align:left;width:4.785cm; " class="Tabelle25A2">
     <p class="TableCode">OnSaveDoneÂ </p>
    </td><td style="text-align:left;width:11.763cm; " class="Tabelle25B2">
     <p class="TextInTable">Document was savedÂ </p>
    </td></tr><tr><td style="text-align:left;width:4.785cm; " class="Tabelle25A2">
     <p class="TableCode">OnPrepareUnloadÂ </p>
    </td><td style="text-align:left;width:11.763cm; " class="Tabelle25B2">
     <p class="TextInTable">Document is going to be removedÂ </p>
    </td></tr><tr><td style="text-align:left;width:4.785cm; " class="Tabelle25A2">
     <p class="TableCode">OnUnloadÂ </p>
    </td><td style="text-align:left;width:11.763cm; " class="Tabelle25B2">
     <p class="TextInTable">Document has been removedÂ </p>
    </td></tr><tr><td style="text-align:left;width:4.785cm; " class="Tabelle25A2">
     <p class="TableCode">OnFocusÂ </p>
    </td><td style="text-align:left;width:11.763cm; " class="Tabelle25B2">
     <p class="TextInTable">Document was activatedÂ </p>
    </td></tr><tr><td style="text-align:left;width:4.785cm; " class="Tabelle25A2">
     <p class="TableCode">OnUnfocusÂ </p>
    </td><td style="text-align:left;width:11.763cm; " class="Tabelle25B2">
     <p class="TextInTable">Document was deactivatedÂ </p>
    </td></tr><tr><td style="text-align:left;width:4.785cm; " class="Tabelle25A2">
     <p class="TableCode">OnPrintÂ </p>
    </td><td style="text-align:left;width:11.763cm; " class="Tabelle25B2">
     <p class="TextInTable">Document will be printedÂ </p>
    </td></tr><tr><td style="text-align:left;width:4.785cm; " class="Tabelle25A2">
     <p class="TableCode">OnModifyChangeÂ </p>
    </td><td style="text-align:left;width:11.763cm; " class="Tabelle25B2">
     <p class="TextInTable">Modified state of the document has changedÂ </p>
    </td></tr></table></div>
  <p class="Standard">Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle26"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.596cm; " class="Tabelle26A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./4 Writing UNO Components_files/important.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.454cm; " class="Tabelle26B1">
      <p class="TipInTable">Event names are case sensitive.Â </p>
     </td></tr></table></div>
  <p class="Paragraph">Â </p>
  <h3 class="P60"><a name="1_7_3_Add-Ons" />4.7.3Â Â Add-Ons </h3>
  <p class="Paragraph">A OpenOffice.org add-on is an extension providing one or more functions through the user interface of OpenOffice.org. A typical add-on is available as an extension Â for easier deployment with the Extension Manager. An add-on contains configuration files which specify the user interface, registration for a protocol schema and first-time instantiation. </p>
  <p class="P61">The <span class="T38">Extension Manager</span> merges the configuration files with the menu and toolbar items for an add-on directly into the OpenOffice.org configuration files.</p>
  <h4 class="Head4"><a name="1_7_3_1_Overview" />Overview</h4>
  <p class="P62">OpenOffice.org supports the integration of add-ons into the following areas of the GUI. Â </p>
  <p class="P5"><span class="T23">Menu items for add-ons can be added to an </span><span class="T42">Add-Ons</span> <span class="T23">submenu of the </span><span class="T42">Tools</span> <span class="T23">menu and a corresponding add-ons popup toolbar icon:</span> </p>
  <div style="text-align:right"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle12"><colgroup><col width="703" /></colgroup><tr><td style="text-align:left;width:15.401cm; " class="Tabelle12A1">
      <div class="Paragraph"><div style="width: 15.311cm; " id="Rahmen6" class="fr5">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/addon_popups.png" title="link to the full-sized graphic &quot;./addon_popups.png&quot;"><img border="0" width="649" height="470" alt="Screenshot showing the addon popup menu entries" src="./4 Writing UNO Components_files/addon_popups.png" class="fr11" /></a>Illustration <a name="refIllustration6">7</a>: Add-Ons submenu and toolbar popup</div>
       </div> </div>
     </td></tr></table></div>
  <p class="P63">It is also possible to create custom menus in the Menu Bar. You are free to choose your own menu title, and you can create menu items and submenus for your add-on. Custom menus are inserted between the <span class="ButtonsMenus">Tools</span> and <span class="ButtonsMenus">Window</span> menus. Separators are supported as well:</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle16"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Tabelle16A1">
      <div class="Paragraph"><div style="width: 7.474cm; " id="Rahmen61" class="fr5">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/addon_custom_menu.png" title="link to the full-sized graphic &quot;./addon_custom_menu.png&quot;"><img border="0" width="309" height="103" alt="Screenshot showing a new menu entry" src="./4 Writing UNO Components_files/addon_custom_menu.png" class="fr9" /></a>Illustration <a name="refIllustration7">8</a>: Custom top-level menu</div>
       </div> </div>
     </td></tr></table></div>
  <p class="Paragraph"><span class="T23">You can create toolbar icons in the Function Bar, which is usually the topmost toolbar. Below you see two toolbar items, an icon for </span><span class="ButtonsMenus">Function 1</span> <span class="T23">and a text item for </span><span class="ButtonsMenus">Function 2</span> <span class="T39">:</span> </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle19"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Tabelle19A1">
      <div class="Paragraph"><div style="width: 7.929cm; " id="Rahmen8" class="fr12">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/addon_toolbar_icons.png" title="link to the full-sized graphic &quot;./addon_toolbar_icons.png&quot;"><img border="0" width="231" height="64" alt="Screenshot showing a new toolbar entry" src="./4 Writing UNO Components_files/addon_toolbar_icons.png" class="fr9" /></a>Illustration <a name="refIllustration8">9</a>: Toolbar icons for Function 1 and Function 2 </div>
       </div> </div>
     </td></tr></table></div>
  <p class="P61">The <span class="T42">Help</span> menu offers support for add-ons through help menu items that open the online help of an add-on. They are inserted below the <span class="T42">Help - Registration</span> item under a separator. </p>
  <h4 class="Head4"><a name="1_7_3_2_Guidelines" />Guidelines</h4>
  <p class="Paragraph">For a smooth integration, a developer should be aware of the following guidelines:Â </p>
  <h5 class="Head5"><a name="1_7_3_2_1_Add-Ons_Submenu" />Add-Ons Submenu</h5>
  <ul style="margin-left:0.5cm;">
   <li class="P64" style="margin-left:2.5cm;"><p class="P64" style="margin-left:0cm;">Since the <span class="ButtonsMenus">Tools - Add-Ons</span> menu is shared by all installed add-ons, an add-on should save space and use a submenu when it has more than two functions. The name of the add-on should be part of the menu item names or the submenu title.</p></li>
   <li class="P64" style="margin-left:2.5cm;"><p class="P64" style="margin-left:0cm;">If your add-on has many menu items, use additional submenus to enhance the overview. Use Â four to seven entries for a single menu. If you exceed this limit, start creating submenus.</p></li>
  </ul>
  <h5 class="Head5"><a name="1_7_3_2_2_Custom_Top-Level_Menu" />Custom Top-Level Menu</h5>
  <ul style="margin-left:0.5cm;">
   <li class="P65" style="margin-left:2.5cm;"><p class="P65" style="margin-left:0cm;">Only frequently used add-ons or add-ons that offer very important functions in a user environment should use their own top-level menu.Â </p></li>
   <li class="P65" style="margin-left:2.5cm;"><p class="P65" style="margin-left:0cm;">Use submenus to enhance the overview. Use four to seven entries for a single menu. If you exceed this limit, start creating submenus.Â </p></li>
   <li class="P65" style="margin-left:2.5cm;"><p class="P65" style="margin-left:0cm;">Use the option to group related items by means of separator items.Â </p></li>
  </ul>
  <h5 class="Head5"><a name="1_7_3_2_3_Toolbar" />Toolbar</h5>
  <ul style="margin-left:0.5cm;">
   <li class="P66" style="margin-left:2.5cm;"><p class="P66" style="margin-left:0cm;">Only important functions should be integrated into the toolbar.Â </p></li>
  </ul>
  <ul style="margin-left:0.5cm;">
   <li class="P65" style="margin-left:2.5cm;"><p class="P65" style="margin-left:0cm;">Use the option to group functions by means of separator items.Â </p></li>
  </ul>
  <h5 class="Head5"><a name="1_7_3_2_4_Add-On_Help_menu" />Add-On Help menu</h5>
  <p class="P61">Every add-on should provide help to user. This help has to be made available through an entry in the Â OpenOffice.org <span class="ButtonsMenus">Help</span> menu. Every add-on should only use a single <span class="ButtonsMenus">Help</span> menu item.</p>
  <p class="P61">If the add-on comes with its own dialogs, it should also offer <span class="ButtonsMenus">Help </span>buttons in the dialogs. </p>
  <h4 class="Head4"><a name="1_7_3_3_Configuration" />Configuration</h4>
  <p class="P61">The user interface definitions of all add-ons are stored in the special configuration branch <span class="T40">org.openoffice.Office.Addons</span> . </p>
  <p class="P61">The schema of the configuration branch <span class="wwwftpemail">org.openoffice.Office.Addons</span> specifies how to define a user interface extension.</p>
  <p class="Code">&lt;?xml version='1.0' encoding='UTF-8'?&gt;Â </p>
  <p class="Code">&lt;oor:component-schema oor:name="Addons" oor:package="org.openoffice.Office" xml:lang="en-US" xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;Â </p>
  <p class="Code">Â  Â  &lt;templates&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;group oor:name="MenuItem"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="URL" oor:type="xs:string"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Title" oor:type="xs:string" oor:localized="true"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="ImageIdentifier" oor:type="xs:string"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Target" oor:type="xs:string"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Context" oor:type="xs:string"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;set oor:name="Submenu" oor:node-type="MenuItem"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;group oor:name="PopupMenu"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Title" oor:type="xs:string" oor:localized="true"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Context" oor:type="xs:string"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;set oor:name="Submenu" oor:node-type="MenuItem"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;group oor:name="ToolBarItem"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="URL" oor:type="xs:string"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Title" oor:type="xs:string" oor:localized="true"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="ImageIdentifier" oor:type="xs:string"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Target" oor:type="xs:string"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Context" oor:type="xs:string"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;group oor:name="UserDefinedImages"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="ImageSmall" oor:type="xs:hexBinary"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="ImageBig" oor:type="xs:hexBinary"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="ImageSmallHC" oor:type="xs:hexBinary"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="ImageBigHC" oor:type="xs:hexBinary"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name=âImageSmallURLâ oor:type=âxs:stringâ/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name=âImageBigURLâ oor:type=âxs:stringâ/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name=âImageSmallHCURLâ oor:type=âxs:stringâ/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name=âImageBigHCURLâ oor:type=âxs:stringâ/&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;group oor:name="Images"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="URL" oor:type="xs:string"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;node-ref oor:name="UserDefinedImages" oor:node-type="UserDefinedImages"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;set oor:name="ToolBarItems" oor:node-type="ToolBarItem"/&gt;</p>
  <p class="Code">Â  Â  &lt;/templates&gt;</p>
  <p class="Code">Â  Â  &lt;component&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;group oor:name="AddonUI"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;set oor:name="AddonMenu" oor:node-type="MenuItem"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;set oor:name="Images" oor:node-type="Images"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;set oor:name="OfficeMenuBar" oor:node-type="PopupMenu"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;set oor:name="OfficeToolBar" oor:node-type="ToolBarItems"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;set oor:name="OfficeHelp" oor:node-type="MenuItem"/&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/group&gt;</p>
  <p class="Code">Â  Â  &lt;/component&gt;</p>
  <p class="Code">&lt;/oor:component-schema&gt;Â </p>
  <h5 class="Head5"><a name="1_7_3_3_1_Menus" />Menus</h5>
  <p class="Paragraph">As explained in the previous section, OpenOffice.org supports two menu locations where an add-on can be integrated: a top-level menu or the <span class="ButtonsMenus">Tools - Add-Ons</span> submenu. The configuration branch <span class="T40">org.openoffice.Office.Addons</span> provides two different nodes for these locations:</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle20"><colgroup><col width="189" /><col width="516" /></colgroup><tr><td colspan="2" style="text-align:left;width:4.147cm; " class="Tabelle20A1">
      <p class="TableHead">Supported sets of org.openoffice.Office.Addons to define an Add-On menuÂ </p>
     </td></tr><tr><td style="text-align:left;width:4.147cm; " class="Tabelle20A2">
     <p class="TableCode">OfficeMenuBarÂ </p>
    </td><td style="text-align:left;width:11.292cm; " class="Tabelle20B2">
     <p class="TextInTable">A menu defined in this set will be a top-level menu in the OpenOffice.org Menu Bar.Â </p>
    </td></tr><tr><td style="text-align:left;width:4.147cm; " class="Tabelle20A2">
     <p class="TableCode">AddonMenuÂ </p>
    </td><td style="text-align:left;width:11.292cm; " class="Tabelle20B2">
     <p class="TextInTable">A menu defined in this set will be a pop-up menu which is part of the <span class="ButtonsMenus">Add-Ons</span> menu item located on the bottom position of the <span class="T33">Tools</span> menu.</p>
    </td></tr></table></div>
  <p class="Head6">Submenu in <span class="ButtonsMenus">Tools - Add-Ons</span> </p>
  <p class="Paragraph">To integrate add-on menu items into the <span class="T43">Tools â Add-Ons</span> menu, use the <span class="Codeintext">AddonMenu</span> set. The <span class="Codeintext">AddonMenu</span> set consists of nodes of type <span class="Codeintext">MenuItem</span>. The <span class="Codeintext">MenuItem</span> node-type is also used for the submenus of a top-level add-on menu.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle28"><colgroup><col width="130" /><col width="576" /></colgroup><tr><td colspan="2" style="text-align:left;width:2.836cm; " class="Tabelle28A1">
      <p class="P23">Properties of template MenuItemÂ </p>
     </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle28A2">
     <p class="TableCode">oor:nameÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle28B2">
     <p class="TextInTable">string. The name of the configuration node. The name must begin with an ASCII letter character. Â It must be unique within the <span class="Codeintext">OfficeMenuBar</span> set. Therefore, it is mandatory to use a schema such as <span class="Codeintext">org.openoffice.&lt;developer&gt;.&lt;product&gt;.&lt;addon name&gt;</span> or <span class="Codeintext">com.&lt;company&gt;.&lt;product&gt;.&lt;addon name&gt;</span> to avoid name conflicts. Keep in mind that your configuration file will be merged into the OpenOffice.org configuration branch. You do not know which add-ons, or how many add-ons, are currently installed.<br />The node name of menu items of a submenu must be unique only within their submenu. A configuration set cannot guarantee the order of its entries, so you should use a schema such as string + number, for example âm1â, as the name is used to sort the entries. Â </p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle28A2">
     <p class="TableCode">URLÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle28B2">
     <p class="TextInTable">string. Specifies the command URL that should be dispatched when the user activates the menu entry. It will be ignored if the MenuItem is the title of a a submenu.<br />To define a separator you can use the special command URL "private:separator". A separator ignores all other properties.</p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle28A2">
     <p class="TableCode">TitleÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle28B2">
     <p class="TextInTable"><span class="T41">string</span>. Contains the title of a top-level menu item. Â This property supports localization: The default string, which is used when OpenOffice.org cannot find a string definition for its current language, uses the <span class="Codeintext">value</span> element without an attribute. You define a string for a certain language with the <span class="Codeintext">xml:lang </span>attribute. Assign the language/locale to the attribute, for example Â <span class="Codeintext">&lt;value xml:lang="en-US"&gt;string&lt;/value&gt;</span>.</p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle28A2">
     <p class="TableCode">ImageIdentifierÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle28B2">
     <p class="TextInTable"><span class="T41">string. Defines an optional image URL that could address an internal OpenOffice.org image or an external user-defined image. The syntax of an internal image URL is: </span><span class="T44">private:image/&lt;number&gt;</span> <span class="T41">where number specifies the image.</span> </p>
     <p class="TextInTable"><span class="T41">External user-defined images are supported using the placeholder variable %origin% representing the folder where the component will be installed by the </span><span class="T45">pkgchk</span> <span class="T41">tool. The </span><span class="T45">pkgchk</span> <span class="T41">tool will exchanges %origin% by another placeholder, which is substituted during runtime by OpenOffice.org to the real installation folder. Since OpenOffice.org supports two different configuration folders (</span> <span class="T44">user</span> <span class="T41">and </span><span class="T44">share</span> <span class="T41">) this mechanism is necessary to determine the installation folder of a component.</span> </p>
     <p class="TextInTable"><span class="T41">For example the URL </span><span class="T44">%origin%/image</span> <span class="T41">will be substituted to something like</span> </p>
     <p class="TextInTable"><span class="T46">vnd.sun.star.expand:$UNO_USER_PACKAGES_CACHE/uno_packages/component.zip.1051610942/image</span> . </p>
     <p class="TextInTable">The placeholder <span class="wwwftpemail">vnd.sun.star.expand:$UNO_USER_PACKAGES_CACHE</span> will then be substituted during runtime by the real path.</p>
     <p class="TextInTable">As the <span class="Codeintext">ImageIdentifier</span> property can only hold one URL but OpenOffice.org supports four different images (small/large image and both as high contrast), a naming schema is used to address them. OpenOffice.org adds <span class="wwwftpemail">_16.bmp</span> and <span class="wwwftpemail">_26.bmp</span> to the provided URL to address the small and large image. <span class="wwwftpemail">_16h.bmp</span> and <span class="wwwftpemail">_26h.bmp</span> is added to address the high contrast images. If the high contrast images are omitted the normal images are used instead.</p>
     <p class="TextInTable">OpenOffice.org supports bitmaps with 1, 4, 8, 16, 24 bit color depth. Magenta (color value red=0xffff, green=0x0000, blue=0xffff) is used as the transparent color, which means that the background color of the display is used instead of the image pixel color when the image is drawn.Â </p>
     <p class="TextInTable">For optimal results the size of small images should be 16x16 pixel and for big images 26x26 pixel. Other image sizes are scaled automatically by OpenOffice.org.<br />If no high contrast image is provided, OpenOffice.org uses the normal image for high contrast <span class="T37">environments.</span> Images that are not valid will be ignored.<br /> <span class="T41">This property has a higher priority than the </span><span class="T11">Images</span> <span class="T41">set when OpenOffice.org searches for images.</span> </p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle28A2">
     <p class="TableCode">TargetÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle28B2">
     <p class="TextInTable">string. Specifies the target frame for the command URL. Normally an add-on will use one of the predefined target names:Â </p>
     <p class="TextInTable">_top<br />Returns the top frame of the called frame, which is the first frame where <span class="Codeintext">isTop()</span> returns true when<span class="T37"> traversing </span>up the hierarchy.</p>
     <p class="TextInTable">_parent<br />Returns the next frame above in the frame hierarchy.</p>
     <p class="TextInTable">_self<br />Returns the frame itself, same as an empty target frame name. This means you are searching for a frame you already have, but it is legal to do so.</p>
     <p class="TextInTable">_blank<br />Creates a new top-level frame whose parent is the desktop frame.</p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle28A2">
     <p class="TableCode">ContextÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle28B2">
     <p class="TextInTable">string. A list of service names, separated by a comma, that specifies in which context the add-on menu function should be visible. An empty Context means that the function should visible in all contexts. <br />The OpenOffice.org application modules use the following services names:</p>
     <p class="P67">Writer:Â  Â  Â  Â   Â  Â  Â  Â  com.sun.star.text.TextDocument</p>
     <p class="P67">Spreadsheet:Â  Â  Â  Â  com.sun.star.sheet.SpreadsheetDocument</p>
     <p class="P67">Presentation:Â  Â  Â  Â  com.sun.star.presentation.PresentationDocument</p>
     <p class="P67">Draw:Â  Â  Â  Â   Â  Â  Â  Â  com.sun.star.drawing.DrawingDocument</p>
     <p class="P67">Formula:Â  Â  Â  Â  com.sun.star.formula.FormulaProperties</p>
     <p class="P67">Chart:Â  Â  Â  Â   Â  Â  Â  Â  com.sun.star.chart.ChartDocument</p>
     <p class="P67">Bibliography:Â  Â  Â  Â  com.sun.star.frame.Bibliography</p>
     <p class="TextInTable">The context service name for add-ons is determined by the service name of the model that is bound to the frame, which is associated with UI element (toolbar, menu bar, ...). Thus the service name of the Writer model is <span class="Codeintext">com.sun.star.text.TextDocument</span>. That means, the context name is bound to the model of an application module. If a developer implements a new desktop component that has a model, it is possible to use its service name as a context for add-on UI items.</p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle28A2">
     <p class="TableCode">SubmenuÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle28B2">
     <p class="TextInTable">A set of Â <span class="T47">MenuItem</span> entries. Optional to define a submenu for the menu entry.</p>
    </td></tr></table></div>
  <p class="Paragraph">The next examples shows a configuration file specifying a single menu item titled <span class="ButtonsMenus">Add-On Function 1</span>. The unique node name of the add-on is called <span class="wwwftpemail">org.openoffice.example.addon.example.function1</span>.</p>
  <p class="Code">&lt;?xml version='1.0' encoding='UTF-8'?&gt;Â </p>
  <p class="Code">&lt;oor:component-data xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" oor:name="Addons" oor:package="org.openoffice.Office"&gt;Â </p>
  <p class="Code">Â  Â  &lt;node oor:name="AddonUI"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;node oor:name="AddonMenu"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;node oor:name="org.openoffice.Office.addon.example.function1" oor:op="replace"&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â &lt;prop oor:name="URL" oor:type="xs:string"&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â &lt;value&gt;org.openoffice.Office.addon.example:Function1&lt;/value&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="ImageIdentifier" oor:type="xs:string"</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value/&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Title" oor:type="xs:string"&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â &lt;value/&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â &lt;value xml:lang="en-US"&gt;Add-On Function 1&lt;/value&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â &lt;/prop&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â &lt;prop oor:name="Target" oor:type="xs:string"&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â &lt;value&gt;_self&lt;/value&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â &lt;/prop&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â &lt;prop oor:name="Context" oor:type="xs:string"&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â &lt;value&gt;com.sun.star.text.TextDocument&lt;/value&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â &lt;/prop&gt;<br /> Â  Â  Â  Â  Â  Â &lt;/node&gt;<br /> Â  Â  Â  Â &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Head6">Top-level MenuÂ </p>
  <p class="Paragraph">If you want to integrate an add-on into the OpenOffice.org Menu Bar, you have to use the <span class="Codeintext">OfficeMenuBar</span> set. An <span class="Codeintext">OfficeMenuBar</span> set consists of nodes of type <span class="Codeintext">PopupMenu</span> <span class="T22">.</span> </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle30"><colgroup><col width="138" /><col width="616" /></colgroup><tr><td colspan="2" style="text-align:left;width:3.032cm; " class="Tabelle30A1">
      <p class="P23">Properties of template PopupMenuÂ </p>
     </td></tr><tr><td style="text-align:left;width:3.032cm; " class="Tabelle30A2">
     <p class="TableCode">oor:nameÂ </p>
    </td><td style="text-align:left;width:13.478cm; " class="Tabelle30B2">
     <p class="TextInTable">string. The name of the configuration node. The name must begin with an ASCII letter character. Â It must be unique within the <span class="Codeintext">OfficeMenuBar</span> set. Therefore, it is mandatory to use a schema such as <span class="Codeintext">org.openoffice.&lt;developer&gt;.&lt;product&gt;.&lt;addon name&gt;</span> or <span class="Codeintext">com.&lt;company&gt;.&lt;product&gt;.&lt;addon name&gt;</span> to avoid name conflicts. Please keep in mind that your configuration file will be merged into the OpenOffice.org configuration branch. You do not know what add-ons, or how many add-ons, are currently installed.</p>
    </td></tr><tr><td style="text-align:left;width:3.032cm; " class="Tabelle30A2">
     <p class="TableCode">TitleÂ </p>
    </td><td style="text-align:left;width:13.478cm; " class="Tabelle30B2">
     <p class="TextInTable"><span class="T41">string</span>. Contains the title of a top-level menu item. This property supports localization: The default string, which is used when OpenOffice.org cannot find a string definition for its current language, uses the <span class="Codeintext">value</span> element without an attribute. You define a string for a certain language with the <span class="Codeintext">xml:lang </span>attribute. Assign the language/locale to the attribute, for example Â <span class="Codeintext">&lt;value xml:lang="en-US"&gt;string&lt;/value&gt;</span>.</p>
    </td></tr><tr><td style="text-align:left;width:3.032cm; " class="Tabelle30A2">
     <p class="TableCode">ContextÂ </p>
    </td><td style="text-align:left;width:13.478cm; " class="Tabelle30B2">
     <p class="TextInTable">string. A list of service names, separated by a comma, that specifies in which context the add-on menu should be visible. An empty context means that the function should be visible in all contexts. <br />The OpenOffice.org application modules use the following services names:</p>
     <p class="P67">Writer:Â  Â  Â  Â   Â  Â  Â  Â  com.sun.star.text.TextDocument</p>
     <p class="P67">Spreadsheet:Â  Â  Â  Â  com.sun.star.sheet.SpreadsheetDocument</p>
     <p class="P67">Presentation:Â  Â  Â  Â  com.sun.star.presentation.PresentationDocument</p>
     <p class="P67">Draw:Â  Â  Â  Â   Â  Â  Â  Â  com.sun.star.drawing.DrawingDocument</p>
     <p class="P67">Formula:Â  Â  Â  Â  com.sun.star.formula.FormulaProperties</p>
     <p class="P67">Chart:Â  Â  Â  Â   Â  Â  Â  Â  com.sun.star.chart.ChartDocument</p>
     <p class="P67">Bibliography:Â  Â  Â  Â  com.sun.star.frame.Bibliography</p>
     <p class="TextInTable">The context service name for add-ons is determined by the service name of the model that is bound to the frame, which is associated with UI element (toolbar, menu bar, ...). Thus the service name of the Writer model is <span class="Codeintext">com.sun.star.text.TextDocument</span>. That means, the context name is bound to the model of an application module. If a developer implements a new desktop component that has a model it is possible to use its service name as a context for add-on UI items.</p>
    </td></tr><tr><td style="text-align:left;width:3.032cm; " class="Tabelle30A2">
     <p class="TableCode">SubmenuÂ </p>
    </td><td style="text-align:left;width:13.478cm; " class="Tabelle30B2">
     <p class="P68">A set of Â <span class="Codeintext">MenuItem</span> entries. Defines the submenu of the top-level menu. It must be defined on a top-level menu otherwise the whole menu will be ignored.<br />For more information how to define a submenu please refer to section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_7_3_2_Guidelines" title="see chapter 4.7.3 Writing UNO Components - Integrating Components into OpenOffice.org - User Interface Add-Ons - Guidelines">4.7.3 Writing UNO Components - Integrating Components into OpenOffice.org - User Interface Add-Ons - Guidelines</a></span> where the <span class="Codeintext">MenuItem</span> <span class="T23">template is described.</span> </p>
    </td></tr></table></div>
  <p class="Paragraph">The following example defines a top-level menu titled <span class="ButtonsMenus">Add-On example</span> with a single menu item titled <span class="ButtonsMenus">Add-On Function 1.</span> The menu item has a self-defined image used for displaying it next to the menu title.<br />In the example the nodes are called oor:name=<span class="Codeintext">"org.openoffice.example.addon"</span> and <span class="Codeintext">oor:name="m1"</span>.</p>
  <p class="Paragraph">Do not forget to specify the <span class="Codeintext">oor:op="replace"</span> attribute in your self-defined nodes. The replace operation must be used to add a new node to a set or extensible node. Thus the real meaning of the operation is "add or replace". Dynamic properties can only be added once and are then considered mandatory, so during layer merging the replace operation always means "add" for them.<br />For more details about the configuration and their file formats please read <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Config/Config.xhtml#1_Configuration_Management" title="see chapter 16 Configuration Management">16 Configuration Management</a>.</span> </p>
  <p class="Code">&lt;?xml version='1.0' encoding='UTF-8'?&gt;Â </p>
  <p class="Code">&lt;oor:component-data xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" oor:name="Addons" oor:package="org.openoffice.Office"&gt;Â </p>
  <p class="Code">Â  Â  &lt;node oor:name="AddonUI"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;node oor:name="OfficeMenuBar"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;node oor:name="org.openoffice.example.addon" oor:op="replace"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Title" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value xml:lang="en-US"&gt;Add-On example&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value xml:lang=âdeâ&gt;Add-On Beispiel&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Context" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value&gt;com.sun.star.text.TextDocument&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;node oor:name="Submenu"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;node oor:name="m1" oor:op="replace"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="URL" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value&gt;org.openoffice.Office.addon.example:Function1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Title" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value xml:lang=âen-USâ&gt;Add-On Function 1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value xml:lang="de"&gt;Add-On Funktion 1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Target" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value&gt;_self&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/oor:component-data&gt;Â </p>
  <h5 class="Head5"><a name="1_7_3_3_2_Toolbars" />Toolbars</h5>
  <p class="Paragraph">An add-on can also be integrated into the Function Bar of OpenOffice.org. The <span class="Emphasis">org.openoffice.Office.Addons</span> configuration branch has a set called <span class="Codeintext">OfficeToolBar</span> <span class="T23">where you can add toolbar items for an add-on. The toolbar structure uses an embedded set called </span><span class="T39">ToolbarItems</span> <span class="T23">, which is used by OpenOffice.org to group toolbar items from different add-ons. OpenOffice.org automatically inserts a separator between different add-ons toolbar items.</span> </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle31"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Tabelle31A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./4 Writing UNO Components_files/important.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Tabelle31B1">
      <p class="TipInTable"><span class="T23">The space of the Function Bar is limited, so only the most used/important functions should be added to the </span><span class="Codeintext">OfficeToolBar</span> <span class="T23">set. Otherwise OpenOffice.org will add scroll-up/down buttons at the end of the Function Bar and the user has to scroll the toolbar to have access to all toolbar buttons.</span> </p>
     </td></tr></table></div>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle32"><colgroup><col width="130" /><col width="576" /></colgroup><tr><td colspan="2" style="text-align:left;width:2.836cm; " class="Tabelle32A1">
      <p class="P23">Properties of template ToolBarItemsÂ </p>
     </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle32A2">
     <p class="TableCode">oor:nameÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle32B2">
     <p class="TextInTable">string. The name of the configuration node. The name must begin with an ASCII letter character. It must be unique within the <span class="Codeintext">OfficeMenuBar</span> set. Therefore it is mandatory to use a schema such as <span class="Codeintext">org.openoffice.&lt;developer&gt;.&lt;product&gt;.&lt;addon name&gt;</span> or <span class="Codeintext">com.&lt;company&gt;.&lt;product&gt;.&lt;addon name&gt;</span> to avoid name conflicts. Please keep in mind that your configuration file will be merged into the OpenOffice.org configuration branch. You do not know what add-ons, or how many add-ons, are currently installed.</p>
    </td></tr></table></div>
  <p class="Paragraph">The <span class="Codeintext">ToolBarItems</span> set is a container for the <span class="Codeintext">ToolBarItem</span> nodes.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle33"><colgroup><col width="130" /><col width="576" /></colgroup><tr><td colspan="2" style="text-align:left;width:2.836cm; " class="Tabelle33A1">
      <p class="P23">Properties of template ToolBarItemÂ </p>
     </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle33A2">
     <p class="TableCode">oor:nameÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle33B2">
     <p class="TextInTable">string. The name of the configuration node. It must be unique inside your own <span class="Codeintext">ToolBarItems</span> set. A configuration set cannot guarantee the order of its entries, therefore use a schema such as string + number, for example <span class="Codeintext">"m1",</span> as the name is used to sort the entries. Please be aware that the name must begin with an ASCII letter character.</p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle33A2">
     <p class="TableCode">URLÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle33B2">
     <p class="TextInTable">string. Specifies the command URL that should be dispatched when the user activates the menu entry. To define a separator you can use the special command URL <span class="Codeintext">"private:separator"</span>. A separator ignores all other properties.</p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle33A2">
     <p class="TableCode">TitleÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle33B2">
     <p class="TextInTable"><span class="T41">string</span>. Contains the title of a top-level menu item. This property supports localization: The default string, which is used when OpenOffice.org cannot find a string definition for its current language, uses the <span class="Codeintext">value</span> element without an attribute. You define a string for a certain language with the <span class="Codeintext">xml:lang </span>attribute. Assign the language/locale to the attribute, for example <span class="Codeintext">&lt;value xml:lang="en-US"&gt;string&lt;/value&gt;</span>.</p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle33A2">
     <p class="TableCode">ImageIdentifierÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle33B2">
     <p class="TextInTable"><span class="T41">string. Defines an optional image URL that could address an internal OpenOffice.org image or an external user-defined image. The syntax of an internal image URL is: </span><span class="T44">private:image/&lt;number&gt;</span> <span class="T41">where number specifies the image.</span> </p>
     <p class="TextInTable"><span class="T41">External user-defined images are supported using the placeholder variable %origin%, representing the folder where the component will be installed by the </span><span class="T45">pkgchk</span> <span class="T41">tool. The </span><span class="T45">pkgchk</span> <span class="T41">tool exchanges %origin% with another placeholder, which is substituted during runtime by OpenOffice.org to the real installation folder. Since OpenOffice.org supports two different configuration folders (</span> <span class="T44">user</span> <span class="T41">and </span><span class="T44">share</span> <span class="T41">) this mechanism is necessary to determine the installation folder of a component.</span> </p>
     <p class="TextInTable"><span class="T41">For example the URL </span><span class="T44">%origin%/image</span> <span class="T41">will be substituted with something like</span> </p>
     <p class="TextInTable"><span class="T46">vnd.sun.star.expand:$UNO_USER_PACKAGES_CACHE/uno_packages/component.zip.1051610942/image</span> . </p>
     <p class="TextInTable">The placeholder <span class="wwwftpemail">vnd.sun.star.expand:$UNO_USER_PACKAGES_CACHE</span> is then substituted during runtime with the real path.</p>
     <p class="TextInTable">Since the <span class="Codeintext">ImageIdentifier</span> property can only hold one URL but OpenOffice.org supports four different images (small/large image, and both as high contrast), a naming schema is used to address them. OpenOffice.org adds <span class="wwwftpemail">_16.bmp</span> and <span class="wwwftpemail">_26.bmp</span> to the provided URL to address the small and large image. <span class="wwwftpemail">_16h.bmp</span> and <span class="wwwftpemail">_26h.bmp</span> is added to address the high contrast images. If the high contrast images are omitted, the normal images are used instead.</p>
     <p class="TextInTable">OpenOffice.org supports bitmaps with 1, 4, 8, 16, 24 bit color depth. Magenta (color value red=0xffff, green=0x0000, blue=0xffff) is used as the transparent color, which means that the background color of the display is used instead of the image pixel color when the image is drawn.Â </p>
     <p class="TextInTable"><span class="T41">For optimal results, the size of small images should be 16x16 pixel, and for big images 26x26 pixel. Other image sizes are scaled automatically by OpenOffice.org.<br />If no high contrast image is provided, OpenOffice.org uses the normal image for high contrast </span><span class="T48">environments.</span> <span class="T41">Images that are not valid are ignored.<br />This property has a higher priority than the </span><span class="T11">Images</span> <span class="T41">set when OpenOffice.org searches for images.</span> </p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle33A2">
     <p class="TableCode">TargetÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle33B2">
     <p class="TextInTable">string. Specifies the target frame for the command URL. Normally an add-on will use one of the predefined target names:Â </p>
     <p class="TextInTable">_top<br />Returns the top frame of the called frame, which is the first frame where <span class="Codeintext">isTop()</span> returns true when<span class="T37"> traversing </span>up the hierarchy.</p>
     <p class="TextInTable">_parent<br />Returns the next frame above in the frame hierarchy.</p>
     <p class="TextInTable">_self<br />Returns the frame itself, same as an empty target frame name. This means you are searching for a frame you already have, but it is legal to do so.</p>
     <p class="TextInTable">_blank<br />Creates a new top-level frame whose parent is the desktop frame.</p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle33A2">
     <p class="TableCode">ContextÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle33B2">
     <p class="TextInTable">string. A list of service names, separated by a comma, that specifies in which context the add-on menu should be visible. An empty context means that the function should be visible in all contexts. <br />The OpenOffice.org application modules use the following services names:</p>
     <p class="P67">Writer:Â  Â  Â  Â   Â  Â  Â  Â  com.sun.star.text.TextDocument</p>
     <p class="P67">Spreadsheet:Â  Â  Â  Â  com.sun.star.sheet.SpreadsheetDocument</p>
     <p class="P67">Presentation:Â  Â  Â  Â  com.sun.star.presentation.PresentationDocument</p>
     <p class="P67">Draw:Â  Â  Â  Â   Â  Â  Â  Â  com.sun.star.drawing.DrawingDocument</p>
     <p class="P67">Formula:Â  Â  Â  Â  com.sun.star.formula.FormulaProperties</p>
     <p class="P67">Chart:Â  Â  Â  Â   Â  Â  Â  Â  com.sun.star.chart.ChartDocument</p>
     <p class="P67">Bibliography:Â  Â  Â  Â  com.sun.star.frame.Bibliography</p>
     <p class="TextInTable">The context service name for add-ons is determined by the service name of the model that is bound to the frame, which is associated with an UI element (toolbar, menu bar, ...). Thus the service name of the Writer model is <span class="Codeintext">com.sun.star.text.TextDocument</span>. That means, the context name is bound to the model of an application module. If you implement a new desktop component that has a model, it is possible to use its service name as a context for add-on UI items.</p>
    </td></tr></table></div>
  <p class="Paragraph">The following example defines one toolbar button for the function called <span class="T49">org.openoffice.Office.addon.example:Function1</span> <span class="T50">. </span><span class="T51">The toolbar button is only visible when using the OpenOffice.org Writer module.</span> </p>
  <p class="Code">&lt;?xml version='1.0' encoding='UTF-8'?&gt;Â </p>
  <p class="Code">&lt;oor:component-data xmlns:oor="http://openoffice.org/2001/registry" <span class="T37">xmlns</span>:xs="http://www.w3.org/2001/<span class="T37">XMLSchema</span>" <span class="T37">oor</span>:name="Addons" oor:package="<span class="T37">org.openoffice.Office</span>"&gt;</p>
  <p class="Code">Â  Â  &lt;node oor:name="AddonUI"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;node oor:name="OfficeToolBar"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;node oor:name="org.openoffice.Office.addon.example" oor:op="replace"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;node oor:name=âm1â&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="URL" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value&gt;org.openoffice.Office.addon.example:Function1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Title" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value xml:lang=âen-USâ&gt;Function 1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value xml:lang="de"&gt;Funktion 1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Target" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value&gt;_self&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Context" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value&gt;com.sun.star.text.TextDocument&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/oor:component-data&gt;Â </p>
  <h5 class="Head5"><a name="1_7_3_3_3_Images_for_Toolbars_and_Menus" />Images for Toolbars and Menus</h5>
  <p class="Paragraph">OpenOffice.org supports images in menus and toolboxes. In addition to the property ImageIdentifier, the add-ons configuration branch has a fourth set called <span class="Codeintext">Images</span> that let developers define and use their own images. The image data can be integrated into the configuration either as hex encoded binary data Â or as references to external bitmap files. The <span class="Codeintext">Images</span> set binds a <span class="Emphasis">command URL</span> to user defined images.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle34"><colgroup><col width="155" /><col width="599" /></colgroup><tr><td colspan="2" style="text-align:left;width:3.397cm; " class="Tabelle34A1">
      <p class="P23">Properties of template ImagesÂ </p>
     </td></tr><tr><td style="text-align:left;width:3.397cm; " class="Tabelle34A2">
     <p class="TableCode">oor:nameÂ </p>
    </td><td style="text-align:left;width:13.113cm; " class="Tabelle34B2">
     <p class="TextInTable">string. The name of the configuration node. It must be unique inside the configuration branch. Therefore it is mandatory to use a schema such as <span class="Codeintext">org.openoffice.&lt;developer&gt;.&lt;add-on name&gt;</span> or <span class="Codeintext">com.&lt;company&gt;.&lt;product&gt;.&lt;add-on name&gt;</span> to avoid name conflicts. Please keep in mind that your configuration file will be merged into the OpenOffice.org configuration branch. You do not know how many or which add-ons were installed before by the user.<br />Please be aware that the name must begin with an ASCII letter character.</p>
    </td></tr><tr><td style="text-align:left;width:3.397cm; " class="Tabelle34A2">
     <p class="TableCode">URLÂ </p>
    </td><td style="text-align:left;width:13.113cm; " class="Tabelle34B2">
     <p class="TextInTable">string. Specifies the command URL that should be bound to the defined images. OpenOffice.org searches for images with the command URL that a menu item/toolbox item contains.Â </p>
    </td></tr><tr><td style="text-align:left;width:3.397cm; " class="Tabelle34A2">
     <p class="TableCode">UserDefinedImagesÂ </p>
    </td><td style="text-align:left;width:13.113cm; " class="Tabelle34B2">
     <p class="TextInTable">Group of Â properties. This optional group provides self-defined images data to OpenOffice.org. There are two different groups of properties to define the image data. One property group provides the image data as ongoing hex values specifying an uncompressed bitmap format stream. The other property group uses URLs to external bitmap files. The names of these properties end with 'URL'. OpenOffice.org supports bitmap streams with 1, 4, 8, 16, 24 bit color depth. Magenta (color value red=0xffff, green=0x0000, blue=0xffff) is used as the transparent color, meaning that the background color of the display will be used instead of the image pixel color when the image is drawn.<br />For best quality, the size of small images should be 16x16 pixel, and for big images 26x26 pixel. Other image sizes will be scaled automatically by OpenOffice.org.<br />If no high contrast image data is provided, OpenOffice.org uses the normal image for high contrast <span class="T37">environments.</span> Image data that is not valid will be ignored.</p>
    </td></tr></table></div>
  <p class="Paragraph">An <span class="Codeintext">Images</span> node uses a second node called <span class="Codeintext">UserDefinedImages</span> where the user defined images data are stored.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle35"><colgroup><col width="138" /><col width="616" /></colgroup><tr><td colspan="2" style="text-align:left;width:3.032cm; " class="Tabelle35A1">
      <p class="P23">Properties of template UserDefinedImagesÂ </p>
     </td></tr><tr><td style="text-align:left;width:3.032cm; " class="Tabelle35A2">
     <p class="TableCode">ImageSmallÂ </p>
    </td><td style="text-align:left;width:13.478cm; " class="Tabelle35B2">
     <p class="TextInTable">HexBinary. Used for normal menu/toolbar items, standard size is 16x16 pixel.Â </p>
    </td></tr><tr><td style="text-align:left;width:3.032cm; " class="Tabelle35A2">
     <p class="TableCode">ImageBigÂ </p>
    </td><td style="text-align:left;width:13.478cm; " class="Tabelle35B2">
     <p class="TextInTable">HexBinary. Only toolbars can use big images. Standard size is 26x26 pixel. The user can activate large buttons with the <span class="T43">Tools â Options â View â Large Buttons</span> check box.</p>
    </td></tr><tr><td style="text-align:left;width:3.032cm; " class="Tabelle35A2">
     <p class="TableCode">ImageSmallHCÂ </p>
    </td><td style="text-align:left;width:13.478cm; " class="Tabelle35B2">
     <p class="TextInTable">HexBinary. Used for high contrast <span class="T37">environments</span>, which means that the background color of a menu or toolbar is below a certain threshold value for the brightness.</p>
    </td></tr><tr><td style="text-align:left;width:3.032cm; " class="Tabelle35A2">
     <p class="TableCode">ImageBigHCÂ </p>
    </td><td style="text-align:left;width:13.478cm; " class="Tabelle35B2">
     <p class="TextInTable">HexBinary. Only toolbars can use big images. Used for high contrast <span class="T37">environments</span>, which means that the background color of a toolbar is below a certain threshold value for the brightness.</p>
    </td></tr><tr><td style="text-align:left;width:3.032cm; " class="Tabelle35A2">
     <p class="TableCode">ImageSmallURLÂ </p>
    </td><td style="text-align:left;width:13.478cm; " class="Tabelle35B2">
     <p class="TextInTable">string. An URL to an external image which is used for menu items and normal toolbar buttons. <span class="T41">External user-defined images are supported using the placeholder variable %origin%, representing the folder where the component will be installed by the </span><span class="T45">pkgchk</span> <span class="T41">tool. The </span><span class="T45">pkgchk</span> <span class="T41">tool exchanges %origin% with another placeholder, which is substituted during runtime by OpenOffice.org to the real installation folder. Since OpenOffice.org supports two different configuration folders (</span> <span class="T44">user</span> <span class="T41">and </span><span class="T44">share</span> <span class="T41">) this mechanism is necessary to determine the installation folder of a component.</span> </p>
     <p class="TextInTable"><span class="T41">For example the URL </span><span class="T44">%origin%/image</span> <span class="T41">will be substituted with something like</span> </p>
     <p class="TextInTable"><span class="T46">vnd.sun.star.expand:$UNO_USER_PACKAGES_CACHE/uno_packages/component.zip.1051610942/image</span> . </p>
     <p class="TextInTable">The placeholder <span class="wwwftpemail">vnd.sun.star.expand:$UNO_USER_PACKAGES_CACHE</span> is then substituted during runtime with the real path.</p>
    </td></tr><tr><td style="text-align:left;width:3.032cm; " class="Tabelle35A2">
     <p class="TableCode">ImageBigURLÂ </p>
    </td><td style="text-align:left;width:13.478cm; " class="Tabelle35B2">
     <p class="TextInTable">string. An URL to an external image which is used for big toolbar buttons.Â </p>
    </td></tr><tr><td style="text-align:left;width:3.032cm; " class="Tabelle35A2">
     <p class="TableCode">ImageSmallHCURLÂ </p>
    </td><td style="text-align:left;width:13.478cm; " class="Tabelle35B2">
     <p class="TextInTable">string. An URL to an external image which is used for menu items and normal toolbar button in a high contrast environment.Â </p>
    </td></tr><tr><td style="text-align:left;width:3.032cm; " class="Tabelle35A2">
     <p class="TableCode">ImageBigHCURLÂ </p>
    </td><td style="text-align:left;width:13.478cm; " class="Tabelle35B2">
     <p class="TextInTable">string. An URL to an external image which is used for big toolbar buttons in a high contrast environment.Â </p>
    </td></tr></table></div>
  <p class="Paragraph">The embedded image data have a higher priority when used in conjunction with the URL properties. The embedded and URL properties can be mixed without a problem.Â </p>
  <p class="Paragraph">The next example creates two user-defined images for the function <span class="Codeintext">org.openoffice.Office.addon.example:Function1</span> <span class="T51">. The normal image is defined using the embedded image data property </span><span class="T52">ImageSmall </span><span class="T51">and has a size of 16x16 pixel and a 4-bit color depth. The other one uses the URL property </span><span class="T52">ImageSmallHCURL</span> <span class="T51">to reference an external bitmap file for the high contrast image.</span> </p>
  <p class="Code">&lt;?xml version='1.0' encoding='UTF-8'?&gt;Â </p>
  <p class="Code">&lt;oor:component-data xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" oor:name="Addons" oor:package="org.openoffice.Office"&gt;Â </p>
  <p class="Code">Â  Â  &lt;node oor:name="AddonUI"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;node oor:name="Images"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;node oor:name="com.sun.star.comp.framework.addon.image1" oor:op="replace"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="URL" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value&gt;org.openoffice.Office.addon.example:Function1&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;node oor:name=âUserDefinedImagesâ&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name=âImageSmallâ&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value&gt;424df80000000000000076000000280000001000000010000000010004000000000000000000120b0000120b000000000000000000000000ff0000ffff0000ff0000ffff0000ff000000ff00ff00ffffff00c0c0c0008080800000000000000080000080800000800000808000008000000080008000cccccccccccccccc2c266b181b666c2c5cc66b818b6665c555566b181b66655555566b818b66655555566b181b6665555a8666bbb6668a55a0a866666668a0a5000a8666668a000a6000a86668a000a556000a868a000a55556000a8a000a5555556000a000a55555555600000a55555555556000a55555555555560a55555550000&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name=âImageSmallHCURLâ&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value&gt;%origin%/function1.bmp&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/oor:component-data&gt;Â </p>
  <h5 class="Head5"><a name="1_7_3_3_4_Help_Integration" />Help Integration</h5>
  <p class="Paragraph">OpenOffice.org supports the integration of add-ons into its <span class="ButtonsMenus">Help</span> menu. The add-on help menu items are inserted below the <span class="T43">Registration</span> <span class="T1">menu item, guarded by separators. This </span><span class="T53">guarantees</span> <span class="T1">that users have quick access to the add-on help. </span>Â <br />The <span class="Emphasis">OfficeHelp</span> set uses the same <span class="Emphasis">MenuItem</span> node-type as the <span class="Emphasis">AddonMenu</span> set, but there are some special treatments of the properties.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle36"><colgroup><col width="130" /><col width="576" /></colgroup><tr><td colspan="2" style="text-align:left;width:2.836cm; " class="Tabelle36A1">
      <p class="P23">Properties of template <span class="T22">MenuItem</span> </p>
     </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle36A2">
     <p class="TableCode">oor:nameÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle36B2">
     <p class="TextInTable">string. The name of the configuration node. It must be unique inside the configuration branch. Therefore it is mandatory to use a schema such as <span class="Codeintext">org.openoffice.&lt;developer&gt;.&lt;add-on name&gt;</span> or <span class="Codeintext">com.&lt;company&gt;.&lt;product&gt;.&lt;add-on name&gt;</span> to avoid name conflicts. Please keep in mind that your configuration file will be merged into the OpenOffice.org configuration branch. You do not know how many or which add-ons were installed before by the user.<br />Please be aware that the name must begin with an ASCII letter character.</p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle36A2">
     <p class="TableCode">URLÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle36B2">
     <p class="TextInTable">string. Specifies the help command URL that should be dispatched when the user activates the menu entry.<br />Separators defined by the special command URL <span class="Codeintext">"private:separator"</span> are supported, but should not be used in the help menu, because every add-on should only use one menu item.</p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle36A2">
     <p class="TableCode">TitleÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle36B2">
     <p class="TextInTable"><span class="T41">string</span>. Contains the title of a top-level menu item. This property supports localization: The default string, which is used when OpenOffice.org cannot find a string definition for its current language, uses the <span class="Codeintext">value</span> element without an attribute. You define a string for a certain language with the <span class="Codeintext">xml:lang </span>attribute. Assign the language/locale to the attribute, for example Â <span class="Codeintext">&lt;value xml:lang="en-US"&gt;string&lt;/value&gt;</span>.</p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle36A2">
     <p class="TableCode">ImageIdentifierÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle36B2">
     <p class="TextInTable"><span class="T41">string. Defines an optional image URL that could address an internal OpenOffice.org image or an external user-defined image. The syntax of an internal image URL is: </span><span class="T44">private:image/&lt;number&gt;</span> <span class="T41">where </span><span class="T45">number</span> <span class="T41">specifies the image.</span> </p>
     <p class="TextInTable"><span class="T41">External user-defined images are supported using the placeholder variable %origin%, representing the folder where the component will be installed by the </span><span class="T45">pkgchk</span> <span class="T41">tool. The </span><span class="T45">pkgchk</span> <span class="T41">tool exchanges %origin% with another placeholder, which is substituted during runtime by OpenOffice.org to the real installation folder. Since OpenOffice.org supports two different configuration folders (</span> <span class="T44">user</span> <span class="T41">and </span><span class="T44">share</span> <span class="T41">), this mechanism is necessary to determine the installation folder of a component.</span> </p>
     <p class="TextInTable"><span class="T41">For example the URL </span><span class="T44">%origin%/image</span> <span class="T41">is substituted with something like</span> </p>
     <p class="TextInTable"><span class="T46">vnd.sun.star.expand:$UNO_USER_PACKAGES_CACHE/uno_packages/component.zip.1051610942/image</span> . </p>
     <p class="TextInTable">The placeholder <span class="wwwftpemail">vnd.sun.star.expand:$UNO_USER_PACKAGES_CACHE</span> is then substituted during runtime by the real path.</p>
     <p class="TextInTable">Since the <span class="Codeintext">ImageIdentifier</span> property can only hold one URL but OpenOffice.org supports four different images (small/large image and both as high contrast), a naming schema is used to address them. OpenOffice.org adds <span class="wwwftpemail">_16.bmp</span> and <span class="wwwftpemail">_26.bmp</span> to the provided URL to address the small and large image. <span class="wwwftpemail">_16h.bmp</span> and <span class="wwwftpemail">_26h.bmp</span> is added to address the high contrast images. If the high contrast images are omitted, the normal images are used instead.</p>
     <p class="TextInTable">OpenOffice.org supports bitmaps with 1, 4, 8, 16, 24 bit color depth. Magenta (color value red=0xffff, green=0x0000, blue=0xffff) is used as the transparent color, which means that the background color of the display is used instead of the image pixel color when the image is drawn.Â </p>
     <p class="TextInTable"><span class="T41">For optimal results the size of small images should be 16x16 pixel and for big images 26x26 pixel. Other image sizes will be scaled automatically by OpenOffice.org.<br />If no high contrast image is provided, OpenOffice.org uses the normal image for high contrast </span><span class="T48">environments.</span> <span class="T41">Images that are not valid are ignored.<br />This property has a higher priority than the </span><span class="T11">Images</span> <span class="T41">set when OpenOffice.org searches for images.</span> </p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle36A2">
     <p class="TableCode">TargetÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle36B2">
     <p class="TextInTable">string. Specifies the target frame for the command URL. Normally an add-on will use one of the predefined target names:Â </p>
     <p class="TextInTable">_top<br />Returns the top frame of the called frame, which is the first frame where <span class="Codeintext">isTop()</span> returns true when<span class="T37"> traversing up</span> the hierarchy.</p>
     <p class="TextInTable">_parent<br />Returns the next frame above in the frame hierarchy.</p>
     <p class="TextInTable">_self<br />Returns the frame itself, same as an empty target frame name. This means you are searching for a frame you already have, but it is legal to do so.</p>
     <p class="TextInTable">_blank<br />Creates a new top-level frame whose parent is the desktop frame.</p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle36A2">
     <p class="TableCode">ContextÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle36B2">
     <p class="TextInTable">string. A list of service names, separated by a comma, that specifies in which context the add-on menu should be visible. An empty context means that the function is visible in all contexts. <br />The OpenOffice.org application modules use the following services names:</p>
     <p class="P67">Writer:Â  Â  Â  Â   Â  Â  Â  Â  com.sun.star.text.TextDocument</p>
     <p class="P67">Spreadsheet:Â  Â  Â  Â  com.sun.star.sheet.SpreadsheetDocument</p>
     <p class="P67">Presentation:Â  Â  Â  Â  com.sun.star.presentation.PresentationDocument</p>
     <p class="P67">Draw:Â  Â  Â  Â   Â  Â  Â  Â  com.sun.star.drawing.DrawingDocument</p>
     <p class="P67">Formula:Â  Â  Â  Â  com.sun.star.formula.FormulaProperties</p>
     <p class="P67">Chart:Â  Â  Â  Â   Â  Â  Â  Â  com.sun.star.chart.ChartDocument</p>
     <p class="P67">Bibliography:Â  Â  Â  Â  com.sun.star.frame.Bibliography</p>
     <p class="TextInTable">The context service name for add-ons is determined by the service name of the model that is bound to the frame, which is associated with an UI element (toolbar, menu bar, ...). Thus the service name of the Writer model is <span class="Codeintext">com.sun.star.text.TextDocument</span>. That means, the context name is bound to the model of an application module. If a developer implements a new desktop component that has a model, it is possible to use its service name as a context for add-on UI items.</p>
    </td></tr><tr><td style="text-align:left;width:2.836cm; " class="Tabelle36A2">
     <p class="TableCode">SubmenuÂ </p>
    </td><td style="text-align:left;width:12.603cm; " class="Tabelle36B2">
     <p class="TextInTable">A set of Â <span class="Codeintext">MenuItem</span> entries. Not used for <span class="Codeintext">OfficeHelp</span> <span class="Codeintext">MenuItems</span> <span class="Emphasis">, </span>any definition inside will be ignored.</p>
    </td></tr></table></div>
  <p class="Paragraph">The following example shows the single help menu item for the add-on example. Â </p>
  <p class="Code">&lt;?xml version='1.0' encoding='UTF-8'?&gt;Â </p>
  <p class="Code">&lt;oor:component-data xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" oor:name="Addons" oor:package="org.openoffice.Office"&gt;Â </p>
  <p class="Code">Â  Â  &lt;node oor:name="AddonUI"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;node oor:name="OfficeHelp"&gt;<br /> Â  Â  Â  Â  Â  Â &lt;node oor:name="com.sun.star.comp.framework.addon" oor:op="replace"&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â &lt;prop oor:name="URL" oor:type="xs:string"</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value&gt;org.openoffice.Office.addon.example:Help&lt;/value&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â &lt;/prop&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â &lt;prop oor:name="ImageIdentifier" oor:type="xs:string"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value/&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â &lt;prop oor:name="Title" oor:type="xs:string"&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â &lt;value xml:lang="de"&gt;Ãber Add-On Beispiel&lt;/value&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â &lt;value xml:lang="en-US"&gt;About Add-On Example&lt;/value&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â &lt;/prop&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â &lt;prop oor:name="Target" oor:type="xs:string"&gt;<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â &lt;value&gt;_self&lt;/value&gt;<br /> Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;<br /> Â  Â  Â  Â  Â  Â &lt;/node&gt;<br /> Â  Â  Â  Â &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/oor:component-data&gt;Â </p>
  <h4 class="Head4"><a name="1_7_3_4_Installation" />Installation</h4>
  <p class="Paragraph">After finishing the implementation of the UNO component and the definition of the user interface part you can create Â an extension. An extension can be used by an end-user to install the add-on into OpenOffice.org.</p>
  <p class="P69">The configuration files that were created for the add-on, such as protocol handler, jobs, and user interface definition must be added to the root of the zip file. The structure of a zip file supporting Windows should resemble the following code: Â </p>
  <p class="P57">example_addon.oxt:Â </p>
  <p class="P57">Â  Â  META_INF/</p>
  <p class="P57">Â  Â  Â  Â  manifest.xml</p>
  <p class="P57">Â  Â  Addons.xcu</p>
  <p class="P57">Â  Â  ProtocolHandler.xcu</p>
  <p class="P57">Â  Â  windows.plt/</p>
  <p class="P57">Â  Â  Â  Â  example_addon.dll</p>
  <p class="Paragraph">Before you install the <span class="wwwftpemail">extension, make </span><span class="wwwftpemail"><span class="Emphasis">absolutely</span></span><span class="wwwftpemail"> sure there are no running instances of OpenOffice.org. The </span><span class="wwwftpemail"><span class="wwwftpemail">unopkg</span></span><span class="wwwftpemail"> </span>tool recognizes a running OpenOffice.org in a local installation, but not in a networked installation. Installing into a running office installation might cause inconsistencies and destroy your installation!</p>
  <p class="Paragraph">The extension installation for the example add-on is as simple as changing to the <span class="wwwftpemail">&lt;OfficePath&gt;/program</span> directory with a command-line shell and running</p>
  <p class="Output">[&lt;OfficePath&gt;/program] $ unopkg add /foo/bar/example_addon.zipÂ </p>
  <p class="Paragraph">For an explanation of <span class="ChapterRef">other deployment options, please refer to </span><span class="ChapterRef"><span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_9_Deployment_Options_for_Components" title="see chapter 4.9 Writing UNO Components - Deployment Options for Components">4.9 Writing UNO Components - Deployment Options for Components</a> </span></span><span class="ChapterRef">and for an explanation about extensions refer to <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#1_Extensions" title="see chapter 5 Extensions">5 Extensions</a></span>.</p>
  <h3 class="P60"><a name="1_7_4_Disable_Commands" />4.7.4Â Â Disable Commands</h3>
  <p class="Paragraph">In OpenOffice.org, there may be situations where functions should be disabled to prevent users from changing or destroying documents inadvertently. OpenOffice.org maintains a list of disabled commands that can be maintained by users and developers through the configuration API.Â </p>
  <p class="Paragraph">A command request can be created by any object, but in most cases, user interface objects create these requests. Consider, for instance, a toolbox where different functions acting on the office component are presented as buttons. Once a button is clicked, the desired functionality should be executed. If the code assigned to the button is provided with a suitable command URL, the dispatch framework can handle the user action by creating the request and finding a component that can handle it.Â </p>
  <p class="Paragraph"><span class="T23">The dispatch framework works with </span>the design pattern <span class="Emphasis">chain of responsibility</span>: everything a component needs to know if it wants to execute a request is the last link in a chain of objects capable of executing requests. If this object gets the request, it checks<span class="T37"> whether </span>it can handle it or otherwise passes it to the next chain member until the request is executed or the end of the chain is reached.<br />The disable commands implementation is the first chain member and can therefore work as a wall for all disabled commands. They are not be sent to the next chain member, and disappear.</p>
  <p class="Paragraph"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#ref0" /> shows how the disable commands feature affects the normal command application flow.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table35"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table35A1">
      <div class="Paragraph"><div style="width: 12.751cm; " id="Frame3" class="fr13">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/DisableCommands_ApplicationFlow.png" title="link to the full-sized graphic &quot;./DisableCommands_ApplicationFlow.png&quot;"><img border="0" width="490" height="851" alt="Overview graphic showing how disabling commands works" src="./4 Writing UNO Components_files/DisableCommands_ApplicationFlow.png" class="fr4" /></a>Illustration <a name="refIllustration9">10</a>: How the disable commands feature works</div>
       </div> </div>
     </td></tr></table></div>
  <p class="Paragraph">Â </p>
  <p class="Paragraph">Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle37"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Tabelle37A1">
      <div class="TableContents"><img width="39" height="39" alt="Pay attention to the following important text section" src="./4 Writing UNO Components_files/important.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Tabelle37B1">
      <p class="TipInTable">Since the disable commands implementation is the first part in the dispatch chain, there is no way to circumvent it. The disabled command must be removed from the list, otherwise it remains disabled.Â </p>
     </td></tr></table></div>
  <h4 class="Head4"><a name="1_7_4_1_Configuration" />Configuration</h4>
  <p class="Paragraph">The disable commands feature uses the configuration branch <span class="wwwftpemail">org.openoffice.Office.Commands</span> to read which commands should be disabled. The following schema applies:</p>
  <p class="P6">&lt;?xml version='1.0' encoding='UTF-8'?&gt;Â </p>
  <p class="P9">&lt;oor:component-schema oor:name="Commands" oor:package="org.openoffice.Office" xml:lang="en-US" xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;Â </p>
  <p class="P9">Â  Â  &lt;templates&gt;</p>
  <p class="P9">Â  Â  Â  Â  &lt;group oor:name="CommandType"&gt;</p>
  <p class="P9">Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Command" oor:type="xs:string"/&gt;</p>
  <p class="P9">Â  Â  Â  Â  &lt;/group&gt;</p>
  <p class="P9">Â  Â  &lt;/templates&gt;</p>
  <p class="P9">Â  Â  &lt;component&gt;</p>
  <p class="P9">Â  Â  Â  Â  &lt;group oor:name="Execute"&gt;</p>
  <p class="P9">Â  Â  Â  Â  Â  Â  &lt;set oor:name="Disabled" oor:node-type="CommandType"/&gt;</p>
  <p class="P9">Â  Â  Â  Â  &lt;/group&gt;</p>
  <p class="P9">Â  Â  &lt;/component&gt;</p>
  <p class="P9">&lt;/oor:component-schema&gt;Â </p>
  <p class="Paragraph">The configuration schema for disabled commands is very simple. The <span class="wwwftpemail">org.openoffice.Office.Commands</span> branch has a group called <span class="Codeintext">Execute</span>. This group has only one set called <span class="Codeintext">Disabled</span>. The <span class="Codeintext">Disabled</span> set supports nodes of the type <span class="Codeintext">CommandType</span>. The following table describes the supported properties of <span class="Codeintext">CommandType</span>.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle38"><colgroup><col width="125" /><col width="629" /></colgroup><tr><td colspan="2" style="text-align:left;width:2.731cm; " class="Tabelle38A1">
      <p class="TableHead">Properties of the <span class="Codeintext">CommandType</span> Â group</p>
     </td></tr><tr><td style="text-align:left;width:2.731cm; " class="Tabelle38A2">
     <p class="TableCode">oor:component-dataÂ </p>
    </td><td style="text-align:left;width:13.78cm; " class="Tabelle38B2">
     <p class="TextInTable">string. It must be unique inside the <span class="Codeintext">Disabled</span> set, but has no additional meaning for the implementation of the disable commands feature. Use a consecutive numbering scheme; even numbers are allowed.</p>
    </td></tr><tr><td style="text-align:left;width:2.731cm; " class="Tabelle38A2">
     <p class="TableCode">CommandÂ </p>
    </td><td style="text-align:left;width:13.78cm; " class="Tabelle38B2">
     <p class="TextInTable">string. This is the command name with the preceding protocol. That means the command URL <span class="wwwftpemail">.uno:Open</span> (which shows the <span class="ButtonsMenus">File â Open</span> dialog) must be written as <span class="Codeintext">Open</span>.<br />The valid commands can be found in the document <span class="wwwftpemail">Index of Command Names </span>in the <a href="http://replay.waybackmachine.org/20090427181406/http://framework.openoffice.org/servlets/ProjectDocumentList">Documentation section of the framework project</a> on the OpenOffice.org web page. The OpenOffice.org SDK also includes the latest <a href="http://replay.waybackmachine.org/20090427181406/http://www.openoffice.org/files/documents/25/60/commands_11beta.html">list of command names</a>.</p>
    </td></tr></table></div>
  <p class="Paragraph">The example below shows a configuration file that disables the commands for <span class="ButtonsMenus">File â Open</span>, <span class="ButtonsMenus">Edit â Select All</span>, <span class="ButtonsMenus">Help â About OpenOffice.org</span> and <span class="ButtonsMenus">File â Exit</span>.</p>
  <p class="Code">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;Â </p>
  <p class="Code">&lt;oor:component-data oor:name="Commands" oor:package="org.openoffice.Office" xmlns:oor="http://openoffice.org/2001/registry" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;Â </p>
  <p class="Code">Â  Â  &lt;node oor:name="Execute"&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;node oor:name="Disabled"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;node oor:name="m1" oor:op="replace"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Command"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value&gt;Open&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;node oor:name="m2" oor:op="replace"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Command"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value&gt;SelectAll&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;node oor:name="m3" oor:op="replace"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Command"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value&gt;About&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;node oor:name="m4" oor:op="replace"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;prop oor:name="Command"&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  &lt;value&gt;Quit&lt;/value&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  &lt;/prop&gt;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  Â  Â  &lt;/node&gt;</p>
  <p class="Code">Â  Â  &lt;/node&gt;</p>
  <p class="Code">&lt;/oor:component-data&gt;Â </p>
  <h4 class="Head4"><a name="1_7_4_2_Disabling_Commands_at_Runtime" />Disabling Commands at Runtime</h4>
  <p class="Paragraph">The following code example first removes all commands that were defined in the user layer of the configuration branch <span class="Codeintext">org.openoffice.Office.Commands</span> as having a defined starting point. Then it checks if it can get dispatch objects for some pre-defined commands.<br />Then the example disables these commands and tries to get dispatch objects for them again. At the end, the code removes the disabled commands again, otherwise OpenOffice.org would not be fully useable any longer.</p>
  <p class="Code">import com.sun.star.bridge.XUnoUrlResolver;Â </p>
  <p class="Code">import com.sun.star.uno.UnoRuntime;Â </p>
  <p class="Code">import com.sun.star.uno.XComponentContext;Â </p>
  <p class="Code">import com.sun.star.lang.XMultiComponentFactory;Â </p>
  <p class="Code">import com.sun.star.beans.XPropertySet;Â </p>
  <p class="Code">import com.sun.star.beans.PropertyValue;Â </p>
  <p class="Code">import com.sun.star.lang.XMultiServiceFactory;Â </p>
  <p class="Code">import com.sun.star.lang.XSingleServiceFactory;Â </p>
  <p class="Code">import com.sun.star.util.XURLTransformer;Â </p>
  <p class="Code">import com.sun.star.frame.XDesktop;Â </p>
  <p class="Code">Â </p>
  <p class="Code">import com.sun.star.beans.UnknownPropertyException;Â </p>
  <p class="Code">Â </p>
  <p class="Code">/*Â </p>
  <p class="Code">Â * Provides example code how to enable/disable</p>
  <p class="Code">Â * commands.</p>
  <p class="Code">Â */</p>
  <p class="Code">public class DisableCommandsTest extends java.lang.Object {Â </p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  /*</p>
  <p class="Code">Â  Â  Â * A list of command names</p>
  <p class="Code">Â  Â  Â */</p>
  <p class="Code">Â  Â  final static private String[] aCommandURLTestSet =</p>
  <p class="Code">Â  Â  {</p>
  <p class="Code">Â  Â  Â  Â  new String( "Open" ),</p>
  <p class="Code">Â  Â  Â  Â  new String( "About" ),</p>
  <p class="Code">Â  Â  Â  Â  new String( "SelectAll" ),</p>
  <p class="Code">Â  Â  Â  Â  new String( "Quit" ),</p>
  <p class="Code">Â  Â  };</p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  private static XComponentContext xRemoteContext = null;</p>
  <p class="Code">Â  Â  private static XMultiComponentFactory xRemoteServiceManager = null;</p>
  <p class="Code">Â  Â  private static XURLTransformer xTransformer = null;</p>
  <p class="Code">Â  Â  private static XMultiServiceFactory xConfigProvider = null;</p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  /*</p>
  <p class="Code">Â  Â  Â * @param args the command line arguments</p>
  <p class="Code">Â  Â  Â */</p>
  <p class="Code">Â  Â  public static void main(String[] args) {</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // connect</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XComponentContext xLocalContext =</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.comp.helper.Bootstrap.createInitialComponentContext(null);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XMultiComponentFactory xLocalServiceManager = xLocalContext.getServiceManager();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object urlResolver Â = xLocalServiceManager.createInstanceWithContext(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.bridge.UnoUrlResolver", xLocalContext);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XUnoUrlResolver xUnoUrlResolver = (XUnoUrlResolver) UnoRuntime.queryInterface( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XUnoUrlResolver.class, urlResolver );</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object initialObject = xUnoUrlResolver.resolve( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  "uno:socket,host=localhost,port=2083;urp;StarOffice.ServiceManager");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  XPropertySet xPropertySet = (XPropertySet)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet.class, initialObject);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object context = xPropertySet.getPropertyValue("DefaultContext");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xRemoteContext = (XComponentContext)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XComponentContext.class, context);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xRemoteServiceManager = xRemoteContext.getServiceManager();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object transformer = xRemoteServiceManager.createInstanceWithContext(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.util.URLTransformer", xRemoteContext);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xTransformer = (com.sun.star.util.XURLTransformer)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.util.XURLTransformer.class, transformer);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object configProvider = xRemoteServiceManager.createInstanceWithContext(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.configuration.ConfigurationProvider", xRemoteContext);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xConfigProvider = (com.sun.star.lang.XMultiServiceFactory)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.lang.XMultiServiceFactory.class, configProvider);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // First we need a defined starting point. So we have to remove</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // all commands from the disabled set!</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  enableCommands();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // Check if the commands are usable</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  testCommands(false);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // Disable the commands</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  disableCommands();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // Now the commands should not be usable anymore</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  testCommands(true);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // Remove disable commands to make Office usable again</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  enableCommands();</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  catch (java.lang.Exception e){</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  e.printStackTrace();</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  finally {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  System.exit(0);</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  /**</p>
  <p class="Code">Â  Â  Â * Test the commands that we enabled/disabled</p>
  <p class="Code">Â  Â  Â */</p>
  <p class="Code">Â  Â  private static void testCommands(boolean bDisabledCmds) throws com.sun.star.uno.Exception {</p>
  <p class="Code">Â  Â  Â  Â  // We need the desktop to get access to the current frame</p>
  <p class="Code">Â  Â  Â  Â  Object desktop = xRemoteServiceManager.createInstanceWithContext(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.frame.Desktop", xRemoteContext );</p>
  <p class="Code">Â  Â  Â  Â  com.sun.star.frame.XDesktop xDesktop = (com.sun.star.frame.XDesktop)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.frame.XDesktop.class, desktop);</p>
  <p class="Code">Â  Â  Â  Â  com.sun.star.frame.XFrame xFrame = xDesktop.getCurrentFrame();</p>
  <p class="Code">Â  Â  Â  Â  com.sun.star.frame.XDispatchProvider xDispatchProvider = null;</p>
  <p class="Code">Â  Â  Â  Â  if (xFrame != null) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // We have a frame. Now we need access to the dispatch provider.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xDispatchProvider = (com.sun.star.frame.XDispatchProvider)UnoRuntime.queryInterface( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.frame.XDispatchProvider.class, xFrame );</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (xDispatchProvider != null) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // As we have the dispatch provider we can now check if we get a dispatch</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // object or not.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  for (int n = 0; n &lt; aCommandURLTestSet.length; n++) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Prepare the URL</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.util.URL[] aURL Â = new com.sun.star.util.URL[1];</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  aURL[0] = new com.sun.star.util.URL();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.frame.XDispatch xDispatch = null;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  aURL[0].Complete = ".uno:" + aCommandURLTestSet[n];</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  xTransformer.parseSmart(aURL, ".uno:");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Try to get a dispatch object for our URL</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  xDispatch = xDispatchProvider.queryDispatch(aURL[0], "", 0);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (xDispatch != null) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (bDisabledCmds)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  System.out.println("Something is wrong, I got dispatch object for " </p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â  + aURL[0].Complete);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  else</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  System.out.println("Ok, dispatch object for " + aURL[0].Complete);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  else {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (!bDisabledCmds)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  System.out.println("Something is wrong, I cannot get dispatch object for " </p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â  + aURL[0].Complete);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  else</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  System.out.println("Ok, no dispatch object for " + aURL[0].Complete);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  resetURL(aURL[0]);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  else</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  System.out.println("Couldn't get XDispatchProvider from Frame!");</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  else</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  System.out.println("Couldn't get current Frame from Desktop!");</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  /**</p>
  <p class="Code">Â  Â  Â * Ensure that there are no disabled commands in the user layer. The</p>
  <p class="Code">Â  Â  Â * implementation removes all commands from the disabled set!</p>
  <p class="Code">Â  Â  Â */</p>
  <p class="Code">Â  Â  private static void enableCommands() {</p>
  <p class="Code">Â  Â  Â  Â  // Set the root path for our configuration access</p>
  <p class="Code">Â  Â  Â  Â  com.sun.star.beans.PropertyValue[] lParams = new com.sun.star.beans.PropertyValue[1];</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  lParams[0] = new com.sun.star.beans.PropertyValue();</p>
  <p class="Code">Â  Â  Â  Â  lParams[0].Name Â = new String("nodepath");</p>
  <p class="Code">Â  Â  Â  Â  lParams[0].Value = "/org.openoffice.Office.Commands/Execute/Disabled";</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // Create configuration update access to have write access to the configuration</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object xAccess = xConfigProvider.createInstanceWithArguments( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.configuration.ConfigurationUpdateAccess", lParams);</p>
  <p class="Code">Â  Â  Â  Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  com.sun.star.container.XNameAccess xNameAccess = (com.sun.star.container.XNameAccess)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  UnoRuntime.queryInterface(com.sun.star.container.XNameAccess.class, xAccess);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (xNameAccess != null) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // We need the XNameContainer interface to remove the nodes by name</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.container.XNameContainer xNameContainer =</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  (com.sun.star.container.XNameContainer)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  UnoRuntime.queryInterface(com.sun.star.container.XNameContainer.class, xAccess);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // Retrieves the names of all Disabled nodes</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  String[] aCommandsSeq = xNameAccess.getElementNames();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  for (int n = 0; n &lt; aCommandsSeq.length; n++) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // remove the node</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  xNameContainer.removeByName( aCommandsSeq[n]);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  catch (com.sun.star.lang.WrappedTargetException e) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  catch (com.sun.star.container.NoSuchElementException e) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  } Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // Commit our changes</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  com.sun.star.util.XChangesBatch xFlush =</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  (com.sun.star.util.XChangesBatch)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.util.XChangesBatch.class, xAccess);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  xFlush.commitChanges();</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  catch (com.sun.star.uno.Exception e) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  System.out.println("Exception detected!");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  System.out.println(e);</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  /**</p>
  <p class="Code">Â  Â  Â * Disable all commands defined in the aCommandURLTestSet array</p>
  <p class="Code">Â  Â  Â */</p>
  <p class="Code">Â  Â  private static void disableCommands() {</p>
  <p class="Code">Â  Â  Â  Â  // Set the root path for our configuration access</p>
  <p class="Code">Â  Â  Â  Â  com.sun.star.beans.PropertyValue[] lParams = new com.sun.star.beans.PropertyValue[1];</p>
  <p class="Code">Â  Â  Â  Â  lParams[0] = new com.sun.star.beans.PropertyValue();</p>
  <p class="Code">Â  Â  Â  Â  lParams[0].Name Â = new String("nodepath");</p>
  <p class="Code">Â  Â  Â  Â  lParams[0].Value = "/org.openoffice.Office.Commands/Execute/Disabled";</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  try {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // Create configuration update access to have write access to the configuration</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Object xAccess = xConfigProvider.createInstanceWithArguments( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.configuration.ConfigurationUpdateAccess", lParams);</p>
  <p class="Code">Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  com.sun.star.lang.XSingleServiceFactory xSetElementFactory = </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  (com.sun.star.lang.XSingleServiceFactory)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.lang.XSingleServiceFactory.class, xAccess);</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  com.sun.star.container.XNameContainer xNameContainer =</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  (com.sun.star.container.XNameContainer)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.container.XNameContainer.class, xAccess );</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if (xSetElementFactory != null &amp;&amp; xNameContainer != null) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Object[] aArgs = new Object[0];</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  for (int i = 0; i &lt; aCommandURLTestSet.length; i++) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Create the nodes with the XSingleServiceFactory of the configuration</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Object xNewElement = xSetElementFactory.createInstanceWithArguments( aArgs );</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (xNewElement != null) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // We have a new node. To set the properties of the node we need</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // the XPropertySet interface.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.beans.XPropertySet xPropertySet = </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  (com.sun.star.beans.XPropertySet)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.beans.XPropertySet.class,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  xNewElement );</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (xPropertySet != null) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Create a unique node name.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  String aCmdNodeName = new String("Command-");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  aCmdNodeName += i;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Insert the node into the Disabled set</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  xPropertySet.setPropertyValue("Command", aCommandURLTestSet[i]);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  xNameContainer.insertByName(aCmdNodeName, xNewElement);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // Commit our changes</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.util.XChangesBatch xFlush = (com.sun.star.util.XChangesBatch)</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  UnoRuntime.queryInterface(com.sun.star.util.XChangesBatch.class, xAccess);</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xFlush.commitChanges();</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  } Â  Â  Â  Â  Â  Â </p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  catch (com.sun.star.uno.Exception e) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  System.out.println("Exception detected!");</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  System.out.println(e);</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  } Â  Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  /**</p>
  <p class="Code">Â  Â  Â * reset URL so it can be reused</p>
  <p class="Code">Â  Â  Â *</p>
  <p class="Code">Â  Â  Â * @param aURL</p>
  <p class="Code">Â  Â  Â * Â  Â  Â  Â  Â the URL that should be reseted</p>
  <p class="Code">Â  Â  Â */</p>
  <p class="Code">Â  Â  private static void resetURL(com.sun.star.util.URL aURL) {</p>
  <p class="Code">Â  Â  Â  Â  aURL.Protocol Â = "";</p>
  <p class="Code">Â  Â  Â  Â  aURL.User Â  Â  Â = "";</p>
  <p class="Code">Â  Â  Â  Â  aURL.Password Â = "";</p>
  <p class="Code">Â  Â  Â  Â  aURL.Server Â  Â = "";</p>
  <p class="Code">Â  Â  Â  Â  aURL.Port Â  Â  Â = 0;</p>
  <p class="Code">Â  Â  Â  Â  aURL.Path Â  Â  Â = "";</p>
  <p class="Code">Â  Â  Â  Â  aURL.Name Â  Â  Â = "";</p>
  <p class="Code">Â  Â  Â  Â  aURL.Arguments = "";</p>
  <p class="Code">Â  Â  Â  Â  aURL.Mark Â  Â  Â = "";</p>
  <p class="Code">Â  Â  Â  Â  aURL.Main Â  Â  Â = "";</p>
  <p class="Code">Â  Â  Â  Â  aURL.Complete Â = "";</p>
  <p class="Code">Â  Â  }</p>
  <p class="P70">}Â </p>
  <h3 class="Head3"><a name="1_7_5_Intercepting_Context_Menus" />4.7.5Â Â Intercepting Context Menus</h3>
  <p class="Paragraph">A context menu is displayed when an object is right clicked. Typically, a context menu has context dependent functions to manipulate the selected object, such as cut, copy and paste. Developers can intercept context menus before they are displayed to cancel the execution of a context menu, add, delete, or modify the menu by replacing context menu entries or complete sub menus. It is possible to provide new customized context menus.Â </p>
  <p class="Paragraph">Context menu interception is implemented by the observer pattern. This pattern defines a one-to-many dependency between objects, so that when an object changes state, all its dependents are notified. The implementation supports more than one interceptor.<br />The root access point for intercepting context menus is a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/Controller.html" title="see type com.sun.star.frame.Controller">com.sun.star.frame.Controller</a></span> object. The controller implements the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/XContextMenuInterception.html" title="see type com.sun.star.ui.XContextMenuInterception">com.sun.star.ui.XContextMenuInterception</a></span> to support context menu interception.</p>
  <h4 class="Head4"><a name="1_7_5_1_Register_and_Remove_an_Interceptor" />Register and Remove an Interceptor</h4>
  <p class="Paragraph">The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/XContextMenuInterception.html" title="see type com.sun.star.ui.XContextMenuInterception">com.sun.star.ui.XContextMenuInterception</a></span> interface enables the developer to register and remove the interceptor code. When an interceptor is registered, it is notified whenever a context menu is about to be executed. Registering an interceptor adds it to the front of the interceptor chain, so that it is called first. The order of removals is arbitrary. It is not necessary to remove the interceptor that registered last.</p>
  <h4 class="Head4"><a name="1_7_5_2_Writing_an_Interceptor" />Writing an Interceptor</h4>
  <h5 class="Head5"><a name="1_7_5_2_1_Notification" />Notification</h5>
  <p class="Paragraph">A context menu interceptor implements the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/XContextMenuInterceptor.html" title="see type com.sun.star.ui.XContextMenuInterceptor">com.sun.star.ui.XContextMenuInterceptor</a></span>interface. This interface has one function that is called by the responsible controller whenever a context menu is about to be executed.</p>
  <p class="MethodSignatures">ContextMenuInterceptorAction <span class="MethodSignatureEmphasis">notifyContextMenuExecute</span> ( [in] ContextMenuExecuteEvent aEvent)</p>
  <p class="Paragraph"><span class="T1">The </span><span class="T54"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ContextMenuExecuteEvent.html" title="see type com.sun.star.ui.ContextMenuExecuteEvent">com.sun.star.ui.ContextMenuExecuteEvent</a></span> <span class="T1">is a struct that holds all the important information for an interceptor</span>.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table40"><colgroup><col width="185" /><col width="520" /></colgroup><tr><td colspan="2" style="text-align:left;width:4.053cm; " class="Table40A1">
      <p class="TableHead">Members of <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ContextMenuExecuteEvent.html" title="see type com.sun.star.ui.ContextMenuExecuteEvent">com.sun.star.ui.ContextMenuExecuteEvent</a></span> </p>
     </td></tr><tr><td style="text-align:left;width:4.053cm; " class="Table40A2">
     <p class="TableCode"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ContextMenuExecuteEvent.html#ExecutePosition" title="see ExecutePosition of type com.sun.star.ui.ContextMenuExecuteEvent">ExecutePosition</a></span> </p>
    </td><td style="text-align:left;width:11.386cm; " class="Table40B2">
     <p class="TextInTable"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/Point.html" title="see type com.sun.star.awt.Point">com.sun.star.awt.Point</a></span>. Contains the position the context menu will be executed.</p>
    </td></tr><tr><td style="text-align:left;width:4.053cm; " class="Table40A2">
     <p class="TableCode"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ContextMenuExecuteEvent.html#SourceWindow" title="see SourceWindow of type com.sun.star.ui.ContextMenuExecuteEvent">SourceWindow</a></span> </p>
    </td><td style="text-align:left;width:11.386cm; " class="Table40B2">
     <p class="TextInTable"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/XWindow.html" title="see type com.sun.star.awt.XWindow">com.sun.star.awt.XWindow</a></span>. Contains the window where the context menu has been requested.</p>
    </td></tr><tr><td style="text-align:left;width:4.053cm; " class="Table40A2">
     <p class="TableCode"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ContextMenuExecuteEvent.html#ActionTriggerContainer" title="see ActionTriggerContainer of type com.sun.star.ui.ContextMenuExecuteEvent">ActionTriggerContainer</a></span> </p>
    </td><td style="text-align:left;width:11.386cm; " class="Table40B2">
     <p class="TextInTable"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XIndexContainer.html" title="see type com.sun.star.container.XIndexContainer">com.sun.star.container.XIndexContainer</a></span>. The structure of the intercepted context menu. The member implements the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTriggerContainer.html" title="see type com.sun.star.ui.ActionTriggerContainer">com.sun.star.ui.ActionTriggerContainer</a></span> service.</p>
    </td></tr><tr><td style="text-align:left;width:4.053cm; " class="Table40A2">
     <p class="TableCode"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ContextMenuExecuteEvent.html#Selection" title="see Selection of type com.sun.star.ui.ContextMenuExecuteEvent">Selection</a></span> </p>
    </td><td style="text-align:left;width:11.386cm; " class="Table40B2">
     <p class="TextInTable"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/view/XSelectionSupplier.html" title="see type com.sun.star.view.XSelectionSupplier">com.sun.star.view.XSelectionSupplier</a></span>. Provides the current selection inside the source window.</p>
    </td></tr></table></div>
  <h5 class="Head5"><a name="1_7_5_2_2_Querying_a_Menu_Structure" />Querying a Menu Structure</h5>
  <p class="Paragraph">The <span class="T54">ActionTriggerContainer</span> <span class="T1">member is an indexed container of context menu entries, where each menu entry is a property set. It implements the </span><span class="T54"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTriggerContainer.html" title="see type com.sun.star.ui.ActionTriggerContainer">com.sun.star.ui.ActionTriggerContainer</a></span> <span class="T1">service. The interface </span><span class="T54"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XIndexContainer.html" title="see type com.sun.star.container.XIndexContainer">com.sun.star.container.XIndexContainer</a></span> <span class="T1">directly accesses the intercepted context menu structure through methods to access, insert, remove and replace menu entries. </span></p>
  <p class="Paragraph"><span class="T1">All elements in an </span><span class="T54">ActionTriggerContainer</span> <span class="T1">member support the </span><span class="T54"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/XPropertySet.html" title="see type com.sun.star.beans.XPropertySet">com.sun.star.beans.XPropertySet</a></span> <span class="T1">interface to get and set property values. There are two different types of menu entries with different sets of properties:</span> </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table41"><colgroup><col width="164" /><col width="541" /></colgroup><tr><td style="text-align:left;width:3.591cm; " class="Table41A1">
      <p class="TableHead">Type of Menu EntryÂ </p>
     </td><td style="text-align:left;width:11.848cm; " class="Table41B1">
      <p class="TableHead">Service NameÂ </p>
     </td></tr><tr><td style="text-align:left;width:3.591cm; " class="Table41A2">
     <p class="TextInTable">Menu entryÂ </p>
    </td><td style="text-align:left;width:11.848cm; " class="Table41B2">
     <p class="TableCode">"com.sun.star.ui.ActionTrigger"Â </p>
    </td></tr><tr><td style="text-align:left;width:3.591cm; " class="Table41A2">
     <p class="TextInTable">SeparatorÂ </p>
    </td><td style="text-align:left;width:11.848cm; " class="Table41B2">
     <p class="TableCode">"com.sun.star.ui.ActionTriggerSeparator"Â </p>
    </td></tr></table></div>
  <p class="P71">It is essential to determine the type of each menu entry be querying it for the interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XServiceInfo.html" title="see type com.sun.star.lang.XServiceInfo">com.sun.star.lang.XServiceInfo</a></span> and calling </p>
  <p class="MethodSignatures">boolean<span class="MethodSignatureEmphasis"> supportsService</span> ( [in] string ServiceName )</p>
  <p class="Paragraph">The following example shows a small helper class to determine the correct menu entry type. (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/OfficeDev/MenuElement.java" title="goto source OfficeDev/MenuElement.java">OfficeDev/MenuElement.java</a>)Â </p>
  <p class="Code">// A helper class to determine the menu element typeÂ </p>
  <p class="Code">public class MenuElementÂ </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  static public boolean IsMenuEntry( com.sun.star.beans.XPropertySet xMenuElement ) {</p>
  <p class="Code">Â  Â  Â  Â  com.sun.star.lang.XServiceInfo xServiceInfo =</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  (com.sun.star.lang.XServiceInfo)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.lang.XServiceInfo.class, xMenuElement );</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  return xServiceInfo.supportsService( "com.sun.star.ui.ActionTrigger" );</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">Â  Â  </p>
  <p class="Code">Â  Â  static public boolean IsMenuSeparator( com.sun.star.beans.XPropertySet xMenuElement ) {</p>
  <p class="Code">Â  Â  Â  Â  com.sun.star.lang.XServiceInfo xServiceInfo =</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  (com.sun.star.lang.XServiceInfo)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.lang.XServiceInfo.class, xMenuElement );</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  return xServiceInfo.supportsService( "com.sun.star.ui.ActionTriggerSeparator" );</p>
  <p class="Code">Â  Â  }</p>
  <p class="Code">}Â </p>
  <p class="Paragraph">Figure <a name="refFigure0">4.1</a>: Determine the menu element type</p>
  <p class="Paragraph">The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTrigger.html" title="see type com.sun.star.ui.ActionTrigger">com.sun.star.ui.ActionTrigger</a></span> service supported by selectable menu entries has the following properties:</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table42"><colgroup><col width="124" /><col width="630" /></colgroup><tr><td colspan="2" style="text-align:left;width:2.711cm; " class="Table42A1">
      <p class="TableHead">Properties of <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTrigger.html" title="see type com.sun.star.ui.ActionTrigger">com.sun.star.ui.ActionTrigger</a></span> </p>
     </td></tr><tr><td style="text-align:left;width:2.711cm; " class="Table42A2">
     <p class="TableCode"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTrigger.html#Text" title="see Text of type com.sun.star.ui.ActionTrigger">Text</a></span> </p>
    </td><td style="text-align:left;width:13.799cm; " class="Table42B2">
     <p class="TextInTable">string. Contains the text of the label of the menu entry.Â </p>
    </td></tr><tr><td style="text-align:left;width:2.711cm; " class="Table42A2">
     <p class="TableCode"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTrigger.html#CommandURL" title="see CommandURL of type com.sun.star.ui.ActionTrigger">CommandURL</a></span> </p>
    </td><td style="text-align:left;width:13.799cm; " class="Table42B2">
     <p class="TextInTable">string. Contains the command URL that defines which function will be executed if the menu entry is selected by the user.Â </p>
    </td></tr><tr><td style="text-align:left;width:2.711cm; " class="Table42A2">
     <p class="TableCode"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTrigger.html#HelpURL" title="see HelpURL of type com.sun.star.ui.ActionTrigger">HelpURL</a></span> </p>
    </td><td style="text-align:left;width:13.799cm; " class="Table42B2">
     <p class="TextInTable">string. This optional property contains a help URL that points to the help text.Â </p>
    </td></tr><tr><td style="text-align:left;width:2.711cm; " class="Table42A2">
     <p class="TableCode"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTrigger.html#Image" title="see Image of type com.sun.star.ui.ActionTrigger">Image</a></span> </p>
    </td><td style="text-align:left;width:13.799cm; " class="Table42B2">
     <p class="TextInTable"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/XBitmap.html" title="see type com.sun.star.awt.XBitmap">com.sun.star.awt.XBitmap</a></span>. This property contains an image that is shown left of the menu label. The use is optional so that no image is used if this member is not initialized.</p>
    </td></tr><tr><td style="text-align:left;width:2.711cm; " class="Table42A2">
     <p class="TableCode"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTrigger.html#SubContainer" title="see SubContainer of type com.sun.star.ui.ActionTrigger">SubContainer</a></span> </p>
    </td><td style="text-align:left;width:13.799cm; " class="Table42B2">
     <p class="TextInTable"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XIndexContainer.html" title="see type com.sun.star.container.XIndexContainer">com.sun.star.container.XIndexContainer</a></span>. This property contains an optional sub menu.</p>
    </td></tr></table></div>
  <p class="Paragraph">The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTriggerSeparator.html" title="see type com.sun.star.ui.ActionTriggerSeparator">com.sun.star.ui.ActionTriggerSeparator</a></span> service defines only one optional property:</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table43"><colgroup><col width="125" /><col width="629" /></colgroup><tr><td colspan="2" style="text-align:left;width:2.732cm; " class="Table43A1">
      <p class="TableHead">Property of <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTriggerSeparator.html" title="see type com.sun.star.ui.ActionTriggerSeparator">com.sun.star.ui.ActionTriggerSeparator</a></span> </p>
     </td></tr><tr><td style="text-align:left;width:2.732cm; " class="Table43A2">
     <p class="TableCode"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTriggerSeparator.html#SeparatorType" title="see SeparatorType of type com.sun.star.ui.ActionTriggerSeparator">SeparatorType</a></span> </p>
    </td><td style="text-align:left;width:13.778cm; " class="Table43B2">
     <p class="TextInTable"><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTriggerSeparatorType.html" title="see type com.sun.star.ui.ActionTriggerSeparatorType">com.sun.star.ui.ActionTriggerSeparatorType</a></span>. Specifies a certain type of a separator. Currently the following types are possible:</p>
     <p class="TextInTable">const int LINE = 0<br />const int SPACE = 1<br />const int LINEBREAK = 2</p>
    </td></tr></table></div>
  <h5 class="Head5"><a name="1_7_5_2_3_Changing_a_Menu" />Changing a Menu</h5>
  <p class="Paragraph">It is possible to accomplish certain tasks without implementing code in a context menu interceptor, such as preventing a context menu from being activated. Normally, a context menu is changed to provide additional functions to the user.Â </p>
  <p class="Paragraph">As previously discussed, the context menu structure is queried through the <span class="T54">ActionTriggerContainer</span> member that is part of the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ContextMenuExecuteEvent.html" title="see type com.sun.star.ui.ContextMenuExecuteEvent">com.sun.star.ui.ContextMenuExecuteEvent</a></span> structure. The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTriggerContainer.html" title="see type com.sun.star.ui.ActionTriggerContainer">com.sun.star.ui.ActionTriggerContainer</a></span> service has an additional interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XMultiServiceFactory.html" title="see type com.sun.star.lang.XMultiServiceFactory">com.sun.star.lang.XMultiServiceFactory</a></span> that creates <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTriggerContainer.html" title="see type com.sun.star.ui.ActionTriggerContainer">com.sun.star.ui.ActionTriggerContainer</a></span>, <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTrigger.html" title="see type com.sun.star.ui.ActionTrigger">com.sun.star.ui.ActionTrigger</a></span> and <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTriggerSeparator.html" title="see type com.sun.star.ui.ActionTriggerSeparator">com.sun.star.ui.ActionTriggerSeparator</a></span> objects. These objects are used to extend a context menu.</p>
  <p class="Paragraph">The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XMultiServiceFactory.html" title="see type com.sun.star.lang.XMultiServiceFactory">com.sun.star.lang.XMultiServiceFactory</a></span> implementation of the ActionTriggerContainer implementation supports the following strings:</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table44"><colgroup><col width="358" /><col width="347" /></colgroup><tr><td style="text-align:left;width:7.848cm; " class="Table44A1">
      <p class="TableHead">StringÂ </p>
     </td><td style="text-align:left;width:7.592cm; " class="Table44B1">
      <p class="TableHead">ObjectÂ </p>
     </td></tr><tr><td style="text-align:left;width:7.848cm; " class="Table44A2">
     <p class="TextInTable">"com.sun.star.ui.ActionTrigger"Â </p>
    </td><td style="text-align:left;width:7.592cm; " class="Table44B2">
     <p class="TextInTable">Creates a normal menu entry.Â </p>
    </td></tr><tr><td style="text-align:left;width:7.848cm; " class="Table44A2">
     <p class="TextInTable">"com.sun.star.ui.ActionTriggerContainer"Â </p>
    </td><td style="text-align:left;width:7.592cm; " class="Table44B2">
     <p class="TextInTable">Creates an empty sub menu<span class="T55">1</span> .</p>
    </td></tr><tr><td style="text-align:left;width:7.848cm; " class="Table44A2">
     <p class="TextInTable">"com.sun.star.ui.ActionTriggerSeparator"Â </p>
    </td><td style="text-align:left;width:7.592cm; " class="Table44B2">
     <p class="TextInTable">Creates an unspecified separator<span class="T55">2</span> .</p>
    </td></tr></table></div>
  <p class="P72">1<span class="T56"> A sub menu cannot exist by itself. It has to be inserted into a </span><span class="T57"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ActionTrigger.html" title="see type com.sun.star.ui.ActionTrigger">com.sun.star.ui.ActionTrigger</a></span> <span class="T56">!</span> </p>
  <p class="P72">2<span class="T56"> The separator has no special type. It is the responsibility of the concrete implementation to render an unspecified separator.</span> </p>
  <h5 class="Head5"><a name="1_7_5_2_4_Finishing_Interception" />Finishing Interception</h5>
  <p class="Paragraph">Every interceptor that is called directs the controller how it continues after the call returns. The enumeration <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ContextMenuInterceptorAction.html" title="see type com.sun.star.ui.ContextMenuInterceptorAction">com.sun.star.ui.ContextMenuInterceptorAction</a></span> defines the possible return values.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table45"><colgroup><col width="206" /><col width="499" /></colgroup><tr><td colspan="2" style="text-align:left;width:4.517cm; " class="Table45A1">
      <p class="TableHead">Values of <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/ContextMenuInterceptorAction.html" title="see type com.sun.star.ui.ContextMenuInterceptorAction">com.sun.star.ui.ContextMenuInterceptorAction</a></span> </p>
     </td></tr><tr><td style="text-align:left;width:4.517cm; " class="Table45A2">
     <p class="TableCode">IGNOREDÂ </p>
    </td><td style="text-align:left;width:10.922cm; " class="Table45B2">
     <p class="TextInTable">Called object has ignored the call. The next registered <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/XContextMenuInterceptor.html" title="see type com.sun.star.ui.XContextMenuInterceptor">com.sun.star.ui.XContextMenuInterceptor</a></span> should be notified.</p>
    </td></tr><tr><td style="text-align:left;width:4.517cm; " class="Table45A2">
     <p class="TableCode">CANCELLEDÂ </p>
    </td><td style="text-align:left;width:10.922cm; " class="Table45B2">
     <p class="TextInTable">The context menu must not be executed. No remaining interceptor will be called.Â </p>
    </td></tr><tr><td style="text-align:left;width:4.517cm; " class="Table45A2">
     <p class="TableCode">EXECUTE_MODIFIEDÂ </p>
    </td><td style="text-align:left;width:10.922cm; " class="Table45B2">
     <p class="TextInTable">The context menu has been modified and should be executed without notifying the next registered <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/XContextMenuInterceptor.html" title="see type com.sun.star.ui.XContextMenuInterceptor">com.sun.star.ui.XContextMenuInterceptor</a></span>.</p>
    </td></tr><tr><td style="text-align:left;width:4.517cm; " class="Table45A2">
     <p class="TableCode">CONTINUE_MODIFIEDÂ </p>
    </td><td style="text-align:left;width:10.922cm; " class="Table45B2">
     <p class="TextInTable">The context menu was modified by the called object. The next registered <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/XContextMenuInterceptor.html" title="see type com.sun.star.ui.XContextMenuInterceptor">com.sun.star.ui.XContextMenuInterceptor</a></span> should be notified.</p>
    </td></tr></table></div>
  <p class="Paragraph">The following example shows a context menu interceptor that adds a a sub menu to a menu that has been intercepted at a controller, where this <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/ui/XContextMenuInterceptor.html" title="see type com.sun.star.ui.XContextMenuInterceptor">com.sun.star.ui.XContextMenuInterceptor</a></span> has been registered. This sub menu is inserted ino the context menu at the topmost position. It provides help functions to the user that are reachable through the menu Help. (<a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/examples/DevelopersGuide/OfficeDev/ContextMenuInterceptor.java" title="goto source OfficeDev/ContextMenuInterceptor.java">OfficeDev/ContextMenuInterceptor.java</a>)</p>
  <p class="Code">import com.sun.star.ui.*;Â </p>
  <p class="Code">import com.sun.star.lang.XMultiServiceFactory;Â </p>
  <p class="Code">import com.sun.star.beans.XPropertySet;Â </p>
  <p class="Code">import com.sun.star.container.XIndexContainer;Â </p>
  <p class="Code">import com.sun.star.uno.UnoRuntime;Â </p>
  <p class="Code">import com.sun.star.uno.Exception;Â </p>
  <p class="Code">import com.sun.star.beans.UnknownPropertyException;Â </p>
  <p class="Code">import com.sun.star.lang.IllegalArgumentException;Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â </p>
  <p class="Code">public class ContextMenuInterceptor implements XContextMenuInterceptor {Â </p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  public ContextMenuInterceptorAction notifyContextMenuExecute( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â com.sun.star.ui.ContextMenuExecuteEvent aEvent ) throws RuntimeException {</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  try {</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // Retrieve context menu container and query for service factory to</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // create sub menus, menu entries and separators</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  com.sun.star.container.XIndexContainer xContextMenu = aEvent.ActionTriggerContainer;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  com.sun.star.lang.XMultiServiceFactory xMenuElementFactory = </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  (com.sun.star.lang.XMultiServiceFactory)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.lang.XMultiServiceFactory.class, xContextMenu );</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  if ( xMenuElementFactory != null ) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // create root menu entry for sub menu and sub menu</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.beans.XPropertySet <span class="MethodSignatureEmphasis">xRootMenuEntry</span> =</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  (XPropertySet)UnoRuntime.queryInterface(</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.beans.XPropertySet.class, </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  xMenuElementFactory.<span class="CodeEmphasis">createInstance</span> ( "<span class="CodeEmphasis">com.sun.star.ui.ActionTrigger</span> " ));</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // create a line separator for our new help sub menu</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.beans.XPropertySet <span class="MethodSignatureEmphasis">xSeparator</span> = </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  (com.sun.star.beans.XPropertySet)UnoRuntime.queryInterface( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.beans.XPropertySet.class, </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  xMenuElementFactory.<span class="MethodSignatureEmphasis">createInstance( "com.sun.star.ui.ActionTriggerSeparator" )</span> );</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Short aSeparatorType = new Short( ActionTriggerSeparatorType.LINE );</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â xSeparator.setPropertyValue( "SeparatorType", (Object)aSeparatorType );</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // query sub menu for index container to get access</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.container.XIndexContainer xSubMenuContainer =</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  (com.sun.star.container.XIndexContainer)UnoRuntime.queryInterface( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  com.sun.star.container.XIndexContainer.class,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  xMenuElementFactory.createInstance( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.ui.ActionTriggerContainer" ));</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // intialize root menu entry "Help"</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xRootMenuEntry.setPropertyValue( "Text", new String( "Help" ));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xRootMenuEntry.setPropertyValue( "CommandURL", new String( "slot:5410" ));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xRootMenuEntry.setPropertyValue( "HelpURL", new String( "5410" ));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xRootMenuEntry.setPropertyValue( "SubContainer", (Object)xSubMenuContainer );</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // create menu entries for the new sub menu</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â   Â  Â  Â  Â   </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // intialize help/content menu entry</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // entry "Content"</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet xMenuEntry = (XPropertySet)UnoRuntime.queryInterface( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  XPropertySet.class, xMenuElementFactory.<span class="CodeEmphasis">createInstance</span> (</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  "<span class="CodeEmphasis">com.sun.star.ui.ActionTrigger</span> " ));</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xMenuEntry.setPropertyValue( "Text", new String( "Content" ));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xMenuEntry.setPropertyValue( "CommandURL", new String( "slot:5401" ));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xMenuEntry.setPropertyValue( "HelpURL", new String( "5401" ));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // insert menu entry to sub menu</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xSubMenuContainer.<span class="CodeEmphasis">insertByIndex</span> ( 0, (Object)xMenuEntry );</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // intialize help/help agent</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // entry "Help Agent"</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xMenuEntry = (com.sun.star.beans.XPropertySet)UnoRuntime.queryInterface( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â com.sun.star.beans.XPropertySet.class,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â xMenuElementFactory.<span class="CodeEmphasis">createInstance</span> (</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â "<span class="CodeEmphasis">com.sun.star.ui.ActionTrigger</span> " ));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xMenuEntry.setPropertyValue( "Text", new String( "Help Agent" ));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xMenuEntry.setPropertyValue( "CommandURL", new String( "slot:5962" ));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xMenuEntry.setPropertyValue( "HelpURL", new String( "5962" ));</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // insert menu entry to sub menu</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xSubMenuContainer.insertByIndex( 1, (Object)xMenuEntry );</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // intialize help/tips</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // entry "Tips"</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xMenuEntry = (com.sun.star.beans.XPropertySet)UnoRuntime.queryInterface( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â com.sun.star.beans.XPropertySet.class,</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â xMenuElementFactory.createInstance( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â "<span class="CodeEmphasis">com.sun.star.ui.ActionTrigger</span> " ));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xMenuEntry.setPropertyValue( "Text", new String( "Tips" ));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xMenuEntry.setPropertyValue( "CommandURL", new String( "slot:5404" ));</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xMenuEntry.setPropertyValue( "HelpURL", new String( "5404" ));</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // insert menu entry to sub menu</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xSubMenuContainer.<span class="CodeEmphasis">insertByIndex</span> ( 2, (Object)xMenuEntry );</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // add separator into the given context menu</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xContextMenu.<span class="CodeEmphasis">insertByIndex</span> ( 0, (Object)xSeparator );</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // add new sub menu into the given context menu</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  xContextMenu.<span class="CodeEmphasis">insertByIndex</span> ( 0, (Object)xRootMenuEntry );</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // The controller should execute the modified context menu and stop notifying other</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  // interceptors.</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  return <span class="CodeEmphasis">com.sun.star.ui.ContextMenuInterceptorAction.EXECUTE_MODIFIED</span> ;</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  catch ( com.sun.star.beans.UnknownPropertyException ex ) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // do something useful</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // we used a unknown property </p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  catch ( com.sun.star.lang.IndexOutOfBoundsException ex ) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // do something useful</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // we used an invalid index for accessing a container</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  catch ( com.sun.star.uno.Exception ex ) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // something strange has happend!</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â  catch ( java.lang.Throwable ex ) {</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  // catch java exceptions â do something useful</p>
  <p class="Code">Â  Â  Â  Â  }</p>
  <p class="Code">Â  Â  Â  Â   Â  Â  Â  Â   </p>
  <p class="Code">Â  Â  Â  Â  return com.sun.star.ui.ContextMenuInterceptorAction.IGNORED;</p>
  <p class="Code">Â  Â  }</p>
  <p class="Standard">Â </p>
  <h2 class="Head2"><a name="1_8_File_Naming_Conventions" />4.8Â Â File Naming Conventions</h2>
  <p class="Paragraph">As a recommendation, UNO component libraries Â should be named according to the following naming scheme:</p>
  <p class="Paragraph"><span class="Codeintext">&lt;NAME&gt;[&lt;VERSION&gt;].uno.(so|dll|dylib|jar)</span> </p>
  <p class="Paragraph">This recommendation applies to shared libraries and Java archives,which are deployed by the Extension Manager Â as described in section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#1_Extensions" title="see chapter 5 Extensions">5 Extensions</a></span>.</p>
  <p class="Paragraph">This file name convention results in file names such as:Â </p>
  <p class="P73"><span class="wwwftpemail">component.uno.so</span> </p>
  <p class="P74"><span class="wwwftpemail">component1.uno.dll</span> </p>
  <p class="P74"><span class="wwwftpemail">component0.1.3.uno.dylib</span> </p>
  <p class="P74"><span class="wwwftpemail">component.uno.jar</span> </p>
  <p class="P75"><span class="wwwftpemail" /></p>
  <p class="Paragraph">&lt;NAME&gt; should be a descriptive name, optionally extended by version information as shown below, followed by the characters <span class="wwwftpemail">.uno</span> and the necessary file extension.</p>
  <p class="Paragraph">The term <span class="wwwftpemail">.uno</span> is placed next to the platform-specific extension to emphasize that this is a special type of shared library, jar, or zip file.</p>
  <p class="Paragraph">Usually a shared library or jar has to be registered with UNO to be useful, as its shared library interface only consists of the component operations. Â </p>
  <p class="Paragraph">Since the given naming scheme is only a suggestion, there might be component shared libraries that do not contain the <span class="wwwftpemail">.uno</span> addition in their names. Therefore, no tool should build assumptions on whether a shared library name contains <span class="wwwftpemail">.uno</span> or not.</p>
  <p class="Paragraph">&lt;VERSION&gt; is optional and should be in the form:Â </p>
  <p class="Code">&lt;VERSION&gt; Â = Â &lt;MAJOR&gt; [.&lt;MINOR&gt; [.&lt;MICRO&gt;]]</p>
  <p class="Code">&lt;MAJOR&gt; Â = Â &lt;NUMBER&gt;</p>
  <p class="Code">&lt;MINOR&gt; Â = Â &lt;NUMBER&gt;</p>
  <p class="Code">&lt;MICRO&gt; Â = Â &lt;NUMBER&gt;</p>
  <p class="Code">&lt;NUMBER&gt; Â = Â 0 Â | Â 1â9 0â9*</p>
  <p class="Paragraph">Using the version tag in the file name of a shared library or jar is primarily meant for simple components that are not part of a<span class="wwwftpemail">n extension deployed by the Extension Manager</span>. Such components are usually made up of a single shared library, and different file names for different versions can be useful, for instance in bug reports.</p>
  <p class="Paragraph">Â </p>
  <p class="Paragraph">The version of components that are part of the OpenOffice.org installation is already well defined by the version and build number of the installed OpenOffice.org itself.Â </p>
  <p class="Paragraph">It is up to the developer how the version scheme is used. You can count versions of a given component shared library using MAJOR alone, or add MINOR and MICRO as needed.Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Tabelle39"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.602cm; " class="Tabelle39A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./4 Writing UNO Components_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.448cm; " class="Tabelle39B1">
      <p class="P39">If version is used, it must be placed before the platform-specific extension, never after it. Under Linux and Solaris, there is a convention to add a version number after the <span class="wwwftpemail">.so</span>, but that version number has different semantics than the version number used here. In short, those version numbers change whenever the shared library's interface changes, whereas the UNO component interface with the component operations <span class="Codeintext">component_getFactory()</span> etc. never changes.</p>
     </td></tr></table></div>
  <p class="P75">The following considerations give an overview of ways that a component can evolve: Â </p>
  <p class="Paragraph">A component shared library's interface, as defined by the component operations such as <span class="Codeintext">component_getFactory()</span> is assumed to be stable.</p>
  <p class="Paragraph">The UNO services offered by a component can change:Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P76" style="margin-left:2.5cm;"><p class="P76" style="margin-left:0cm;">compatibly : by changing an implementation in the component file but adhering to its specification, or by adding a new UNO service implementation to a component file</p></li>
   <li class="P76" style="margin-left:2.5cm;"><p class="P76" style="margin-left:0cm;">incompatibly: by removing an implementation, or by removing a UNO service from a component</p></li>
   <li class="P76" style="margin-left:2.5cm;"><p class="P76" style="margin-left:0cm;">indirectly compatibly: when one of the UNO services changes compatibility and the component is adapted accordingly. This can happen when a service specification is extended by additional optional interfaces, and the component is altered to support these interfaces.</p></li>
  </ul>
  <p class="Paragraph">When an implementation in a component file is changed, for instance when a bug is fixed, such a change will typically be compatible unless clients made themselves dependent on the bug. This can happen when clients considered the bug a feature or worked around the bug in a way that made them dependent on the bug. Therefore developers must be careful to program according to the specification, not the implementation.Â </p>
  <p class="Paragraph">Finally, a component shared library can change its dependencies on other shared libraries. Examples of such dependencies are:Â </p>
  <p class="TitledListHead">C/C++ runtime librariesÂ </p>
  <p class="TitledListBody">such as <span class="wwwftpemail">libc.so.6</span>, <span class="wwwftpemail">libstdc++.so.3.0.1</span>, and <span class="wwwftpemail">libstlport_gcc.so</span> </p>
  <p class="TitledListHead">UNO runtime libraries Â </p>
  <p class="TitledListBody">such as <span class="wwwftpemail">libcppu.so.3.1.0</span> and <span class="wwwftpemail">libcppuhelpergcc3.so.3.1.0</span> </p>
  <p class="TitledListHead">OpenOffice.org libraries Â </p>
  <p class="TitledListBody">such as <span class="wwwftpemail">libsvx644li.so</span> </p>
  <p class="Paragraph">Dependency changes are typically incompatible, as they rely on compatible or incompatible changes of the component's environment.Â </p>
  <h2 class="Head2"><a name="1_9_Deployment_Options_for_Components" />4.9Â Â Deployment Options for Components</h2>
  <p class="Paragraph">Component are usually distributed and deployed as extensions (see chapter <span class="T32"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#1_Extensions" title="see chapter 5 Extensions">5 Extensions</a></span> <span class="T58">). However, by using legacy tools, such as regcomp, and regmerge, it is also possible to install components, which can be more convenient during development.</span> </p>
  <h3 class="Head3"><a name="1_9_1_Background_3A_UNO_Registries" />4.9.1Â Â Background: UNO Registries</h3>
  <p class="Paragraph">This section explains the necessary steps to deploy new UNO components manually into an installed OpenOffice.org. Background information is provided and the tools required to test deployment are described. The developer and deployer of the component should be familiar with this section. If the recommendations provided are accepted, interoperability of components of different vendors can be achieved easily.Â </p>
  <p class="Paragraph">UNO registries store binary data in a tree-like structure. The stored data can be accessed within a registry programmatically through the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/registry/SimpleRegistry.html" title="see type com.sun.star.registry.SimpleRegistry">com.sun.star.registry.SimpleRegistry</a></span> service, however this is generally not necessary. Note that UNO registries have nothing to do with the Windows registry, except that they follow a similar concept for data storage.</p>
  <p class="Paragraph">UNO-registries mainly store two types of data : Â </p>
  <p class="TitledListHead">Type-libraryÂ </p>
  <p class="TitledListBody">To invoke UNO calls from BASIC or through an interprocess connection, the core UNO bridges need information about the used data types. UNO stores this information into a type library, so that the same data is reusable from any bridge. This is in contrast to the CORBA approach, where code is generated for each data type that needs to be compiled and linked into huge libraries. Every UNOIDL type description is stored as a binary large object (BLOB) that is interpreted by the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/reflection/TypeDescriptionProvider.html" title="see type com.sun.star.reflection.TypeDescriptionProvider">com.sun.star.reflection.TypeDescriptionProvider</a></span> service.</p>
  <p class="TitledListHead">Information about registered componentsÂ </p>
  <p class="TitledListBody">One basic concept of UNO is to create an instance of a component simply by its service name through the <span class="Codeintext">ServiceManager</span>. The association between the service name and the shared library or .<span class="wwwftpemail">jar</span>-file where the necessary compiled code is found is stored into a UNO-registry.<br />The structure of this data is provided below. Future versions of OpenOffice.org will probably store this information in an XML file that will make it modifiable using a simple text editor.</p>
  <p class="Paragraph">Both types of data are necessary to run a UNO-C++ process. If the types of data are not present, it could lead to termination of the program. UNO processes in general open their registries during startup and close them when the process terminates. Both types of data are commonly stored in a file with an .<span class="wwwftpemail">rdb</span> suffix ( rdb=registry database ), but this suffix is not mandatory. </p>
  <h4 class="Head4"><a name="1_9_1_1_UNO_Type_Library" />UNO Type Library</h4>
  <p class="Paragraph">All type descriptions must be available within the registry under the /UCR main key (UCR = Uno Core Reflection) to be usable in a UNO C++ process . Use the <span class="T22">regview</span> tool to view the file <span class="wwwftpemail">&lt;officepath&gt;/program/</span> <span class="T59">types</span><span class="wwwftpemail"> </span><span class="T59">.rdb.</span> The <span class="wwwftpemail">regview</span> tool comes with the OpenOffice.org SDK.</p>
  <p class="Paragraph">For instance:Â </p>
  <p class="Output">$ <span class="T37">regview</span> types.rdb /UCR </p>
  <p class="Paragraph">prints all type descriptions used within the office to <span class="Codeintext">stdout</span>. To check if a certain type is included within the registry, invoke the following command:</p>
  <p class="Output">$ regview types.rdb /UCR/com/sun/star/bridge/XUnoUrlResolver<br /> </p>
  <p class="Output">/UCR/com/sun/star/bridge/XUnoUrlResolver<br /> Â  Value: Type = RG_VALUETYPE_BINARY<br /> Â  Size = 461<br /> Â  Data = minor version: 0<br /> Â  major version: 1<br /> Â  type: 'interface'<br /> Â  name: 'com/sun/star/bridge/XUnoUrlResolver'<br /> Â  super name: 'com/sun/star/uno/XInterface'<br /> Â  Doku: ""<br /> Â  number of fields: 0<br /> Â  number of methods: 1<br /> Â  method #0: com/sun/star/uno/XInterface resolve([in] string sUnoUrl)<br /> Â  raises com/sun/star/connection/NoConnectException,<br /> Â  Â  Â  Â  Â com/sun/star/connection/ConnectionSetupException,<br /> Â  Â  Â  Â  Â com/sun/star/lang/IllegalArgumentException<br /> Â  Doku: ""<br /> Â  number of references: 0</p>
  <p class="Paragraph">The <span class="wwwftpemail">regview</span> tool decodes the format of the BLOB containing the type description and presents it in a readable form.</p>
  <h4 class="Head4"><a name="1_9_1_2_Component_Registration" />Component Registration </h4>
  <p class="Paragraph">The UNO component provides the data about what services are implemented. In order not to load all available UNO components into memory when starting a UNO process, the data is assembled once during setup and stored into the registry. The process of writing this information into a registry is called <span class="T22">component registration</span>. The tools used to perform this task are discussed below. </p>
  <p class="Paragraph">For an installed OpenOffice.org, the <span class="wwwftpemail">services.rdb</span> contains the component registration information. The data is stored within the /IMPLEMENTATIONS and /SERVICES key. The code below shows a sample SERVICES key for the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/io/Pipe.html" title="see type com.sun.star.io.Pipe">com.sun.star.io.Pipe</a></span> service. </p>
  <p class="Output">$ regview services.rdb /SERVICES/com.sun.star.io.PipeÂ </p>
  <p class="Output">Â </p>
  <p class="Output">/SERVICES/com.sun.star.io.Pipe<br /> Â Value: Type = RG_VALUETYPE_STRINGLIST<br /> Â  Â  Â  Â  Size = 38<br /> Â  Â  Â  Â  Len Â = 1<br /> Â  Â  Â  Â  Data = 0 = "com.sun.star.comp.io.stm.Pipe"</p>
  <p class="Paragraph">The code above contains one implementation name, but it could contain more than one. In this case, only the first is used. The following entry can be found within the <span class="Codeintext">IMPLEMENTATIONS</span> section: </p>
  <p class="Output">$ regview services.rdb /IMPLEMENTATIONS/com.sun.star.comp.io.stm.PipeÂ </p>
  <p class="Output">Â </p>
  <p class="Output">/IMPLEMENTATIONS/com.sun.star.comp.io.stm.Pipe<br /> / UNO<br /> Â  / ACTIVATOR<br /> Â  Â  Value: Type = RG_VALUETYPE_STRING<br /> Â  Â  Â  Â  Â  Â Size = 34<br /> Â  Â  Â  Â  Â  Â Data = "com.sun.star.loader.SharedLibrary"</p>
  <p class="Output">Â  Â / SERVICES<br /> Â  Â  / com.sun.star.io.Pipe<br /> Â  / LOCATION<br /> Â  Â  Value: Type = RG_VALUETYPE_STRING<br /> Â  Â  Â  Â  Â  Â Size = 8<br /> Â  Â  Â  Â  Â  Â Data = "stm.dll"</p>
  <p class="Paragraph">The implementations section holds three types of data. Â </p>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P77" style="margin-left:2.5cm;"><p class="P77" style="margin-left:0cm;">The loader to be used when the component is requested at runtime (here <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/loader/SharedLibrary.html" title="see type com.sun.star.loader.SharedLibrary">com.sun.star.loader.SharedLibrary</a></span>). </p></li>
  </ol>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P78" style="margin-left:2.5cm;"><p class="P78" style="margin-left:0cm;">The services supported by this implementation. Â </p></li>
  </ol>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P79" style="margin-left:2.5cm;"><p class="P79" style="margin-left:0cm;">The URL to the file the loader uses to access the library (the url may be given relative to the OpenOffice.org library directory for native components as it is in this case). Â </p></li>
  </ol>
  <h3 class="Head3"><a name="1_9_2_Command_Line_Registry_Tools" />4.9.2Â Â Command Line Registry Tools</h3>
  <p class="Paragraph">There are various tools to create, modify and use registries. This section shows some common use cases. The <span class="wwwftpemail">regmerge</span> tool is used to merge multiple registries into a sub-key of an existing or new registry. For instance:</p>
  <p class="Output">$ regmerge new.rdb / test1.rdb test2.rdbÂ </p>
  <p class="Paragraph">merges the contents of <span class="wwwftpemail">test1.rdb</span> and <span class="wwwftpemail">test2.rdb</span> under the root key / of the registry database <span class="wwwftpemail">new.rdb</span> . The names of the keys are preserved, because both registries are merged into the root-key. In case <span class="wwwftpemail">new.rdb</span> existed before, the previous contents remain in <span class="wwwftpemail">new.rdb</span> unless an identical key names exist in <span class="wwwftpemail">test1.rdb</span> and <span class="wwwftpemail">test2.rdb</span>. In this case, the content of these keys is overwritten with the ones in <span class="wwwftpemail">test1.rdb</span> or <span class="wwwftpemail">test2.rdb</span>. So the above command is semantically identical to:</p>
  <p class="Output">$ regmerge new.rdb / test1.rdb<br />$ regmerge new.rdb / test2.rdb</p>
  <p class="Paragraph">The following command merges the contents of <span class="wwwftpemail">test1.urd</span> and <span class="wwwftpemail">test2.urd</span> under the key /UCR into the file <span class="wwwftpemail">myapp_types.rdb.</span> </p>
  <p class="Output">$ regmerge myapp_types.rdb /UCR test1.urd test2.urdÂ </p>
  <p class="Paragraph">The names of the keys in <span class="wwwftpemail">test1.urd</span> and <span class="wwwftpemail">test2.urd</span> should only be added to the /UCR key. This is a real life scenario as the files produced by the idl-compiler have a .<span class="wwwftpemail">urd</span>-suffix. The <span class="wwwftpemail">regmerge</span> tool needs to be run before the type library can be used in a program, because UNO expects each type description below the /UCR key.</p>
  <h4 class="Head4"><a name="1_9_2_1_Component_Registration_Tool" />Component Registration Tool</h4>
  <p class="Paragraph">Components can be registered using the <span class="T60">regcomp</span> tool. Below, the components necessary to establish an interprocess connection are registered into the <span class="wwwftpemail">myapp_services.rdb</span>.</p>
  <p class="Output">$ regcomp -register -r myapp_services.rdb \<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â -c uuresolver.dll Â  Â  Â  Â  Â  Â  \<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â -c brdgfctr.dll Â  Â  Â  Â  Â  Â  Â  \<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â -c acceptor.dll Â  Â  Â  Â  Â  Â  Â  \<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â -c connectr.dll Â  Â  Â  Â  Â  Â  Â  \<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â -c remotebridge.dll</p>
  <p class="Paragraph">The \ means command line continuation. The option -r gives the registry file where the information is written to. If it does not exist, it is created, otherwise the new data is added. In case there are older keys, they are overwritten. The registry file (here <span class="wwwftpemail">myapp_services.rdb</span>) must NOT be opened by any other process at the same time. The option -c is followed by a single name of a library that is Â registered. The -c option can be given multiple times. The shared libraries registered in the example above are needed to use the UNO interprocess bridge.</p>
  <p class="Paragraph">Registering a Java component is currently more complex. It works only in an installed office environment, the &lt;O<span class="wwwftpemail">fficePath&gt;/program</span> must be the current working directory, the office setup must point to a valid Java installation that can be verified using <span class="wwwftpemail">jvmsetup</span> from &lt;O<span class="wwwftpemail">fficePath&gt;/program</span>, and Java must be enabled. See <span class="ButtonsMenus">Tools - Options - General - Security</span>. In OpenOffice.org2.0, make sure that a Java is selected by using the Java panel of the options dialog (Tools-Options - OpenOffice.org â Java). </p>
  <p class="Paragraph">The office must not run. On Unix, the LD_LIBRARY_PATH environment variable must additionally contain the directories listed by the <span class="wwwftpemail">javaldx</span> tool (which is installed with the office).</p>
  <p class="Paragraph">Copy the <span class="wwwftpemail">regcomp</span> executable into the <span class="wwwftpemail">&lt;officepath&gt;/program</span> directory. The <span class="wwwftpemail">regcomp</span> tool must then be invoked using the following parameters :</p>
  <p class="Output">$ regcomp -register -r your_registry.rdb \Â </p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  -br &lt;officepath&gt;/program/services.rdb \</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  -l com.sun.star.loader.Java2 \</p>
  <p class="Output">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  -c file:///d:/test/JavaTestComponent.jar </p>
  <p class="Paragraph">The option -r (registry) tells <span class="wwwftpemail">regcomp</span> where to write the registration data and the -br (bootstrap registry) option points <span class="wwwftpemail">regcomp</span> to a registry to read common types from. The <span class="wwwftpemail">regcomp</span> tool does not know the library that has the Java loader. The -l option gives the service name of the loader to use for the component that must be com.sun.star.loader.Java2. The option can be omitted for C++ components, because <span class="wwwftpemail">regcomp</span> defaults to the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/loader/SharedLibrary.html" title="see type com.sun.star.loader.SharedLibrary">com.sun.star.loader.SharedLibrary</a></span> loader. The option -c gives the file url to the Java component. </p>
  <p class="Paragraph">File urls can be given absolute or relative. Absolute file urls must begin with '<span class="wwwftpemail">file:///</span> <span class="Codeintext">'</span>. All other strings are interpreted as relative file urls. The '<span class="wwwftpemail">3rdpartYcomp/filterxy.dll</span>', '<span class="wwwftpemail">../../3rdpartycomp/filterxyz.dll</span>', and '<span class="wwwftpemail">filterxyz.dll</span>' are a few examples. Relative file urls are interpreted relative to all paths given in the PATH variable on Windows and LD_LIBRARY_PATH variable on Unix. </p>
  <p class="Paragraph">Java components require an <span class="wwwftpemail">absolute</span> file URL for historical reasons. </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table56"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.596cm; " class="Table56A1">
      <div class="TableContents"><img width="39" height="39" alt="Tip graphics marks a hint section in the text" src="./4 Writing UNO Components_files/tip.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.454cm; " class="Table56B1">
      <p class="TipInTable">The <span class="T22">regcomp</span> tool should be used only during the development and testing phase of components. For deploying final components, the Extension Manager should be used instead. See <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml#1_Extensions" title="see chapter 5 Extensions">5 Extensions</a></span>.</p>
     </td></tr></table></div>
  <h4 class="Head4"><a name="1_9_2_2_UNO_Type_Library_Tools" />UNO Type Library Tools</h4>
  <p class="Paragraph">There are several tools that currently access the type library directly. They are encountered when new UNOIDL types are introduced.Â </p>
  <ul style="margin-left:0.5cm;">
   <li class="P80" style="margin-left:2.5cm;"><p class="P80" style="margin-left:0cm;"><span class="T61">idlc</span> , Compiles .idl files into .urd-registry-files. </p></li>
   <li class="P80" style="margin-left:2.5cm;"><p class="P80" style="margin-left:0cm;"><span class="T60">cppumaker</span> <span class="T37">, </span>Generates C++ header for a given UNO type list from a type registry used with the UNO C++ binding.</p></li>
   <li class="P80" style="margin-left:2.5cm;"><p class="P80" style="margin-left:0cm;"><span class="T60">javamaker</span> , Generates Java .class files for a given type list from a type registry.</p></li>
   <li class="P80" style="margin-left:2.5cm;"><p class="P80" style="margin-left:0cm;"><span class="T60">rdbmaker</span> , Creates a new registry by extracting given types (including dependent types) from another registry, and is used for generating minimal, but complete type libraries for components. It is useful when building minimal applications that use UNO components.</p></li>
   <li class="P80" style="margin-left:2.5cm;"><p class="P80" style="margin-left:0cm;"><span class="T60">regcompare</span> <span class="T53">,</span> Compares a type library to a reference type library and checks for compatibility. </p></li>
   <li class="P80" style="margin-left:2.5cm;"><p class="P80" style="margin-left:0cm;"><span class="T60">regmerge</span> <span class="T53">,</span> Merges multiple registries into a certain sub-key of a new or already existing registry.</p></li>
  </ul>
  <h3 class="Head3"><a name="1_9_3_Manual_Component_Installation" />4.9.3Â Â Manual Component Installation</h3>
  <h4 class="Head4"><a name="1_9_3_1_Manually_Merging_a_Registry_and_Adding_it_to_uno.ini_or_soffice.ini" />Manually Merging a Registry and Adding it to uno.ini or soffice.ini</h4>
  <p class="Paragraph">Registry files used by OpenOffice.org are configured within the <span class="wwwftpemail">uno(.ini|rc)</span> file found in the program directory. After a default OpenOffice.org installation, the files look like this:</p>
  <p class="Code">uno.ini :Â </p>
  <p class="Code">[Bootstrap]Â </p>
  <p class="Code">UNO_TYPES=$ORIGIN/types.rdbÂ </p>
  <p class="Code">UNO_SERVICES=$ORIGIN/services.rdbÂ </p>
  <p class="Paragraph">The two UNO variables are relevant for UNO components. The <span class="T1">UNO_TYPES variable gives a space separated list of type library registries, and the UNO_SERVICES variable gives </span>a space separated list of registries that contain component registration information. These registries are opened read-only. The same registry may appear in UNO_TYPES and UNO_SERVICES variables. The $ORIGIN points to the directory where the <span class="wwwftpemail">ini/rc </span>file is located.</p>
  <p class="Paragraph">OpenOffice.org uses the <span class="wwwftpemail">types.rdb</span> as a type and the <span class="wwwftpemail">services.rdb </span>as a component registration information repository. When a programmer or software vendor releases a UNO component, the following files must be provided at a minimum:</p>
  <ul style="margin-left:0.5cm;">
   <li class="P81" style="margin-left:2.5cm;"><p class="P81" style="margin-left:0cm;">A file containing the code of the new component, for instance a shared library, a jar file, or maybe a python file in the future.Â </p></li>
   <li class="P81" style="margin-left:2.5cm;"><p class="P81" style="margin-left:0cm;">A registry file containing user defined UNOIDL types, if any.Â </p></li>
   <li class="P81" style="margin-left:2.5cm;"><p class="P81" style="margin-left:0cm;">(optional) A registry file containing registration information of a pre-registered component. The registry provider should register the component with a relative path to be beneficial in other OpenOffice.org installations. Â </p></li>
  </ul>
  <p class="Paragraph">The latter two can be integrated into a single file.Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table3"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table3A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./4 Writing UNO Components_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table3B1">
      <p class="TipInTable">In fact, a vendor may release more files, such as documentation, the .<span class="wwwftpemail">idl</span> files of the user defined types, the source code, and configuration files. While every software vendor is encouraged to do this, there are currently no recommendations how to integrate these files into OpenOffice.org. These type of files are ignored in the following paragraphs. These issues will be addressed in next releases of OpenOffice.org.</p>
     </td></tr></table></div>
  <p class="Paragraph">The <span class="T1">recommended</span> method to add a component to OpenOffice.org <span class="Emphasis">manually</span> is described in the following steps:</p>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P82" style="margin-left:2.5cm;"><p class="P82" style="margin-left:0cm;">Copy new shared library components into the <span class="wwwftpemail">&lt;OfficePath&gt;/program</span> directory and new Java components into the <span class="wwwftpemail">&lt;OfficePath&gt;/program/classes</span> directory.</p></li>
   <li class="P82" style="margin-left:2.5cm;"><p class="P82" style="margin-left:0cm;">Copy the registry containing the type library into the <span class="wwwftpemail">&lt;OfficePath&gt;/program</span> directory, if needed and available. </p></li>
   <li class="P82" style="margin-left:2.5cm;"><p class="P82" style="margin-left:0cm;">Copy the registry containing the component registration information into the <span class="wwwftpemail">&lt;OfficePath&gt;/program directory, </span>if required. Otherwise, register the component with the <span class="wwwftpemail">regcomp</span> command line tool coming with the OpenOffice.org SDK into a new registry.</p></li>
   <li class="P82" style="margin-left:2.5cm;"><p class="P82" style="margin-left:0cm;">Modify the <span class="wwwftpemail">uno(.ini|rc) </span>file, and add the type registry to the UNO_TYPES variable and the component registry to the UNO_SERVICES variable. The new <span class="wwwftpemail">uno(.ini|rc)</span> might look like this:</p></li>
  </ol>
  <p class="Code">[Bootstrap]<br />UNO_TYPES=$ORIGIN/types.rdb $ORIGIN/filterxyz_types.rdb<br />UNO_SERVICES=$ORIGIN/services.rdb $ORIGIN/filterxyz_services.rdb</p>
  <p class="Paragraph">After these changes are made, every office that is restarted can use the new component. The <span class="wwwftpemail">uno(.ini|rc)</span> changes directly affect the whole office network installation. If adding a component only for a single user, pass the modified UNO_TYPES and UNO_SERVICES variables per command line. An example might be:</p>
  <p class="Output">$ soffice â-env:UNO_TYPES=$ORIGIN/types.rdb $ORIGIN/filterxyz_types.rdbâ Â </p>
  <p class="Output">Â  Â  Â  Â  Â  â-env:UNO_SERVICES=$ORIGIN/services.rdb </p>
  <p class="Output">$ORIGIN/filter_xyz_services.rdbâ ).Â </p>
  <h3 class="Head3"><a name="1_9_4_Bootstrapping_a_Service_Manager" />4.9.4Â Â Bootstrapping a Service Manager</h3>
  <p class="Paragraph">Bootstrapping a service manager means to create an instance of a service manager that is able to instantiate the UNO objects needed by a user. All UNO applications, that want to use the UnoUrlResolver for connections to the office, have to bootstrap a local service manager in order to create a UnoUrlResolver object. If developers create a new language binding, for instance for a scripting engine, they have to find a way to bootstrap a service manager in the target environment.Â </p>
  <p class="Paragraph">There are many methods to bootstrap a UNO C++ application, each requiring one or more registry files to be prepared. Once the registries are prepared, there are different options available to bootstrap your application. A flexible approach is to use UNO bootstrap parameters and the <span class="Codeintext">defaultBootstrap_InitialComponentContext()</span> function.</p>
  <p class="Code">#include &lt;cppuhelper/bootstrap.hxx&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">using namespace com::sun::star::uno;Â </p>
  <p class="Code">using namespace com::sun::star::lang;Â </p>
  <p class="Code">using namespace rtl;Â </p>
  <p class="Code">using namespace cppu;<br />int main( )<br />{</p>
  <p class="Code">Â  Â  // create the initial component context</p>
  <p class="Code">Â  Â  Reference&lt; XComponentContext &gt; rComponentContext =</p>
  <p class="Code">Â  Â  Â  Â  defaultBootstrap_InitialComponentContext();</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  // retrieve the service manager from the context</p>
  <p class="Code">Â  Â  Reference&lt; XMultiComponentFactory &gt; rServiceManager = </p>
  <p class="Code">Â  Â  Â  Â  rComponentContext()-&gt;getServiceManager();</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  // instantiate a sample service with the service manager.</p>
  <p class="Code">Â  Â  Reference&lt; XInterface &gt; rInstance =</p>
  <p class="Code">Â  Â  Â  Â  rServiceManger-&gt;createInstanceWithContext( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  OUString::createFromAscii("com.sun.star.bridge.UnoUrlResolver" ),</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  rComponentContext );</p>
  <p class="Code">Â  Â  Â  Â   </p>
  <p class="Code">Â  Â  // continue to connect to the office ....</p>
  <p class="Code">}Â </p>
  <p class="Paragraph">No arguments, such as a registry name, are passed to this function. These are given using <span class="T21">bootstrap parameters</span> <span class="T1">. Bootstrap parameters can be passed through a command line, an .</span> <span class="T61">ini</span> <span class="T1">file or using environment variables.</span> </p>
  <p class="Paragraph">For bootstrapping the UNO component context, the following two variables are relevant:Â </p>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P83" style="margin-left:2.5cm;"><p class="P83" style="margin-left:0cm;"><span class="T1">UNO_TYPES<br />Gives a space separated list of type library registry files. Each registry must be given as an absolute or relative file url. Note that some special characters within the path require encoding, for example, a space must become a %20</span>. <span class="T1">The registries are opened in read-only.</span> </p></li>
   <li class="P83" style="margin-left:2.5cm;"><p class="P83" style="margin-left:0cm;">UNO_SERVICES<br />Gives a space separated list of registry files with component registration information. The registries are opened in read-only. The same registry may appear in UNO_TYPES and UNO_SERVICES variables.</p></li>
  </ol>
  <p class="Paragraph">An absolute file URL must begin with the <span class="wwwftpemail">file:/// prefix </span>(on windows, it must look like <span class="wwwftpemail">file:///c:/mytestregistry.rdb</span>). To make a file URL relative, the <span class="wwwftpemail">file:/// prefix</span> must be omitted. The relative url is interpreted relative to the current working directory.</p>
  <p class="Paragraph">Within the paths, use special placeholders.Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table17"><colgroup><col width="231" /><col width="523" /></colgroup><tr><td style="text-align:left;width:5.064cm; " class="Table17A1">
      <p class="TableHead">Bootstrap variableÂ </p>
     </td><td style="text-align:left;width:11.442cm; " class="Table17B1">
      <p class="TableHead">MeaningÂ </p>
     </td></tr><tr><td style="text-align:left;width:5.064cm; " class="Table17A2">
     <p class="TextInTable">$SYSUSERHOMEÂ </p>
    </td><td style="text-align:left;width:11.442cm; " class="Table17B2">
     <p class="TextInTable">Path of the user's home directory (see osl_getHomeDir())Â </p>
    </td></tr><tr><td style="text-align:left;width:5.064cm; " class="Table17A2">
     <p class="TextInTable">$SYSBINDIR Â </p>
    </td><td style="text-align:left;width:11.442cm; " class="Table17B2">
     <p class="TextInTable">Path to the directory of the current executable.Â </p>
    </td></tr><tr><td style="text-align:left;width:5.064cm; " class="Table17A2">
     <p class="TextInTable">$ORIGINÂ </p>
    </td><td style="text-align:left;width:11.442cm; " class="Table17B2">
     <p class="TextInTable">Path to the directory of the <span class="wwwftpemail">ini/rc</span> file.</p>
    </td></tr><tr><td style="text-align:left;width:5.064cm; " class="Table17A2">
     <p class="TextInTable">$SYSUSERCONFIGÂ </p>
    </td><td style="text-align:left;width:11.442cm; " class="Table17B2">
     <p class="TextInTable">Path to the directory where the user's configuration data is stored (see osl_getConfigDir())Â </p>
    </td></tr></table></div>
  <p class="Paragraph">The advantage of this method is that the executable can be configured after it has been built. The OpenOffice.org bootstraps the service manager with this mechanism. Â </p>
  <p class="Paragraph">Consider the following example:Â </p>
  <p class="Paragraph">A tool needs to be written that converts documents between different formats. This is achieved by connecting to OpenOffice.org and doing the necessary conversions. The tool is named <span class="wwwftpemail">docconv</span>. In the code, the <span class="Codeintext">defaultBootstrap_InitialComponentContext()</span> function is used as described above to create the component context. Two registries are prepared: <span class="wwwftpemail">docconv_services.rdb</span> with the registered components and <span class="wwwftpemail">types.rdb </span>that contains the types coming with OpenOffice.org. Both files are placed beside the executable. The easiest method to configure the application is to create a <span class="wwwftpemail">docconv(.ini|rc)</span> ascii file in the same folder as your executable, that contains the following two lines:</p>
  <p class="Code">UNO_TYPES=$ORIGIN/types.rdbÂ </p>
  <p class="Code">UNO_SERVICES=$ORIGIN/docconv_services.rdbÂ </p>
  <p class="Paragraph">No matter where the application is started form, it will always use the mentioned registries. Note that this also works on different machines when the volume is mapped to different location mount points as $SYSBINDIR is evaluated at runtime.Â </p>
  <p class="Paragraph">The second possibility is to set UNO_TYPES and UNO_SERVICES as environment variables, but this method has drawbacks. All UNO applications started with this shell use the same registries.Â </p>
  <p class="Paragraph">The third possibility is to pass the variables as command line parameters, for instanceÂ </p>
  <p class="Code">docconv -env:UNO_TYPES=$ORIGIN/types.rdb -env:Â </p>
  <p class="Code">UNO_SERVICES=$ORIGIN/docconv_services.rdbÂ </p>
  <p class="Paragraph">Note that on UNIX shells, you need to quote the $ with a backslash \.Â </p>
  <p class="Paragraph">The command line arguments do not need to be passed to the UNO runtime, because it is generally retrieved from some static variables. How this is done depends on the operating system, but it is hidden from the programmer. The <span class="wwwftpemail">docconv</span> executable should ignore all command line parameters beginning with '-env:'. The easiest way to do this is to ignore <span class="Codeintext">argc</span> and <span class="Codeintext">argv[] </span>and to use the <span class="Codeintext">rtl_getCommandLineArg()</span> functions defined in <span class="wwwftpemail">rtl/process.h</span> header instead which automatically strips the additional parameters.</p>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P84" style="margin-left:2.5cm;"><p class="P84" style="margin-left:0cm;">Combine the methods mentioned above. Command line parameters take precedence over .<span class="wwwftpemail">ini</span> file variables and .<span class="wwwftpemail">ini</span> file parameter take precedence over environment variables. That way, it is possible to overwrite the UNO_SERVICES variable on the command line for one invocation of the program only.</p></li>
  </ol>
  <h3 class="Head3"><a name="1_9_5_Special_Service_Manager_Configurations" />4.9.5Â Â Special Service Manager Configurations</h3>
  <p class="Paragraph">The <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/container/XSet.html" title="see type com.sun.star.container.XSet">com.sun.star.container.XSet</a></span> interface allows the insertion or removal of <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XSingleServiceFactory.html" title="see type com.sun.star.lang.XSingleServiceFactory">com.sun.star.lang.XSingleServiceFactory</a></span> or <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XSingleComponentFactory.html" title="see type com.sun.star.lang.XSingleComponentFactory">com.sun.star.lang.XSingleComponentFactory</a></span> implementations into or from the service manager at runtime without making these changes persistent. When the office applications terminate, all the changes are lost. The inserted object must support the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XServiceInfo.html" title="see type com.sun.star.lang.XServiceInfo">com.sun.star.lang.XServiceInfo</a></span> interface. This interface returns the same information as the XServiceInfo interface of the component implementation which is created by the component factory.</p>
  <p class="Paragraph">With this feature, a running office can be connected, a new factory inserted into the service manager and the new service instantiated without registering it beforehand. This method of hard coding the registered services is not acceptable with OpenOffice.org, because it must be extended after compilation. Â </p>
  <p class="Paragraph">Java applications can use a native persistent service manager in their own process using JNI (see <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_4_1_Java_Language_Binding" title="see chapter 3.4.1 Professional UNO - UNO Language Bindings - Java Language Binding">3.4.1 Professional UNO - UNO Language Bindings - Java Language Binding</a></span>), or in a remote process. But note, that all services will be instantiated in this remote process.</p>
  <h4 class="Head4"><a name="1_9_5_1_Dynamically_Modifying_the_Service_Manager" />Dynamically Modifying the Service Manager</h4>
  <p class="Paragraph">Bootstrapping in pure Java is simple, by calling the static runtime method <span class="Codeintext">createInitialComponentContext() </span>from the Bootstrap class. The following small test program shows how to insert service factories into the service manager at runtime. The sample uses the Java component from the section <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_5_6_Storing_the_Service_Manager_for_Further_Use" title="see chapter 4.5.6 Writing UNO Components - Simple Component in Java - Storing the Service Manager for Further Use">4.5.6 Writing UNO Components - Simple Component in Java - Storing the Service Manager for Further Use</a></span>. The complete code can be found with the JavaComp sample component.</p>
  <p class="Paragraph">The example shows that there is the possibility to control through command line parameter, whether the service is inserted in the local Java service manager or the remote office service manager. If it is inserted into the office service manager, access the service through OpenOffice.org Basic. In both cases, the <span class="Emphasis">component</span> runs in the local Java process. </p>
  <p class="Paragraph">If the service is inserted into the office service manager, instantiate the component through OpenOffice.org Basic calling <span class="Codeintext">createUnoService("</span> <span class="T54">JavaTestComponentB"),</span> <span class="T1">as long as the Java process is not terminated. Note, to add the new types to the office process by one of the above explained mechanisms, use uno.ini.</span> </p>
  <p class="P17">Â  Â  public static void insertIntoServiceManager(</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  XMultiComponentFactory serviceManager, Object singleFactory)</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  throws com.sun.star.uno.Exception {</p>
  <p class="P10">Â  Â  Â  Â  XSet set = (XSet ) UnoRuntime.queryInterface(XSet.class, serviceManager);</p>
  <p class="P10">Â  Â  Â  Â  set.insert(singleFactory);</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  public static void removeFromServiceManager(</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  XMultiComponentFactory serviceManager, Object singleFactory)</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  throws com.sun.star.uno.Exception {</p>
  <p class="P10">Â  Â  Â  Â  XSet set = (XSet) UnoRuntime.queryInterface( XSet.class, serviceManager);</p>
  <p class="P10">Â  Â  Â  Â  set.remove(singleFactory);</p>
  <p class="P10">Â  Â  Â  Â  </p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P85">Â  Â  public static void main(String[] args) throws java.lang.Exception {</p>
  <p class="P85">Â  Â  Â  Â  if (args.length != 1) {</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  System.out.println("usage: RunComponent local|uno-url");</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  System.exit(1);</p>
  <p class="P85">Â  Â  Â  Â  }</p>
  <p class="P85">Â  Â  Â  Â  XComponentContext xLocalComponentContext =</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  Bootstrap.createInitialComponentContext(null);</p>
  <p class="P85">Â  Â  Â  Â  </p>
  <p class="P85">Â  Â  Â  Â  // initial serviceManager</p>
  <p class="P85">Â  Â  Â  Â  XMultiComponentFactory xLocalServiceManager = xLocalComponentContext.getServiceManager();</p>
  <p class="P85">Â  Â  Â  Â  </p>
  <p class="P85">Â  Â  Â  Â  XMultiComponentFactory xUsedServiceManager = null;</p>
  <p class="P85">Â  Â  Â  Â  XComponentContext xUsedComponentContext = null;</p>
  <p class="P85">Â  Â  Â  Â  if (args[0].equals("local")) {</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  xUsedServiceManager = xLocalServiceManager;</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  xUsedComponentContext = xLocalComponentContext;</p>
  <p class="P85">Â </p>
  <p class="P85">Â  Â  Â  Â  Â  Â  System.out.println("Using local servicemanager");</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  // now the local servicemanager is used !</p>
  <p class="P85">Â  Â  Â  Â  }</p>
  <p class="P85">Â  Â  Â  Â  else {</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  // otherwise interpret the string as uno-url</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  Object xUrlResolver = xLocalServiceManager.createInstanceWithContext(</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.bridge.UnoUrlResolver", xLocalComponentContext);</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  XUnoUrlResolver urlResolver = (XUnoUrlResolver) UnoRuntime.queryInterface(</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  Â  Â  XUnoUrlResolver.class, xUrlResolver);</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  Object initialObject = urlResolver.resolve(args[0]);</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  xUsedServiceManager = (XmultiComponentFactory) UnoRuntime.queryInterface(</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  Â  Â  XMultiComponentFactory.class, initialObject);</p>
  <p class="P85">Â </p>
  <p class="P85">Â  Â  Â  Â  Â  Â  System.out.println("Using remote servicemanager");</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  // now the remote servicemanager is used. </p>
  <p class="P85">Â  Â  Â  Â  }</p>
  <p class="P85">Â </p>
  <p class="P85">Â  Â  Â  Â  // retrieve the factory for the component implementation</p>
  <p class="P85">Â  Â  Â  Â  Object factory = TestServiceProvider.__getServiceFactory(</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  "componentsamples.TestComponentB", null, null);</p>
  <p class="P85">Â </p>
  <p class="P85">Â  Â  Â  Â  // insert the factory into the servicemanager</p>
  <p class="P85">Â  Â  Â  Â  // from now on, the service can be instantiated !</p>
  <p class="P85">Â  Â  Â  Â  insertIntoServiceManager( xUsedServiceManager, factory );</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  </p>
  <p class="P85">Â  Â  Â  Â  // Now instantiate one of the services via the servicemanager !</p>
  <p class="P85">Â  Â  Â  Â  Object objTest= xUsedServiceManager.createInstanceWithContext(</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  "JavaTestComponentB",xUsedComponentContext);</p>
  <p class="P85">Â </p>
  <p class="P85">Â  Â  Â  Â  // query for the service interface</p>
  <p class="P85">Â  Â  Â  Â  XSomethingB xs= (XSomethingB) UnoRuntime.queryInterface(</p>
  <p class="P85">Â  Â  Â  Â  Â  Â  XSomethingB.class, objTest);</p>
  <p class="P85">Â </p>
  <p class="P85">Â  Â  Â  Â  // and call the test method.</p>
  <p class="P85">Â  Â  Â  Â  String s= xs.methodOne("Hello World");</p>
  <p class="P85">Â  Â  Â  Â  System.out.println(s);</p>
  <p class="P85">Â </p>
  <p class="P85">Â  Â  Â  Â  // wait until return is pressed </p>
  <p class="P85">Â  Â  Â  Â  System.out.println( "Press return to terminate" );</p>
  <p class="P85">Â  Â  Â  Â  while (System.in.read() != 10);</p>
  <p class="P85">Â </p>
  <p class="P85">Â  Â  Â  Â  // remove it again from the servicemanager, otherwise we have</p>
  <p class="P85">Â  Â  Â  Â  // a dangling reference ( in case we use the remote service manager )</p>
  <p class="P85">Â  Â  Â  Â  removeFromServiceManager( xUsedServiceManager, factory );</p>
  <p class="P85">Â </p>
  <p class="P85">Â  Â  Â  Â  // quit, even when a remote bridge is running</p>
  <p class="P85">Â  Â  Â  Â  System.exit(0);</p>
  <p class="P85">Â  Â  }</p>
  <h4 class="Head4"><a name="1_9_5_2_Creating_a_ServiceManager_from_a_Given_Registry_File" />Creating a ServiceManager from a Given Registry File</h4>
  <p class="Paragraph">To create a service manager from a given registry, use a single registry that contains the type library and component registration information. Hard code the name of the registry in the program and use the <span class="Codeintext">createRegistryServiceFactory()</span> function located in the cppuhelper library.</p>
  <p class="Code">Â </p>
  <p class="Code">#include &lt;cppuhelper/servicefactory.hxx&gt;Â </p>
  <p class="Code">Â </p>
  <p class="Code">using namespace com::sun::star::uno;Â </p>
  <p class="Code">using namespace com::sun::star::lang;Â </p>
  <p class="Code">using namespace rtl;Â </p>
  <p class="Code">using namespace cppu;<br />int main( )<br />{</p>
  <p class="Code">Â  Â  // create the service manager on the registry test.rdb</p>
  <p class="Code">Â  Â  Reference&lt; XMultiServiceFactory &gt; rServiceManager = </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  createRegistryServiceFactory( OUString::createFromAscii( âtest.rdbâ ) );</p>
  <p class="Code">Â </p>
  <p class="Code">Â  Â  // instantiate a sample service with the service manager.</p>
  <p class="Code">Â  Â  Reference&lt; XInterface &gt; rInstance =</p>
  <p class="Code">Â  Â  Â  Â  Â  Â  Â  Â  rServiceManger-&gt;createInstance( </p>
  <p class="Code">Â  Â  Â  Â  Â  Â  OUString::createFromAscii(âcom.sun.star.bridge.UnoUrlResolverâ ) );</p>
  <p class="Code">Â  Â  Â  Â   </p>
  <p class="Code">Â  Â  // continue to connect to the office ....</p>
  <p class="Code">}Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table23"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table23A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./4 Writing UNO Components_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table23B1">
      <p class="TipInTable">This instantiates the old style service manager without the possibility of offering a component context. In future versions, (642) you will be able to use the new service manager here.Â </p>
     </td></tr></table></div>
  <p class="Paragraph">Â </p>
  <h2 class="Head2"><a name="1_10_The_UNO_Executable" />4.10Â Â The UNO Executable </h2>
  <p class="Paragraph">In chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_4_2_C_2B_2B_Language_Binding" title="see chapter 3.4.2 Professional UNO - UNO Language Bindings - C++ Language Binding">3.4.2 Professional UNO - UNO Language Bindings - C++ Language Binding</a></span>, several methods to bootstrap a UNO application were introduced. In this section, the option UNO executable is discussed. With UNO executable, there is no need to write executables anymore, instead only components are developed. Code within executables is <span class="T22">locked up</span>, it can only run by starting the executable, and it can never be used in another context. Components offer the advantage that they can be used from anywhere. They can be executed from Java or from a remote process.</p>
  <p class="Paragraph">For these cases, the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XMain.html" title="see type com.sun.star.lang.XMain">com.sun.star.lang.XMain</a></span> interface was introduced. It has one method:</p>
  <p class="Code">/* module com.sun.star.lang.XMain */Â </p>
  <p class="Code">interface XMain: com::sun::star::uno::XInterfaceÂ </p>
  <p class="Code">{Â </p>
  <p class="Code">Â  Â  long run( [in] sequence&lt; string &gt; aArguments ); </p>
  <p class="Code">};Â </p>
  <p class="Paragraph">Instead of writing an executable, write a component and implement this interface. The component gets the fully initialized service manager during instantiation. The <span class="Codeintext">run()</span> method then should do what a <span class="Codeintext">main()</span> function would have done. The UNO executable offers one possible infrastructure for using such components. </p>
  <p class="Paragraph">Basically, the <span class="wwwftpemail">uno</span> tool can do two different things:</p>
  <ol style="margin-left:0.5cm;list-style-type:decimal; ">
   <li class="P86" style="margin-left:2.5cm;"><p class="P86" style="margin-left:0cm;">Instantiate a UNO component which supports the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XMain.html" title="see type com.sun.star.lang.XMain">com.sun.star.lang.XMain</a></span> interface and executes the <span class="Codeintext">run()</span> method.</p><p class="P87" style="margin-left:0cm;">// module com::sun::star::lang<br />interface XMain: com::sun::star::uno::XInterface<br />{<br /> Â  Â long run( [in] sequence&lt; string &gt; aArguments ); <br />};</p></li>
   <li class="P86" style="margin-left:2.5cm;"><p class="P86" style="margin-left:0cm;">Export a UNO component to another process by accepting on a resource, such as a tcp/ip socket or named pipe, and instantiating it on demand.Â </p></li>
  </ol>
  <p class="Paragraph">In both cases, the <span class="wwwftpemail">uno</span> executable creates a UNO component context which is handed to the instantiated component. The registries that should be used are given by command line arguments. The goal of this tool is to minimize the need to write executables and focus on writing components. The advantage for component implementations is that they do not care how the component context is bootstrapped. In the future there may be more ways to bootstrap the component context. While executables will have to be adapted to use the new features, a component supporting <span class="Codeintext">XMain</span> can be reused.</p>
  <h4 class="Head4"><a name="1_10_0_1_Standalone_Use_Case" />Standalone Use Case</h4>
  <p class="Paragraph">Simply typing uno gives the following usage screen :Â </p>
  <p class="Output">uno (-c ComponentImplementationName -l LocationUrl | -s ServiceName)<br /> Â  Â [-ro ReadOnlyRegistry1] [-ro ReadOnlyRegistry2] ... [-rw ReadWriteRegistry]<br /> Â  Â [-u uno:(socket[,host=HostName][,port=nnn]|pipe[,name=PipeName]);urp;Name<br /> Â  Â  Â  Â [--singleaccept] [--singleinstance]]<br /> Â  Â [-- Argument1 Argument2 ...]</p>
  <p class="Output">Â </p>
  <p class="TitledListHead">Choosing the implementation to be instantiatedÂ </p>
  <p class="TitledListBody">Using the option -s servicename gives the name of the service which shall be instantiated. The uno executable then tries to instantiate a service by this name, using the registries as listed below.Â </p>
  <p class="TitledListBody">Alternatively, the -l and -c options can be used. The -l gives an url to the location of the shared library or .<span class="wwwftpemail">jar</span> file, and -c the name of the desired service implementation inside the component. Remember that a component may contain more than one implementation.</p>
  <p class="TitledListHead">Choosing the registries for the component context (optional)Â </p>
  <p class="TitledListBody">With the option -ro, give a file url to a registry file containing component's registration information and/or type libraries. The -ro option can be given multiple times. The -rw option can only be given once and must be the name of a registry with read/write access. It will be used when the instantiated component tries to register components at runtime. This option is rarely needed.Â </p>
  <p class="TitledListBody">Note that the uno tool ignores bootstrap variables, such as UNO_TYPES and UNO_SERVICES.Â </p>
  <p class="TitledListHead">The UNO URL (optional)Â </p>
  <p class="TitledListBody">Giving a UNO URL causes the uno tool to start in server mode, then it accepts on the connection part of the UNO URL. In case another process connects to the resource (tcp/ip socket or named pipe), it establishes a UNO interprocess bridge on top of the connection (see also <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_3_1_UNO_Interprocess_Connections" title="see chapter 3.3.1 Professional UNO - UNO Concepts - UNO Interprocess Connections">3.3.1 Professional UNO - UNO Concepts - UNO Interprocess Connections</a></span>). Note that <span class="Emphasis">urp</span> should always be used as protocol. An instance of the component is instantiated when the client requests a named object using the name, which was given in the last part of the UNO URL.</p>
  <p class="TitledListHead">Option <span class="Codeintext">--singleaccept</span> </p>
  <p class="TitledListBody">Only meaningful when a UNO URL is given. It tells the <span class="wwwftpemail">uno</span> executable to accept only one connection, thus blocking any further connection attempts.</p>
  <p class="TitledListHead">Option <span class="Codeintext">--singleinstance</span> </p>
  <p class="TitledListBody">Only meaningful when a UNO URL is given. It tells the uno executable to always return the same (first) instance of the component, thus multiple processes communicate to the same instance of the implementation. If the option is not given, every <span class="Codeintext">getInstance(</span>) call at the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/bridge/XBridge.html" title="see type com.sun.star.bridge.XBridge">com.sun.star.bridge.XBridge</a></span> interface instantiates a new object.</p>
  <p class="TitledListHead">Option <span class="Codeintext">--</span> (double dash)</p>
  <p class="TitledListBody">Everything following <span class="Codeintext">â-</span> is interpreted as an option for the component itself. The arguments are passed to the component through the <span class="Codeintext">initialize() </span>call of <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XInitialization.html" title="see type com.sun.star.lang.XInitialization">com.sun.star.lang.XInitialization</a></span> interface.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table4"><colgroup><col width="119" /><col width="751" /></colgroup><tr><td style="text-align:left;width:2.596cm; " class="Table4A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./4 Writing UNO Components_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:16.454cm; " class="Table4B1">
      <p class="TipInTable">The uno executable currently does not support the bootstrap variable concept as introduced by <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_4_2_C_2B_2B_Language_Binding" title="see chapter 3.4.2 Professional UNO - UNO Language Bindings - C++ Language Binding">3.4.2 Professional UNO - UNO Language Bindings - C++ Language Binding</a></span>. The uno registries must be given explicitly given by command line.</p>
     </td></tr></table></div>
  <p class="Paragraph">The following example shows how to implement a Java component suitable for the uno executable.Â </p>
  <p class="P17">Â </p>
  <p class="P10">import com.sun.star.uno.XComponentContext;Â </p>
  <p class="P10">import com.sun.star.comp.loader.FactoryHelper;Â </p>
  <p class="P10">import com.sun.star.lang.XSingleServiceFactory;Â </p>
  <p class="P10">import com.sun.star.lang.XMultiServiceFactory;Â </p>
  <p class="P10">import com.sun.star.registry.XRegistryKey;Â </p>
  <p class="P10">Â </p>
  <p class="P10">public class UnoExeMain implements com.sun.star.lang.XMainÂ </p>
  <p class="P10">{Â </p>
  <p class="P10">Â  Â  final static String __serviceName = "MyMain";</p>
  <p class="P10">Â  Â  XComponentContext _ctx;</p>
  <p class="P10">Â  Â  </p>
  <p class="P10">Â  Â  public UnoExeMain( XComponentContext ctx )</p>
  <p class="P10">Â  Â  {</p>
  <p class="P10">Â  Â  Â  Â  // in case we would need the component context !</p>
  <p class="P10">Â  Â  Â  Â  _ctx = ctx;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  public int run( /*IN*/String[] aArguments )</p>
  <p class="P10">Â  Â  {</p>
  <p class="P10">Â  Â  Â  Â  System.out.println( "Hello world !" );</p>
  <p class="P10">Â  Â  Â  Â  return 0;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â </p>
  <p class="P10">Â  Â  public static XSingleServiceFactory __getServiceFactory(</p>
  <p class="P10">Â  Â  Â  Â  String implName, XMultiServiceFactory multiFactory, XRegistryKey regKey)</p>
  <p class="P10">Â  Â  {</p>
  <p class="P10">Â  Â  Â  Â  XSingleServiceFactory xSingleServiceFactory = null;</p>
  <p class="P10">Â  Â  Â  Â  </p>
  <p class="P10">Â  Â  Â  Â  if (implName.equals(UnoExeMain.class.getName()))</p>
  <p class="P10">Â  Â  Â  Â  {</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  xSingleServiceFactory =</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  FactoryHelper.getServiceFactory(</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  UnoExeMain.class, UnoExeMain.__serviceName, multiFactory, regKey);</p>
  <p class="P10">Â  Â  Â  Â  }</p>
  <p class="P10">Â  Â  Â  Â  return xSingleServiceFactory;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">Â  Â  </p>
  <p class="P10">Â  Â  public static boolean __writeRegistryServiceInfo(XRegistryKey regKey)</p>
  <p class="P10">Â  Â  {</p>
  <p class="P10">Â  Â  Â  Â  boolean b = FactoryHelper.writeRegistryServiceInfo(</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  UnoExeMain.class.getName(),</p>
  <p class="P10">Â  Â  Â  Â  Â  Â  UnoExeMain.__serviceName, regKey);</p>
  <p class="P10">Â  Â  Â  Â  return b;</p>
  <p class="P10">Â  Â  }</p>
  <p class="P10">}Â </p>
  <p class="P10">Â </p>
  <p class="Paragraph">The class itself inherits from <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XMain.html" title="see type com.sun.star.lang.XMain">com.sun.star.lang.XMain</a></span>. It implements a constructor with the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XComponentContext.html" title="see type com.sun.star.uno.XComponentContext">com.sun.star.uno.XComponentContext</a></span> interface and stores the component context for future use. Within its <span class="Codeintext">run()</span> method, it prints 'Hello World'. The last two mandatory functions are responsible for instantiating the component and writing component information into a registry. Refer to <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/Components.xhtml#1_5_6_Storing_the_Service_Manager_for_Further_Use" title="see chapter 4.5.6 Writing UNO Components - Simple Component in Java - Storing the Service Manager for Further Use">4.5.6 Writing UNO Components - Simple Component in Java - Storing the Service Manager for Further Use</a></span> for further information.</p>
  <p class="Paragraph">The code needs to be compiled and put into a .<span class="wwwftpemail">jar</span> file with an appropriate manifest file:</p>
  <p class="Code">RegistrationClassName: UnoExeMainÂ </p>
  <p class="Paragraph">These commands create the jar:Â </p>
  <p class="Output">javac UnoExeMain<br />jar -cvfm UnoExeMain.jar Manifest UnoExeMain.class</p>
  <p class="Paragraph">To be able to use it, register it with the following command line into a separate registry file (here <span class="wwwftpemail">test.rdb</span>). The <span class="wwwftpemail">&lt;OfficePath&gt;/program</span> directory needs to be the current directory, and the <span class="wwwftpemail">regcomp</span> and <span class="wwwftpemail">uno</span> tools must have been copied into this directory.</p>
  <p class="Output">regcomp -register \<br /> Â  Â  Â  Â  -br &lt;officepath&gt;/program/services.rdb \<br /> Â  Â  Â  Â  -r test.rdb \<br /> Â  Â  Â  Â  -c file:///c:/devmanual/Develop/samples/unoexe/UnoExeMain.jar \<br /> Â  Â  Â  Â  -l com.sun.star.loader.Java2</p>
  <p class="Paragraph">The \ means command line continuation.Â </p>
  <p class="Paragraph">The component can now be run: Â </p>
  <p class="Output">uno -s MyMain -ro types.rdb -ro services.rdb -ro test.rdb Â </p>
  <p class="Paragraph">This command should give the output "hello world !"Â </p>
  <h4 class="Head4"><a name="1_10_0_2_Server_Use_Case" />Server Use Case</h4>
  <p class="P4">This use case enables the export of any arbitrary UNO component as a remote server. As an example, the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/io/Pipe.html" title="see type com.sun.star.io.Pipe">com.sun.star.io.Pipe</a></span> service is used which is already implemented by a component coming with the office. It exports an <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/io/XOutputStream.html" title="see type com.sun.star.io.XOutputStream">com.sun.star.io.XOutputStream</a></span> and a <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/io/XInputStream.html" title="see type com.sun.star.io.XInputStream">com.sun.star.io.XInputStream</a></span> interface. The data is written through the output stream into the pipe and the same data from the input stream is read again. To export this component as a remote server, switch to the <span class="wwwftpemail">&lt;OfficePath&gt;/program</span> directory and issue the following command line.</p>
  <p class="Output">i:\o641l\program&gt;uno -s com.sun.star.io.Pipe -ro types.rdb -ro services.rdb -u uno:socket,host=0,port=2002;urp;testÂ </p>
  <p class="Output">Â </p>
  <p class="Output">&gt; accepting socket,host=0,port=2083...Â </p>
  <p class="Paragraph">Now a client program can connect to the server. A client may look like the following:Â </p>
  <p class="P88">import com.sun.star.lang.XServiceInfo;Â </p>
  <p class="P89">import com.sun.star.uno.XComponentContext;Â </p>
  <p class="P89">import com.sun.star.bridge.XUnoUrlResolver;Â </p>
  <p class="P89">import com.sun.star.io.XOutputStream;Â </p>
  <p class="P89">import com.sun.star.io.XInputStream;Â </p>
  <p class="P89">import com.sun.star.uno.UnoRuntime;Â </p>
  <p class="P89">Â </p>
  <p class="P89">// Note: This example does not do anything meaningful, it shall just show,Â </p>
  <p class="P89">// Â  Â  Â  how to import an arbitrary UNO object from a remote process.</p>
  <p class="P89">class UnoExeClient {Â </p>
  <p class="P89">Â  Â  public static void main(String [] args) throws java.lang.Exception {</p>
  <p class="P89">Â  Â  Â  Â  if (args.length != 1) {</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  System.out.println("Usage : java UnoExeClient uno-url");</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  System.out.println(" Â  The imported object must support the com.sun.star.io.Pipe service");</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  return;</p>
  <p class="P89">Â  Â  Â  Â  }</p>
  <p class="P89">Â </p>
  <p class="P89">Â  Â  Â  Â  XComponentContext ctx =</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  com.sun.star.comp.helper.Bootstrap.createInitialComponentContext(null);</p>
  <p class="P89">Â </p>
  <p class="P89">Â  Â  Â  Â  // get the UnoUrlResolver service</p>
  <p class="P89">Â  Â  Â  Â  Object o = ctx.getServiceManager().createInstanceWithContext(</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  "com.sun.star.bridge.UnoUrlResolver" , ctx);</p>
  <p class="P89">Â  Â  Â  Â  XUnoUrlResolver resolver = (XUnoUrlResolver) UnoRuntime.queryInterface(</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  XUnoUrlResolver.class, o);</p>
  <p class="P89">Â </p>
  <p class="P89">Â  Â  Â  Â  // connect to the remote server and retrieve the appropriate object</p>
  <p class="P89">Â  Â  Â  Â  o = resolver.resolve(args[0]);</p>
  <p class="P89">Â </p>
  <p class="P89">Â  Â  Â  Â  // Check if we got what we expected</p>
  <p class="P89">Â  Â  Â  Â  // Note: This is not really necessary, you can also use the try and error approach </p>
  <p class="P89">Â  Â  Â  Â  XServiceInfo serviceInfo = (XServiceInfo) UnoRuntime.queryInterface(XServiceInfo.class,o);</p>
  <p class="P89">Â  Â  Â  Â  if (serviceInfo == null) {</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  throw new com.sun.star.uno.RuntimeException(</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  Â  Â  "error: The object imported with " + args[0] + " did not support XServiceInfo", null);</p>
  <p class="P89">Â  Â  Â  Â  }</p>
  <p class="P89">Â </p>
  <p class="P89">Â  Â  Â  Â  if (!serviceInfo.supportsService("com.sun.star.io.Pipe")) {</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  throw new com.sun.star.uno.RuntimeException(</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  Â  Â  "error: The object imported with "+args[0]+" does not support the pipe service", null);</p>
  <p class="P89">Â  Â  Â  Â  }</p>
  <p class="P89">Â </p>
  <p class="P89">Â  Â  Â  Â  XOutputStream output = (XOutputStream) UnoRuntime.queryInterface(XOutputStream.class,o);</p>
  <p class="P89">Â  Â  Â  Â  XInputStream input = (XInputStream) UnoRuntime.queryInterface(XInputStream.class,o);</p>
  <p class="P89">Â </p>
  <p class="P89">Â  Â  Â  Â  // construct an array.</p>
  <p class="P89">Â  Â  Â  Â  byte[] array = new byte[]{1,2,3,4,5};</p>
  <p class="P89">Â </p>
  <p class="P89">Â  Â  Â  Â  // send it to the remote object</p>
  <p class="P89">Â  Â  Â  Â  output.writeBytes(array);</p>
  <p class="P89">Â  Â  Â  Â  output.closeOutput();</p>
  <p class="P89">Â </p>
  <p class="P89">Â  Â  Â  Â  // now read it again in two blocks</p>
  <p class="P89">Â  Â  Â  Â  byte [][] read = new byte[1][0];</p>
  <p class="P89">Â  Â  Â  Â  System.out.println("Available bytes : " + input.available());</p>
  <p class="P89">Â  Â  Â  Â  input.readBytes( read,2 );</p>
  <p class="P89">Â  Â  Â  Â  System.out.println("read " + read[0].length + ":" + read[0][0] + "," + read[0][1]);</p>
  <p class="P89">Â  Â  Â  Â  System.out.println("Available bytes : " + input.available());</p>
  <p class="P89">Â  Â  Â  Â  input.readBytes(read,3);</p>
  <p class="P89">Â  Â  Â  Â  System.out.println("read " + read[0].length + ":" + read[0][0] +</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  "," + read[0][1] + "," + read[0][2]);</p>
  <p class="P89">Â </p>
  <p class="P89">Â  Â  Â  Â  System.out.println("Terminating client");</p>
  <p class="P89">Â  Â  Â  Â  System.exit(0);</p>
  <p class="P89">Â  Â  }</p>
  <p class="P89">}Â </p>
  <p class="Paragraph">After bootstrapping the component context, the <span class="Codeintext">UnoUrlResolver</span> service is instantiated to access remote objects. After resolving the remote object, check whether it really supports the <span class="Codeintext">Pipe</span> service. For instance, try to connect this client to a running OpenOffice.org â this check will fail. A <span class="Codeintext">byte array</span> with five elements is written to the remote server and read again with two <span class="Codeintext">readBytes()</span> calls. Starting the client with the following command line connects to the server started above. You should get the following output:</p>
  <p class="Output">I:\tmp&gt;java UnoExeClient uno:socket,host=localhost,port=2083;urp;testÂ </p>
  <p class="Output">Available bytes : 5Â </p>
  <p class="Output">read 2:1,2Â </p>
  <p class="Output">Available bytes : 3Â </p>
  <p class="Output">read 3:3,4,5Â </p>
  <p class="Output">Terminating clientÂ </p>
  <h4 class="Head4"><a name="1_10_0_3_Using_the_uno_Executable" />Using the uno Executable</h4>
  <p class="Paragraph">The main benefit of using the <span class="wwwftpemail">uno</span> tool as a replacement for writing executables is that the service manager initialization is separated from the task-solving code and the component can be reused. For example, to have multiple <span class="Codeintext">XMain</span> implementations run in parallel in one process. There is more involved when writing a component compared to writing an executable. With the bootstrap variable mechanism there is a lot of freedom in bootstrapping the service manager (see chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml#1_4_2_C_2B_2B_Language_Binding" title="see chapter 3.4.2 Professional UNO - UNO Language Bindings - C++ Language Binding">3.4.2 Professional UNO - UNO Language Bindings - C++ Language Binding</a></span>).</p>
  <p class="Paragraph">The <span class="wwwftpemail">uno</span> tool is a good starting point when exporting a certain component as a remote server. However, when using the UNO technology later, the tool does have some disadvantages, such as multiple objects can not be exported or the component can only be initialized with command line arguments. If the <span class="wwwftpemail">uno</span> tool becomes insufficient, the listening part in an executable will have to be re-implemented.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table27"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table27A1">
      <div class="TableContents"><img width="39" height="39" alt="Note graphics marks a special text section" src="./4 Writing UNO Components_files/interesting.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table27B1">
      <p class="TipInTable">To instantiate Java components in build version 641, you need a complete setup so that the uno executable can find the java.ini file.Â </p>
     </td></tr></table></div>
  <h2 class="Head2"><a name="1_11_Accessing_Dialogs" />4.11Â Â Accessing Dialogs</h2>
  <p class="Paragraph">This chapter describes how UNO Components can interact with dialogs that have been created with the Dialog Editor integrated in the <span class="T62">OpenOffice.org </span>Basic IDE. Before OpenOffice.org 2.0.4 dialogs designed with this Dialog Editor could only be reasonably used in the context of OpenOffice.org Basic respectively in the scope of the Scripting Framework (see <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ScriptingFramework/ScriptingFramework.xhtml#1_Scripting_Framework" title="see chapter 19 Scripting Framework">19 Scripting Framework</a></span> <span class="T62">). The reason for this </span>restriction was the fact that only scripts managed by the Scripting Franework could be assigned as action to control events. It was already possible to instantiate dialogs using <span class="T63">the </span><span class="T64"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/XDialogProvider.html" title="see type com.sun.star.awt.XDialogProvider">com.sun.star.awt.XDialogProvider</a> </span><span class="T65">API, but there was no other way to get call backs from the events as to directly add listeners using the corresponding AWT control interfaces. This is a very inconvenient way to use dialogs created with the Dialog Editor.</span> </p>
  <p class="Paragraph"><span class="T62">From OpenOffice.org 2.0.4 also component methods can be bound to control events. The following chapters describe both </span><span class="ChapterRef"><span class="T62">how the binding to component methods is done in Dialog Editor and </span></span><span class="T62">how the component has to be designed to use this mechanism.</span> </p>
  <h3 class="Head3"><a name="1_11_1_Assigning_Component_Methods_to_Control_Events" />4.11.1Â Â Assigning Component Methods to Control Events</h3>
  <p class="Paragraph"><span class="T62">How a dialog is generally designed in the Basic IDE Dialog editor is described in </span><span class="ChapterRef"><span class="T66"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/BasicAndDialogs/BasicAndDialogs.xhtml#1_1_First_Steps_with_OpenOffice.org_Basic" title="see chapter 12.1 OpenOffice.org Basic and Dialogs - First Steps with OpenOffice.org Basic">12.1 OpenOffice.org Basic and Dialogs - First Steps with OpenOffice.org Basic</a></span></span><span class="ChapterRef"> </span><span class="T62">. The assignment of macros to control events is also described there in the sub chapter </span><span class="T67">Adding Event Handlers</span> <span class="T62">, but the </span><span class="ChapterRef"><span class="T62">Assign Action dialog showed in the </span></span><span class="T62">following illustration can also be used to bind component methods to control events.</span> </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table47"><colgroup><col width="870" /></colgroup><tr><td style="text-align:left;width:19.05cm; " class="Table47A1">
      <div class="Paragraph"><div style="width: 16.316cm; " id="Frame4" class="fr3">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/CancelButtonEvent.png" title="link to the full-sized graphic &quot;./CancelButtonEvent.png&quot;"><img border="0" width="830" height="574" alt="Screenshot of the assign action dialog with the component button" src="./4 Writing UNO Components_files/CancelButtonEvent.png" class="fr4" /></a>Illustration <a name="refIllustration10">11</a>: Assign Action dialog</div>
       </div> </div>
     </td></tr></table></div>
  <p class="P5">Instead of pressing the <span class="T68">Macro...</span> button the <span class="T68">Component...</span> button has to be used. It opens a Assign Component dialog.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table48"><colgroup><col width="870" /></colgroup><tr><td style="text-align:left;width:19.05cm; " class="Table48A1">
      <div class="Paragraph"><div style="width: 8.998cm; " id="Frame41" class="fr3">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/AssignComponent.png" title="link to the full-sized graphic &quot;./AssignComponent.png&quot;"><img border="0" width="404" height="173" alt="Screenshot of the assign component dialog where a component method is assigned" src="./4 Writing UNO Components_files/AssignComponent.png" class="fr4" /></a>Illustration <a name="refIllustration11">12</a>: Assign Component dialog</div>
       </div> </div>
     </td></tr></table></div>
  <p class="P5">Besides the standard buttons this dialog only contains an edit field to enter the name of the Component's Â method the event should be bound to. Unlike in the case of assigning macros it's not possible to browse to a component's methods because at design time no component instance exists. So the name has to be entered by hand.</p>
  <p class="P5">The next illustration shows how the new assignment is shown in the <span class="T68">Assign Action</span> dialog.</p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table49"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table49A1">
      <div class="Paragraph"><div style="width: 13.998cm; " id="Frame5" class="fr3">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/AssignedComponentMethod.png" title="link to the full-sized graphic &quot;./AssignedComponentMethod.png&quot;"><img border="0" width="620" height="423" alt="Screenshot of Assign Action dialog showing an assigned component method" src="./4 Writing UNO Components_files/AssignedComponentMethod.png" class="fr4" /></a>Illustration <a name="refIllustration12">13</a>: Assign Action dialog with assigned component method</div>
       </div> </div>
     </td></tr></table></div>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table50"><colgroup><col width="112" /><col width="709" /></colgroup><tr><td style="text-align:left;width:2.45cm; " class="Table50A1">
      <div class="TableContents"><img width="39" height="39" alt="Tip graphics marks a hint section in the text" src="./4 Writing UNO Components_files/tip.gif" class="fr2" /> </div>
     </td><td style="text-align:left;width:15.529cm; " class="Table50B1">
      <p class="TipInTable">When designing dialogs that should be used for components, it could make sense to create a new library first (see <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/BasicAndDialogs/BasicAndDialogs.xhtml#1_2_1_2_Macro_Organizer_Dialog" title="see chapter 12.2.1 OpenOffice.org Basic and Dialogs - OpenOffice.org Basic IDE - Managing Basic and Dialog Libraries - Macro Organizer Dialog">12.2.1 OpenOffice.org Basic and Dialogs - OpenOffice.org Basic IDE - Managing Basic and Dialog Libraries - Macro Organizer Dialog</a></span>) and create the dialog there. Reason: The Standard library cannot be exported, but exporting the library containing the dialog as extension can be very useful in order to deploy it together with Â  extension which contains the component.</p>
     </td></tr></table></div>
  <p class="P5">The implementation of methods that should be assigned to events is explained in the following chapter.Â </p>
  <h3 class="Head3"><a name="1_11_2_Using_Dialogs_in_Components" />4.11.2Â Â Using Dialogs in Components</h3>
  <p class="Paragraph">In general components using dialogs are like any other component. But they need some additional code to instantiate and display the dialog(s) to be used and to accept the events created by the dialog controls.Â </p>
  <h4 class="Head4"><a name="1_11_2_1_Instantiate_and_display_a_dialog" />Instantiate and display a dialog</h4>
  <p class="Paragraph">To do this an extended version of the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/DialogProvider.html" title="see type com.sun.star.awt.DialogProvider">com.sun.star.awt.DialogProvider</a></span> service - described in chapter <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ScriptingFramework/ScriptingFramework.xhtml#1_Scripting_Framework" title="see chapter 19 Scripting Framework">19 Scripting Framework</a></span> - has to be used. The extended service version <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/DialogProvider2.html" title="see type com.sun.star.awt.DialogProvider2">com.sun.star.awt.DialogProvider2</a></span> supports <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/XDialogProvider2.html" title="see type com.sun.star.awt.XDialogProvider2">com.sun.star.awt.XDialogProvider2</a></span> providing an additional method <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/XDialog.html" title="see type com.sun.star.awt.XDialog">com.sun.star.awt.XDialog</a> createDialogWithHandler](...)</span> that allows to pass an interface when creating the dialog. This interface will be used as event handler and called if events are bound to the component.</p>
  <p class="Paragraph"><span class="T69">The following code is take from the DialogComponent SDK example that can be found in SDK/examples/DevelopersGuide/Components and shows how a dialog is created and displayed using the </span><span class="Codeintext"><span class="T70">DialogProvider2</span></span><span class="Codeintext"> </span><span class="T69">service:</span> </p>
  <p class="P88">// XTestDialogHandler<br />public String createDialog( String DialogURL, XModel xModel, XFrame xFrame ) {</p>
  <p class="P89">Â  Â  m_xFrame = xFrame;<br /> Â  Â <br /> Â  Â try {<br /> Â  Â  Â  Â XMultiComponentFactory xMCF = m_xCmpCtx.getServiceManager();</p>
  <p class="P89">Â  Â  Â  Â  Object obj;</p>
  <p class="P89">Â </p>
  <p class="P89">Â  Â  Â  Â  // If valid we must pass the XModel when creating a DialogProvider object</p>
  <p class="P89">Â  Â  Â  Â  if( xModel != null ) {</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  Object[] args = new Object[1];</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  args[0] = xModel;</p>
  <p class="P89">Â </p>
  <p class="P89">Â  Â  Â  Â  Â  Â  obj = xMCF.createInstanceWithArgumentsAndContext(</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.awt.DialogProvider2", args, m_xCmpCtx );</p>
  <p class="P89">Â  Â  Â  Â  }</p>
  <p class="P89">Â  Â  Â  Â  else {</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  obj = xMCF.createInstanceWithContext(</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  Â  Â  "com.sun.star.awt.DialogProvider2", m_xCmpCtx );</p>
  <p class="P89">Â  Â  Â  Â  }</p>
  <p class="P89">Â </p>
  <p class="P89">Â  Â  Â  Â  XDialogProvider2 xDialogProvider = (XDialogProvider2)</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  UnoRuntime.queryInterface( XDialogProvider2.class, obj );</p>
  <p class="P89">Â </p>
  <p class="P89">Â  Â  Â  Â  XDialog xDialog = xDialogProvider.createDialogWithHandler( DialogURL, this );</p>
  <p class="P89">Â  Â  Â  Â  if( xDialog != null )</p>
  <p class="P89">Â  Â  Â  Â  Â  Â  xDialog.execute();</p>
  <p class="P89">Â  Â  }<br /> Â  Â catch (Exception e) {<br /> Â  Â  Â  Â e.printStackTrace();<br /> Â  Â }</p>
  <p class="P89">Â  Â  return "Created dialog \"" + DialogURL + "\"";<br />}</p>
  <p class="Paragraph">The variable <span class="Codeintext">m_xCmpCtx</span> is the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/uno/XComponentContext.html" title="see type com.sun.star.uno.XComponentContext">com.sun.star.uno.XComponentContext</a></span> <span class="T63">interface passed to the component while initialisation. If the dialog that should be created is placed inside a document a </span><span class="T71"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/frame/XModel.html" title="see type com.sun.star.frame.XModel">com.sun.star.frame.XModel</a></span> <span class="T63">interface </span><span class="T71">xModel</span> <span class="T63">representing this document has to be passed. It's used as argument to initialise the DialogProvider service enabling the access to the document's Dialog Libraries. If xModel is null the dialog has to be placed in the application library container.</span> This also has to be reflected in the DialogURL passed to the method.</p>
  <p class="Paragraph">Example code for a Basic/Dialog library <span class="Codeintext">Library1</span> placed in a document:</p>
  <p class="P89">Sub TestDialogComponent()Â </p>
  <p class="P89">Â  Â  oComp = CreateUnoService( "com.sun.star.test.TestDialogHandler" )</p>
  <p class="P89">Â  Â  oComp.createDialog( "vnd.sun.star.script:Library1.Dialog1?location=document", _</p>
  <p class="P89">Â  Â  Â  Â  ThisComponent, StarDesktop.getActiveFrame() )</p>
  <p class="P89">End SubÂ </p>
  <p class="Paragraph">Example code for a Basic/Dialog library <span class="Codeintext">Library1</span> placed in âMy Macrosâ:</p>
  <p class="P89">Sub TestDialogComponent()Â </p>
  <p class="P89">Â  Â  oComp = CreateUnoService( "com.sun.star.test.TestDialogHandler" )</p>
  <p class="P89">Â  Â  oComp.createDialog( "vnd.sun.star.script:Library1.Dialog1?location=application", _</p>
  <p class="P89">Â  Â  Â  Â  null, StarDesktop.getActiveFrame() )</p>
  <p class="P89">End SubÂ </p>
  <p class="Paragraph"><span class="T18">The dialog contained in the DialogComponent.odt sample document in </span><span class="T69">SDK/examples/DevelopersGuide/Components/DialogComponent looks like this.</span> </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table52"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table52A1">
      <div class="Paragraph"><div style="width: 11.335cm; " id="Frame6" class="fr3">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/TestDialog.png" title="link to the full-sized graphic &quot;./TestDialog.png&quot;"><img border="0" width="481" height="371" alt="Screenshot showing a sample dialog with some controls" src="./4 Writing UNO Components_files/TestDialog.png" class="fr4" /></a>Illustration <a name="refIllustration13">14</a>: Sample dialog</div>
       </div> </div>
     </td></tr></table></div>
  <p class="P90">The button labels show which component method is called in each case. The next chapter explains how these methods can be implemented inside the component. Method âdoit3â isn't implemented at all. It's called in the sample dialog to show the resulting error message:Â </p>
  <div style="text-align:left"><table border="0" cellspacing="0" cellpadding="0" class="Table53"><colgroup><col width="821" /></colgroup><tr><td style="text-align:left;width:17.979cm; " class="Table53A1">
      <div class="Paragraph"><div style="width: 7.444cm; " id="Frame61" class="fr3">
        <div class="Illustration"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Components/ErrorMessage.png" title="link to the full-sized graphic &quot;./ErrorMessage.png&quot;"><img border="0" width="319" height="152" alt="Screenshot showing a component method not found error message box" src="./4 Writing UNO Components_files/ErrorMessage.png" class="fr4" /></a>Illustration <a name="refIllustration14">15</a>: Error message for not existing method</div>
       </div> </div>
     </td></tr></table></div>
  <h4 class="Head4"><a name="1_11_2_2_Accept_events_created_by_dialog_controls" />Accept events created by dialog controls</h4>
  <p class="Paragraph">The event handling functionality can be implemented in two different ways. The test component described here uses both ways.Â </p>
  <p class="Paragraph">The first way is to implement a the generic handler interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/XDialogEventHandler.html" title="see type com.sun.star.awt.XDialogEventHandler">com.sun.star.awt.XDialogEventHandler</a></span> containing two methods:</p>
  <p class="P89">interface XDialogEventHandler: com::sun::star::uno::XInterface<br />{<br /> Â  Â bool callHandlerMethod<br /> Â  Â (<br /> Â  Â  Â  Â [in] com::sun::star::awt::XDialog xDialog,<br /> Â  Â  Â  Â [in] any Event, <br /> Â  Â  Â  Â [in] string MethodName<br /> Â  Â )</p>
  <p class="P89">Â </p>
  <p class="P89">Â  Â  sequence&lt;string&gt; getSupportedMethodNames();<br />}</p>
  <p class="Paragraph"><span class="T63">If an event occurs that is bound to a component method and the component implements this interface the method </span><span class="T71">callHandlerMethod</span> <span class="T63">will be called first with the method name used in the event binding passed as </span><span class="T71">MethodName</span> <span class="T63">parameter. In this example this would be:</span> </p>
  <p class="P91">xHandler.callHandlerMethod( xDialog, aEvent, âhandleEventâ );Â </p>
  <p class="P92">xDialog points to the same dialog instance that has been returned by the <span class="Codeintext">createDialogWithHandler()</span> method. Event represents the event object originally passed to the awt listener method. E.g. in case of the âWhen initiatingâ event used in this example the corresponding awt listener interface is <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/XActionListener.html" title="see type com.sun.star.awt.XActionListener">com.sun.star.awt.XActionListener</a></span> and an <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/ActionEvent.html" title="see type com.sun.star.awt.ActionEvent">com.sun.star.awt.ActionEvent</a></span> is passed to its <span class="Codeintext">actionPerformed</span> method when the event occurs. This <span class="Codeintext">ActionEvent</span> object will also be passed to <span class="Codeintext">callHandlerMethod</span>. The Event object has to be passed as any, because other events use different listener interfaces with other event object types. <span class="Codeintext">callHandlerMethod</span> returns a bool value. Returning true means that the event has been handled. </p>
  <p class="P92">The method <span class="Codeintext">getSupportedMethodNames()</span> should return the names of all methods handled by <span class="Codeintext">callHandlerMethod()</span>. It's intended for later use, especially to expand the user interface to allow browsing a component's methods. </p>
  <p class="P92">If the event has not been handled, because <span class="Codeintext">callHandlerMethod</span> returns false or <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/XDialogEventHandler.html" title="see type com.sun.star.awt.XDialogEventHandler">com.sun.star.awt.XDialogEventHandler</a></span> isn't supported at all by the component, the DialogProvider uses the <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/beans/Introspection.html" title="see type com.sun.star.beans.Introspection">com.sun.star.beans.Introspection</a></span> service to detect if one of the following methods is provided by one of the interfaces supported by the component:</p>
  <p class="P91">void [MethodName] <br />(<br /> Â  Â [in] com::sun::star::awt::XDialog xDialog,<br /> Â  Â [in] any aEvent <br />);</p>
  <p class="P91">Â </p>
  <p class="P91">orÂ </p>
  <p class="P91">Â </p>
  <p class="P91">void [MethodName]( void );Â </p>
  <p class="Paragraph"><span class="T63">The second method is only used if the first one is not available. In this example the component would have to support an interface containing a method </span><span class="T71">handleEvent</span> <span class="T63">with one of these signatures. It also has to support </span><span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/lang/XTypeProvider.html" title="see type com.sun.star.lang.XTypeProvider">com.sun.star.lang.XTypeProvider</a></span> <span class="T63">because otherwise the introspection mechanism does not work.</span> </p>
  <p class="P92">As already mentioned the sample component supports both ways to implement handler methods. <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/awt/XDialogEventHandler.html" title="see type com.sun.star.awt.XDialogEventHandler">com.sun.star.awt.XDialogEventHandler</a></span> is implemented like this:</p>
  <p class="P91">private String aHandlerMethod1 = "doit1";Â </p>
  <p class="P91">private String aHandlerMethod2 = "doit2";Â </p>
  <p class="P91">Â </p>
  <p class="P91">//XDialogEventHandlerÂ </p>
  <p class="P91">public boolean callHandlerMethod( /*IN*/XDialog xDialog, /*IN*/Object EventObject, Â </p>
  <p class="P91">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  /*IN*/String MethodName ) {</p>
  <p class="P91">Â  Â  if ( MethodName.equals( aHandlerMethod1 ) ) {</p>
  <p class="P91">Â  Â  Â  Â  showMessageBox( "DialogComponent", "callHandlerMethod() handled \"" + aHandlerMethod1 + "\"" );</p>
  <p class="P91">Â  Â  Â  Â  return true;</p>
  <p class="P91">Â  Â  }</p>
  <p class="P91">Â  Â  else if ( MethodName.equals( aHandlerMethod2 ) ) {</p>
  <p class="P91">Â  Â  Â  Â  showMessageBox( "DialogComponent", "callHandlerMethod() handled \"" + aHandlerMethod2 + "\"" );</p>
  <p class="P91">Â  Â  Â  Â  return true;</p>
  <p class="P91">Â  Â  }</p>
  <p class="P91">Â  Â  return false;</p>
  <p class="P91">}Â </p>
  <p class="P91">Â </p>
  <p class="P91">public String[] getSupportedMethodNames() {Â </p>
  <p class="P91">Â  Â  String[] retValue= new String[1];</p>
  <p class="P91">Â  Â  retValue[0]= aHandlerMethod1;</p>
  <p class="P91">Â  Â  retValue[1]= aHandlerMethod2;</p>
  <p class="P91">Â  Â  return retValue;</p>
  <p class="P91">}Â </p>
  <p class="P92">The implementation is very simple to show only the logic. For the two handled method names the method displays a MessageBox and return true. Otherwise false is returned.Â </p>
  <p class="P92">The other methods bound to the sample dialog control events are implemented using the other way. The interface <span class="Codeintext"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/common/ref/com/sun/star/test/XTestDialogHandler.html" title="see type com.sun.star.test.XTestDialogHandler">com.sun.star.test.XTestDialogHandler</a></span> looks like this:</p>
  <p class="P91">module com { Â module sun { Â module star { Â module test {<br /> Â  Â interface XTestDialogHandler { <br /> Â  Â  Â  Â string createDialog( [in] string DialogURL, [in] ::com::sun::star::frame::XModel xModel,<br /> Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  [in] ::com::sun::star::frame::XFrame xFrame );<br /> Â  Â  Â  Â void copyText( [in] ::com::sun::star::awt::XDialog xDialog, [in] any aEventObject );<br /> Â  Â  Â  Â void handleEvent(); <br /> Â  Â  Â  Â void handleEventWithArguments( [in] ::com::sun::star::awt::XDialog xDialog, </p>
  <p class="P91">Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â [in] any aEventObject ); <br /> Â  Â }; <br />}; }; }; };</p>
  <p class="P92">Besides the already described <span class="Codeintext">createDialog</span> method three methods are defined to handle events. <span class="Codeintext">handleEvent</span> and <span class="Codeintext">handleEventWithArguments</span> are implemented very simple and only display a message box:</p>
  <p class="P91">public void handleEvent() {<br /> Â  Â showMessageBox( "DialogComponent", "handleEvent() called" );</p>
  <p class="P91">}<br /> Â  <br />public void handleEventWithArguments( XDialog xDialog, Object aEventObject ) {<br /> Â  Â showMessageBox( "DialogComponent", "handleEventWithArguments() called\n\n" +</p>
  <p class="P91">Â  Â  Â  Â  "Event Object = " + aEventObject );</p>
  <p class="P91">}Â </p>
  <p class="P92">The method copy text shows, how the passed XDialog interface can be used to access controls on the dialog itself. The details are not described here. For more information see <span class="ChapterRef"><a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/BasicAndDialogs/BasicAndDialogs.xhtml#1_6_Creating_Dialogs_at_Runtime" title="see chapter 12.6 OpenOffice.org Basic and Dialogs - Creating Dialogs at Runtime">12.6 OpenOffice.org Basic and Dialogs - Creating Dialogs at Runtime</a></span>.</p>
  <p class="P91">public void copyText( XDialog xDialog, Object aEventObject ) {Â </p>
  <p class="P91">Â  Â  XControlContainer xControlContainer = (XControlContainer)UnoRuntime.queryInterface(</p>
  <p class="P91">Â  Â  Â  Â  XControlContainer.class, xDialog );</p>
  <p class="P91">Â </p>
  <p class="P91">Â  Â  String aTextPropertyStr = "Text";</p>
  <p class="P91">Â  Â  String aText = "";</p>
  <p class="P91">Â  Â  XControl xTextField1Control = xControlContainer.getControl( "TextField1" );Â  Â  Â  Â   </p>
  <p class="P91">Â  Â  XControlModel xControlModel1 = xTextField1Control.getModel();</p>
  <p class="P91">Â  Â  XPropertySet xPropertySet1 = (XPropertySet)UnoRuntime.queryInterface(</p>
  <p class="P91">Â  Â  Â  Â  XPropertySet.class, xControlModel1 );</p>
  <p class="P91">Â  Â  try {</p>
  <p class="P91">Â  Â  Â  Â  aText = (String)xPropertySet1.getPropertyValue( aTextPropertyStr );</p>
  <p class="P91">Â  Â  }</p>
  <p class="P91">Â  Â  catch (Exception e) {</p>
  <p class="P91">Â  Â  Â  Â  e.printStackTrace();</p>
  <p class="P91">Â  Â  }</p>
  <p class="P91">Â </p>
  <p class="P91">Â  Â  XControl xTextField2Control = xControlContainer.getControl( "TextField2" );Â  Â  Â  Â   </p>
  <p class="P91">Â  Â  XControlModel xControlModel2 = xTextField2Control.getModel();</p>
  <p class="P91">Â  Â  XPropertySet xPropertySet2 = (XPropertySet)UnoRuntime.queryInterface(</p>
  <p class="P91">Â  Â  Â  Â  XPropertySet.class, xControlModel2 );</p>
  <p class="P91">Â  Â  try {</p>
  <p class="P91">Â  Â  Â  Â  xPropertySet2.setPropertyValue( aTextPropertyStr, aText );</p>
  <p class="P91">Â  Â  }</p>
  <p class="P91">Â  Â  catch (Exception e) {</p>
  <p class="P91">Â  Â  Â  Â  e.printStackTrace();</p>
  <p class="P91">Â  Â  }</p>
  <p class="P91">Â </p>
  <p class="P91">Â  Â  showMessageBox( "DialogComponent", "copyText() called" );</p>
  <p class="P91">} Â  </p>
  <p class="P92">Simple components using dialogs can be realised very easily by supporting XDialogEventHandler as then no own interfaces have to be created. For complex components it could make more sense to define handler interfaces to avoid a huge switch/case blocks in XDialogEventHandler:: callHandlerMethod.Â </p>
 <p style="text-align:center;"><small>[ <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/ProfUNO/ProfUNO.xhtml" title="Link to previous document">Previous document</a> | <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/DevelopersGuide.xhtml" title="Link to the Content Table">Content Table</a> | <a href="http://replay.waybackmachine.org/20090427181406/http://api.openoffice.org/docs/DevelopersGuide/Extensions/Extensions.xhtml" title="Link to next document">Next document</a> ]</small></p></body></html>